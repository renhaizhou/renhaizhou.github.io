<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hashmap深入分析</title>
    <url>/hashmap/</url>
    <content><![CDATA[<h1 id="hashmap底层数据结构"><a href="#hashmap底层数据结构" class="headerlink" title="hashmap底层数据结构"></a>hashmap底层数据结构</h1><p><img src="../images/hashMap%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84.png" alt="hashmap-逻辑结构"></p>
<a id="more"></a>
<h2 id="PUT方法"><a href="#PUT方法" class="headerlink" title="PUT方法"></a>PUT方法</h2><p><img src="../images/hashmap-put%E6%96%B9%E6%B3%95.png" alt="hashmap-put方法"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//table全局变量,存储链表头节点数组</span></span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="comment">//如果table数组是空的，则创建一个头结点数据，默认长度是16</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="comment">//n是table长度,根据数组长度和key的哈希值，定位当前key在table中的下标位置,如果为空则新建一个node。不为空走else</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="comment">// 如果新的key与table中索引处取出的头节点的key相等，且hash值一致，则把新的node替换掉旧的node</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="comment">//如果头节点不是空，且头节点的类型是树节点类型，则把当前节点插入当前头节点所在的树中(红黑树，防止链表过长，1.8的优化)</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="comment">//map的数据结构处理</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//遍历链表</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="comment">//如果链表长度大于或等于8，则把链表转化为红黑树，重点转化方法(treeifyBin)</span></span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            <span class="comment">//此方法构建红黑树</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//如果当前节点的key和hash均和待插入的节点相等，则退出循环，(注意此时e的值在前一个if时赋值过，因此当前的e值，就是链表中的当前节点值)</span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果老节点不是空，则将老节点的值替换为新值，并返回老的值</span></span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                <span class="comment">//此方法实现的逻辑,是把入参的节点放置在链表的尾部，但在HashMap中是空实现，在LinkedHashMap中有具体实现</span></span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//保证并发访问时，若HashMap内部结构发生变化，快速响应失败</span></span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="comment">//当table[]长度大于临界阈值，调用resize方法进行扩容</span></span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        <span class="comment">//此方法在HashMap中是空方法，在LinkedHashMap中有实现</span></span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="hashmap的hash算法和寻址算法如何优化"><a href="#hashmap的hash算法和寻址算法如何优化" class="headerlink" title="hashmap的hash算法和寻址算法如何优化"></a>hashmap的hash算法和寻址算法如何优化</h1><h1 id="hashmap如何解决hash碰撞"><a href="#hashmap如何解决hash碰撞" class="headerlink" title="hashmap如何解决hash碰撞"></a>hashmap如何解决hash碰撞</h1><h1 id="hashmap如何扩容"><a href="#hashmap如何扩容" class="headerlink" title="hashmap如何扩容"></a>hashmap如何扩容</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">        <span class="comment">//oldCap---原hashMap的最大容量,oldThr---原hashMap的负载容量</span></span><br><span class="line">        <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">        <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">        <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">                threshold = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">return</span> oldTab;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//左移一位,就是将原来的容量翻倍，翻倍后的值小于2的30次方，大于原来的容量值</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">                <span class="comment">//原来的负载容量翻倍</span></span><br><span class="line">                newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">            newCap = oldThr;</span><br><span class="line">        <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">            newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">            newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                      (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        threshold = newThr;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">            Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">        table = newTab;</span><br><span class="line">        <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">                Node&lt;K,V&gt; e;</span><br><span class="line">                <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                        newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                    <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                        Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; next;</span><br><span class="line">                        <span class="keyword">do</span> &#123;</span><br><span class="line">                            next = e.next;</span><br><span class="line">                            <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                    loHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    loTail.next = e;</span><br><span class="line">                                loTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                    hiHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hiTail.next = e;</span><br><span class="line">                                hiTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j] = loHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j + oldCap] = hiHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newTab;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>数组</title>
    <url>/algorithms/array/</url>
    <content><![CDATA[<h1 id="如何实现随机访问？"><a href="#如何实现随机访问？" class="headerlink" title="如何实现随机访问？"></a>如何实现随机访问？</h1><p>数组（Array）是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。<br>第一是线性表（Linear List）。<br>第二个是连续的内存空间和相同类型的数据。</p>
<a id="more"></a>
<h1 id="插入、删除"><a href="#插入、删除" class="headerlink" title="插入、删除"></a>插入、删除</h1><p>时间复杂度o(n)</p>
<h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><p>数组是适合查找操作，但是查找的时间复杂度并不为 O(1)。即便是排好序的数组，你用二分查找，时间复杂度也是 O(logn)。所以，正确的表述应该是，数组支持随机访问，根据下标随机访问的时间复杂度为 O(1)。</p>
<h1 id="为什么大多数编程语言中，数组要从-0-开始编号，而不是从-1-开始呢？"><a href="#为什么大多数编程语言中，数组要从-0-开始编号，而不是从-1-开始呢？" class="headerlink" title="为什么大多数编程语言中，数组要从 0 开始编号，而不是从 1 开始呢？"></a>为什么大多数编程语言中，数组要从 0 开始编号，而不是从 1 开始呢？</h1><p>从数组存储的内存模型上来看，“下标”最确切的定义应该是“偏移（offset）”。前面也讲到，如果用 a 来表示数组的首地址，a[0] 就是偏移为 0 的位置，也就是首地址，a[k] 就表示偏移 k 个 type_size 的位置，所以计算 a[k] 的内存地址只需要用这个公式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a[k]_address = base_address + k * type_size</span><br></pre></td></tr></table></figure>
<p>但是，如果数组从 1 开始计数，那我们计算数组元素 a[k] 的内存地址就会变为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a[k]_address = base_address + (k-<span class="number">1</span>)*type_size</span><br></pre></td></tr></table></figure>
<p>对比两个公式，我们不难发现，从 1 开始编号，每次随机访问数组元素都多了一次减法运算，对于 CPU 来说，就是多了一次减法指令。<br>数组作为非常基础的数据结构，通过下标随机访问数组元素又是其非常基础的编程操作，效率的优化就要尽可能做到极致。所以为了减少一次减法操作，数组选择了从 0 开始编号，而不是从 1 开始。<br>不过我认为，上面解释得再多其实都算不上压倒性的证明，说数组起始编号非 0 开始不可。所以我觉得最主要的原因可能是历史原因。</p>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>回溯</title>
    <url>/algorithms/backtrack/</url>
    <content><![CDATA[<h1 id="全排列、子集、组合"><a href="#全排列、子集、组合" class="headerlink" title="全排列、子集、组合"></a>全排列、子集、组合</h1><h2 id="leetcode-46-全排列"><a href="#leetcode-46-全排列" class="headerlink" title="leetcode 46. 全排列"></a>leetcode 46. 全排列</h2><p>给定一个 没有重复 数字的序列，返回其所有可能的全排列。<br>示例:</p>
<a id="more"></a>
<p>输入: [1,2,3]<br>输出:<br>[<br>  [1,2,3],<br>  [1,3,2],<br>  [2,1,3],<br>  [2,3,1],<br>  [3,1,2],<br>  [3,2,1]<br>]<br><img src="http://assets.processon.com/chart_image/5eef55e2e401fd1fd2a40562.png" alt="全排列决策树"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="comment">// Arrays.sort(nums); // not necessary</span></span><br><span class="line">        backtrack(<span class="keyword">new</span> ArrayList&lt;&gt;(), nums,<span class="keyword">new</span> <span class="keyword">boolean</span>[nums.length]);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">backtrack</span><span class="params">(List&lt;Integer&gt; tempList, <span class="keyword">int</span>[] nums,<span class="keyword">boolean</span>[] visited)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tempList.size() == nums.length) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> ArrayList&lt;&gt;(tempList));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[i]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>; <span class="comment">// element already exists, skip</span></span><br><span class="line">            &#125;</span><br><span class="line">            visited[i] = <span class="keyword">true</span>;</span><br><span class="line">            tempList.add(nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(backtrack(tempList, nums,visited))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            visited[i] = <span class="keyword">false</span>;</span><br><span class="line">            tempList.remove(tempList.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="leetcode-78-子集"><a href="#leetcode-78-子集" class="headerlink" title="leetcode 78. 子集"></a>leetcode 78. 子集</h2><p>给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。</p>
<p>说明：解集不能包含重复的子集。</p>
<p>示例:</p>
<p>输入: nums = [1,2,3]<br>输出:<br>[<br>  [3],<br>  [1],<br>  [2],<br>  [1,2,3],<br>  [1,3],<br>  [2,3],<br>  [1,2],<br>  []<br>]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        backtrack(list, <span class="keyword">new</span> ArrayList&lt;&gt;(), nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; list , List&lt;Integer&gt; tempList, <span class="keyword">int</span> [] nums, <span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">        list.add(<span class="keyword">new</span> ArrayList&lt;&gt;(tempList));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt; nums.length; i++)&#123;</span><br><span class="line">            tempList.add(nums[i]);</span><br><span class="line">            backtrack(list, tempList, nums, i + <span class="number">1</span>);</span><br><span class="line">            tempList.remove(tempList.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="leetcode-77-组合"><a href="#leetcode-77-组合" class="headerlink" title="leetcode 77. 组合"></a>leetcode 77. 组合</h2><p>给定两个整数 n 和 k，返回 1 … n 中所有可能的 k 个数的组合。</p>
<p>示例:</p>
<p>输入: n = 4, k = 2<br>输出:<br>[<br>  [2,4],<br>  [3,4],<br>  [2,3],<br>  [1,2],<br>  [1,3],<br>  [1,4],<br>]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; combine(<span class="keyword">int</span> n, <span class="keyword">int</span> k) &#123;</span><br><span class="line">		List&lt;List&lt;Integer&gt;&gt; combs = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">		combine(combs, <span class="keyword">new</span> ArrayList&lt;Integer&gt;(), <span class="number">1</span>, n, k);</span><br><span class="line">		<span class="keyword">return</span> combs;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">combine</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; combs, List&lt;Integer&gt; comb, <span class="keyword">int</span> start, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(k==comb.size()) &#123;</span><br><span class="line">			combs.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(comb));</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;=n;i++) &#123;</span><br><span class="line">			comb.add(i);</span><br><span class="line">			combine(combs, comb, i+<span class="number">1</span>, n, k);</span><br><span class="line">			comb.remove(comb.size()-<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="数独、N皇后"><a href="#数独、N皇后" class="headerlink" title="数独、N皇后"></a>数独、N皇后</h1><h2 id="leetcode-37-解数独"><a href="#leetcode-37-解数独" class="headerlink" title="leetcode 37. 解数独"></a>leetcode 37. 解数独</h2><p>编写一个程序，通过已填充的空格来解决数独问题。</p>
<p>一个数独的解法需遵循如下规则：</p>
<p>数字 1-9 在每一行只能出现一次。<br>数字 1-9 在每一列只能出现一次。<br>数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。<br>空白格用 ‘.’ 表示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solveSudoku</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (board == <span class="keyword">null</span> || board.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        backtrack(board,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">9</span>, n = <span class="number">9</span>;</span><br><span class="line">        <span class="keyword">if</span> (j == n) &#123;</span><br><span class="line">            <span class="comment">// 穷举到最后一列的话就换到下一行重新开始。</span></span><br><span class="line">            <span class="keyword">return</span> backtrack(board, i + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == m) &#123;</span><br><span class="line">            <span class="comment">// 找到一个可行解，触发 base case</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (board[i][j] != <span class="string">'.'</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果有预设数字，不用我们穷举</span></span><br><span class="line">            <span class="keyword">return</span> backtrack(board, i, j + <span class="number">1</span>);</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch = <span class="string">'1'</span>; ch &lt;= <span class="string">'9'</span>; ch++) &#123;</span><br><span class="line">            <span class="comment">// 如果遇到不合法的数字，就跳过</span></span><br><span class="line">            <span class="keyword">if</span> (!isValid(board, i, j, ch))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            board[i][j] = ch;</span><br><span class="line">            <span class="comment">// 如果找到一个可行解，立即结束</span></span><br><span class="line">            <span class="keyword">if</span> (backtrack(board, i, j + <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            board[i][j] = <span class="string">'.'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 穷举完 1~9，依然没有找到可行解，此路不通</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][col] != <span class="string">'.'</span> &amp;&amp; board[i][col] == c) <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">//check row</span></span><br><span class="line">            <span class="keyword">if</span> (board[row][i] != <span class="string">'.'</span> &amp;&amp; board[row][i] == c) <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">//check column</span></span><br><span class="line">            <span class="keyword">if</span> (board[<span class="number">3</span> * (row / <span class="number">3</span>) + i / <span class="number">3</span>][<span class="number">3</span> * (col / <span class="number">3</span>) + i % <span class="number">3</span>] != <span class="string">'.'</span> &amp;&amp;</span><br><span class="line">                    board[<span class="number">3</span> * (row / <span class="number">3</span>) + i / <span class="number">3</span>][<span class="number">3</span> * (col / <span class="number">3</span>) + i % <span class="number">3</span>] == c) <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">//check 3*3 block</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="leetcode-51-N皇后"><a href="#leetcode-51-N皇后" class="headerlink" title="leetcode 51. N皇后"></a>leetcode 51. N皇后</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; solveNQueens(<span class="keyword">int</span> n) &#123;</span><br><span class="line">    <span class="keyword">char</span>[][] chess = <span class="keyword">new</span> <span class="keyword">char</span>[n][n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        chess[i][j] = <span class="string">'.'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    solve(res, chess, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(List&lt;List&lt;String&gt;&gt; res, <span class="keyword">char</span>[][] chess, <span class="keyword">int</span> row)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (row == chess.length) &#123;</span><br><span class="line">      res.add(construct(chess));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; chess.length; col++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (valid(chess, row, col)) &#123;</span><br><span class="line">        chess[row][col] = <span class="string">'Q'</span>;</span><br><span class="line">        solve(res, chess, row + <span class="number">1</span>);</span><br><span class="line">        chess[row][col] = <span class="string">'.'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">valid</span><span class="params">(<span class="keyword">char</span>[][] chess, <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// check all cols</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (chess[i][col] == <span class="string">'Q'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//check 45 degree</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = row - <span class="number">1</span>, j = col + <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &lt; chess.length; i--, j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (chess[i][j] == <span class="string">'Q'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//check 135</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = row - <span class="number">1</span>, j = col - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>; i--, j--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (chess[i][j] == <span class="string">'Q'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">construct</span><span class="params">(<span class="keyword">char</span>[][] chess)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; path = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chess.length; i++) &#123;</span><br><span class="line">      path.add(<span class="keyword">new</span> String(chess[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> path;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h1><h2 id="leetcode-22-括号生成"><a href="#leetcode-22-括号生成" class="headerlink" title="leetcode 22. 括号生成"></a>leetcode 22. 括号生成</h2><p><img src="http://assets.processon.com/chart_image/5ef01dabf346fb1ae5740cff.png" alt="括号生成"><br>数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。</p>
<p>示例：</p>
<p>输入：n = 3<br>输出：[<br>       “((()))”,<br>       “(()())”,<br>       “(())()”,<br>       “()(())”,<br>       “()()()”<br>     ]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        backtrack(n,n,<span class="keyword">new</span> StringBuilder(),res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right, StringBuilder track,List&lt;String&gt; res)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若左括号剩下的多，说明不合法</span></span><br><span class="line">        <span class="keyword">if</span> (right &lt; left) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 数量小于 0 肯定是不合法的</span></span><br><span class="line">        <span class="keyword">if</span> (left &lt; <span class="number">0</span> || right &lt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 当所有括号都恰好用完时，得到一个合法的括号组合</span></span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">0</span> &amp;&amp; right == <span class="number">0</span>) &#123;</span><br><span class="line">            res.add(track.toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 尝试放一个左括号</span></span><br><span class="line">        track.append(<span class="string">'('</span>); <span class="comment">// 选择</span></span><br><span class="line">        backtrack(left - <span class="number">1</span>, right, track, res);</span><br><span class="line">        track.deleteCharAt(track.length() - <span class="number">1</span>); <span class="comment">// 撤消选择</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 尝试放一个右括号</span></span><br><span class="line">        track.append(<span class="string">')'</span>); <span class="comment">// 选择</span></span><br><span class="line">        backtrack(left, right - <span class="number">1</span>, track, res);</span><br><span class="line">        track.deleteCharAt(track.length() - <span class="number">1</span>);<span class="comment">// 撤消选择</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>二分查找</title>
    <url>/algorithms/binary-search/</url>
    <content><![CDATA[<h1 id="寻找一个数（基本的二分搜索）"><a href="#寻找一个数（基本的二分搜索）" class="headerlink" title="寻找一个数（基本的二分搜索）"></a>寻找一个数（基本的二分搜索）</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary_search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.length - <span class="number">1</span>; </span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>; </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] == target) &#123;</span><br><span class="line">            <span class="comment">// 直接返回</span></span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 直接返回</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>
<h1 id="寻找左侧边界的二分搜索"><a href="#寻找左侧边界的二分搜索" class="headerlink" title="寻找左侧边界的二分搜索"></a>寻找左侧边界的二分搜索</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">left_bound</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            <span class="comment">// 别返回，锁定左侧边界</span></span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最后要检查 left 越界的情况</span></span><br><span class="line">    <span class="keyword">if</span> (left &gt;= nums.length || nums[left] != target)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="寻找右侧边界的二分查找"><a href="#寻找右侧边界的二分查找" class="headerlink" title="寻找右侧边界的二分查找"></a>寻找右侧边界的二分查找</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">right_bound</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            <span class="comment">// 别返回，锁定右侧边界</span></span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最后要检查 right 越界的情况</span></span><br><span class="line">    <span class="keyword">if</span> (right &lt; <span class="number">0</span> || nums[right] != target)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划</title>
    <url>/algorithms/dp/</url>
    <content><![CDATA[<h1 id="表达式匹配"><a href="#表达式匹配" class="headerlink" title="表达式匹配"></a>表达式匹配</h1><h2 id="leetcode-10-正则表达式匹配"><a href="#leetcode-10-正则表达式匹配" class="headerlink" title="leetcode 10.正则表达式匹配"></a>leetcode 10.正则表达式匹配</h2><p>给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 ‘.’ 和 ‘*’ 的正则表达式匹配。</p>
<p>‘.’ 匹配任意单个字符<br>‘*’ 匹配零个或多个前面的那一个元素<br>所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。</p>
<p>说明:</p>
<ul>
<li>s 可能为空，且只包含从 a-z 的小写字母。</li>
<li>p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。<a id="more"></a>
<img src="http://assets.processon.com/chart_image/5ed07adbe401fd268ddcca6d.png" alt="正则表达式匹配"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.如果 p.charAt(j) == s.charAt(i) : dp[i][j] = dp[i-1][j-1]；</span></span><br><span class="line">    <span class="comment">// 2.如果 p.charAt(j) == '.' : dp[i][j] = dp[i-1][j-1]；</span></span><br><span class="line">    <span class="comment">// 3.如果 p.charAt(j) == '*'：</span></span><br><span class="line">    <span class="comment">// 3.1如果 p.charAt(j-1) != s.charAt(i) : dp[i][j] = dp[i][j-2] //in this case, a* only counts as empty</span></span><br><span class="line">    <span class="comment">// 3.2如果 p.charAt(i-1) == s.charAt(i) or p.charAt(i-1) == '.'：</span></span><br><span class="line">    <span class="comment">// dp[i][j] = dp[i-1][j] //in this case, a* counts as multiple a</span></span><br><span class="line">    <span class="comment">// or dp[i][j] = dp[i][j-1] // in this case, a* counts as single a</span></span><br><span class="line">    <span class="comment">// or dp[i][j] = dp[i][j-2] // in this case, a* counts as empty</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || p == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length() + <span class="number">1</span>][p.length() + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.charAt(i - <span class="number">1</span>) == <span class="string">'*'</span> &amp;&amp; dp[<span class="number">0</span>][i - <span class="number">2</span>]) &#123;</span><br><span class="line">                dp[<span class="number">0</span>][i] = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= p.length(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) == <span class="string">'.'</span> || p.charAt(j - <span class="number">1</span>) == s.charAt(i - <span class="number">1</span>)) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) == <span class="string">'*'</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (p.charAt(j - <span class="number">2</span>) != s.charAt(i - <span class="number">1</span>) &amp;&amp; p.charAt(j - <span class="number">2</span>) != <span class="string">'.'</span>) &#123;</span><br><span class="line">                        dp[i][j] = dp[i][j - <span class="number">2</span>];</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        dp[i][j] = (dp[i][j - <span class="number">1</span>] || dp[i - <span class="number">1</span>][j] || dp[i][j - <span class="number">2</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[s.length()][p.length()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="leetcode-44-通配符匹配"><a href="#leetcode-44-通配符匹配" class="headerlink" title="leetcode 44.通配符匹配"></a>leetcode 44.通配符匹配</h2><p>给定一个字符串 (s) 和一个字符模式 (p) ，实现一个支持 ‘?’ 和 ‘*’ 的通配符匹配。</p>
<p>‘?’ 可以匹配任何单个字符。<br>‘*’ 可以匹配任意字符串（包括空字符串）。<br>两个字符串完全匹配才算匹配成功。</p>
<p>说明:</p>
<ul>
<li>s 可能为空，且只包含从 a-z 的小写字母。</li>
<li>p 可能为空，且只包含从 a-z 的小写字母，以及字符 ? 和 *。</li>
</ul>
<p><img src="http://assets.processon.com/chart_image/5ed7be8b5653bb6c309b5644.png" alt="通配符匹配"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 状态 dp[i][j] : 表示 s 的前 i 个字符和 p 的前 j 个字符是否匹配 (true 的话表示匹配)</span></span><br><span class="line">    <span class="comment">// 状态转移方程：</span></span><br><span class="line">    <span class="comment">// 1. 当 s[i] == p[j]，或者 p[j] == ? 那么 dp[i][j] = dp[i - 1][j - 1];</span></span><br><span class="line">    <span class="comment">// 2. 当 p[j] == * 那么 dp[i][j] = dp[i][j - 1] || dp[i - 1][j]    其中：</span></span><br><span class="line">    <span class="comment">// dp[i][j - 1] 表示 * 代表的是空字符，例如 ab, ab*</span></span><br><span class="line">    <span class="comment">// dp[i - 1][j] 表示 * 代表的是非空字符，例如 abcd, ab*</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = s.length();</span><br><span class="line">        <span class="keyword">int</span> n = p.length();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 状态 dp[i][j] : 表示 s 的前 i 个字符和 p 的前 j 个字符是否匹配</span></span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i - <span class="number">1</span>] &amp;&amp; p.charAt(i - <span class="number">1</span>) == <span class="string">'*'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 状态转移</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i - <span class="number">1</span>) == p.charAt(j - <span class="number">1</span>) || p.charAt(j - <span class="number">1</span>) == <span class="string">'?'</span>) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) == <span class="string">'*'</span>) &#123;</span><br><span class="line">                    dp[i][j] = dp[i][j - <span class="number">1</span>] || dp[i - <span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回结果</span></span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="连续子数组和、积最值问题"><a href="#连续子数组和、积最值问题" class="headerlink" title="连续子数组和、积最值问题"></a>连续子数组和、积最值问题</h1><h2 id="leetcode-53-最大子序和"><a href="#leetcode-53-最大子序和" class="headerlink" title="leetcode 53. 最大子序和"></a>leetcode 53. 最大子序和</h2><p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>
<p>示例:</p>
<p>输入: [-2,1,-3,4,-1,2,1,-5,4],<br>输出: 6<br>解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。<br>进阶:</p>
<p>如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dp[] = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nums.length; i++) &#123;</span><br><span class="line">            dp[i] = Math.max(dp[i-<span class="number">1</span>] + nums[i-<span class="number">1</span>], nums[i-<span class="number">1</span>]);</span><br><span class="line">            <span class="comment">// dp[i] = nums[i-1] + (dp[i - 1] &gt; 0 ? dp[i - 1] : 0);</span></span><br><span class="line">            max = Math.max(dp[i], max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="leetcode-152-乘积最大子数组"><a href="#leetcode-152-乘积最大子数组" class="headerlink" title="leetcode 152. 乘积最大子数组"></a>leetcode 152. 乘积最大子数组</h2><p>给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// store the result that is the max we have found so far</span></span><br><span class="line">        <span class="keyword">int</span> r = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> imax = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> imin = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// imax/imin stores the max/min product of</span></span><br><span class="line">        <span class="comment">// subarray that ends with the current number A[i]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">            <span class="comment">// multiplied by a negative makes big number smaller, small number bigger</span></span><br><span class="line">            <span class="comment">// so we redefine the extremums by swapping them</span></span><br><span class="line">            <span class="keyword">if</span> (A[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = imax;</span><br><span class="line">                imax = imin;</span><br><span class="line">                imin = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// max/min product for the current number is either the current number itself</span></span><br><span class="line">            <span class="comment">// or the max/min by the previous number times the current one</span></span><br><span class="line">            imax = Math.max(A[i], imax * A[i]);</span><br><span class="line">            imin = Math.min(A[i], imin * A[i]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// the newly computed max value is a candidate for our global result</span></span><br><span class="line">            r = Math.max(r, imax);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span>[] dpMax = <span class="keyword">new</span> <span class="keyword">int</span>[A.length + <span class="number">1</span>];</span><br><span class="line">        dpMax[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] dpMin = <span class="keyword">new</span> <span class="keyword">int</span>[A.length + <span class="number">1</span>];</span><br><span class="line">        dpMin[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= A.length; i++) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (A[i-<span class="number">1</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = dpMax[i-<span class="number">1</span>];</span><br><span class="line">                dpMax[i-<span class="number">1</span>] = dpMin[i-<span class="number">1</span>];</span><br><span class="line">                dpMin[i-<span class="number">1</span>] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            dpMax[i] = Math.max(A[i-<span class="number">1</span>],dpMax[i-<span class="number">1</span>]*A[i-<span class="number">1</span>]);</span><br><span class="line">            dpMin[i] = Math.min(A[i-<span class="number">1</span>],dpMin[i-<span class="number">1</span>]*A[i-<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">            r = Math.max(r, dpMax[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="leetcode-300-最长上升子序列"><a href="#leetcode-300-最长上升子序列" class="headerlink" title="leetcode 300. 最长上升子序列"></a>leetcode 300. 最长上升子序列</h2><p>给定一个无序的整数数组，找到其中最长上升子序列的长度。</p>
<p>示例:</p>
<p>输入: [10,9,2,5,3,7,101,18]<br>输出: 4<br>解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。<br>说明:</p>
<p>可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。<br>你算法的时间复杂度应该为 O(n2) 。<br>进阶: 你能将算法的时间复杂度降低到 O(n log n) 吗?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length+<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// base case：dp 数组全都初始化为 1</span></span><br><span class="line">        Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i-<span class="number">1</span>] &gt; nums[j-<span class="number">1</span>]) </span><br><span class="line">                    dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            res = Math.max(res, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] tails = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x : nums) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>, j = size;</span><br><span class="line">            <span class="keyword">while</span> (i != j) &#123;</span><br><span class="line">                <span class="keyword">int</span> m = (i + j) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (tails[m] &lt; x)</span><br><span class="line">                    i = m + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    j = m;</span><br><span class="line">            &#125;</span><br><span class="line">            tails[i] = x;</span><br><span class="line">            <span class="keyword">if</span> (i == size) ++size;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h1><h2 id="0-1-背包问题"><a href="#0-1-背包问题" class="headerlink" title="0-1 背包问题"></a>0-1 背包问题</h2><p>给你一个可装载重量为 totalWeight 的背包和 N 个物品，每个物品有重量和价值两个属性。其中第 i 个物品的重量为 wt[i]，价值为 val[i]，现在让你用这个背包装物品，最多能装的价值是多少？</p>
<p>N = 3, totalWeight = 4<br>weight = [2, 1, 3]<br>value = [4, 2, 3]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dp[3][5] = 6，其含义为：对于给定的一系列物品中，若只对前 3 个物品进行选择，当背包容量为 5 时，最多可以装下的价值为 6。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">knapsack</span><span class="params">(<span class="keyword">int</span> totalWeight, <span class="keyword">int</span>[] weight, <span class="keyword">int</span>[] value)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// base case 已初始化</span></span><br><span class="line">  <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[totalWeight + <span class="number">1</span>][totalWeight + <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= weight.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> w = <span class="number">1</span>; w &lt;= totalWeight; w++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (w - weight[i - <span class="number">1</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 这种情况下只能选择不装入背包</span></span><br><span class="line">        dp[i][w] = dp[i - <span class="number">1</span>][w];</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 装入或者不装入背包，择优</span></span><br><span class="line">        dp[i][w] = Math.max(dp[i - <span class="number">1</span>][w - weight[i - <span class="number">1</span>]] + value[i - <span class="number">1</span>], dp[i - <span class="number">1</span>][w]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dp[weight.length][totalWeight];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="leetcode-416-分割等和子集"><a href="#leetcode-416-分割等和子集" class="headerlink" title="leetcode 416. 分割等和子集"></a>leetcode 416. 分割等和子集</h2><p>给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p>
<p>注意:</p>
<p>每个数组中的元素不会超过 100<br>数组的大小不会超过 200</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPartition</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (sum % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sum /= <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>][sum+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// base case</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= sum; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j - nums[i - <span class="number">1</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 背包容量不足，不能装入第 i 个物品</span></span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j]; </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 装入或不装入背包</span></span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] | dp[i - <span class="number">1</span>][j-nums[i-<span class="number">1</span>]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> dp[n][sum];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="leetcode-518-零钱兑换-II"><a href="#leetcode-518-零钱兑换-II" class="headerlink" title="leetcode 518. 零钱兑换 II"></a>leetcode 518. 零钱兑换 II</h2><p>给定不同面额的硬币和一个总金额。写出函数来计算可以凑成总金额的硬币组合数。假设每一种面额的硬币有无限个。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> amount, <span class="keyword">int</span>[] coins)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = coins.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[coins.length+<span class="number">1</span>][amount+<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// base case</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) </span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= amount; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j - coins[i-<span class="number">1</span>] &gt;= <span class="number">0</span>)</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - coins[i-<span class="number">1</span>]];</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][amount];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="股票问题"><a href="#股票问题" class="headerlink" title="股票问题"></a>股票问题</h1><p><strong>状态转移方程</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dp[i][k][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">0</span>], dp[i-<span class="number">1</span>][k][<span class="number">1</span>] + prices[i])</span><br><span class="line">              max(   选择 rest  ,             选择 sell      )</span><br><span class="line"></span><br><span class="line">解释：今天我没有持有股票，有两种可能：</span><br><span class="line">要么是我昨天就没有持有，然后今天选择 rest，所以我今天还是没有持有；</span><br><span class="line">要么是我昨天持有股票，但是今天我 sell 了，所以我今天没有持有股票了。</span><br><span class="line"></span><br><span class="line">dp[i][k][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">1</span>], dp[i-<span class="number">1</span>][k-<span class="number">1</span>][<span class="number">0</span>] - prices[i])</span><br><span class="line">              max(   选择 rest  ,           选择 buy         )</span><br><span class="line"></span><br><span class="line">解释：今天我持有着股票，有两种可能：</span><br><span class="line">要么我昨天就持有着股票，然后今天选择 rest，所以我今天还持有着股票；</span><br><span class="line">要么我昨天本没有持有，但今天我选择 buy，所以今天我就持有股票了。</span><br></pre></td></tr></table></figure>
<h2 id="leetcode-121-买卖股票的最佳时机"><a href="#leetcode-121-买卖股票的最佳时机" class="headerlink" title="leetcode 121. 买卖股票的最佳时机"></a>leetcode 121. 买卖股票的最佳时机</h2><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。<br>如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。<br>注意：你不能在买入股票前卖出股票。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>; </span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i-<span class="number">1</span>]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">1</span>], -prices[i-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="leetcode-122-买卖股票的最佳时机-II"><a href="#leetcode-122-买卖股票的最佳时机-II" class="headerlink" title="leetcode 122. 买卖股票的最佳时机 II"></a>leetcode 122. 买卖股票的最佳时机 II</h2><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。<br>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。<br>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>; </span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i-<span class="number">1</span>]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">1</span>], dp[i-<span class="number">1</span>][<span class="number">0</span>] - prices[i-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="leetcode-123-买卖股票的最佳时机-III"><a href="#leetcode-123-买卖股票的最佳时机-III" class="headerlink" title="leetcode 123. 买卖股票的最佳时机 III"></a>leetcode 123. 买卖股票的最佳时机 III</h2><p>给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。<br>设计一个算法来计算你所能获取的最大利润。你最多可以完成 <strong>两笔</strong> 交易。<br>注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line">        <span class="keyword">int</span> max_k = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span>[][][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][max_k + <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">        </span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>; </span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>][<span class="number">1</span>] = Integer.MIN_VALUE;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">2</span>][<span class="number">0</span>] = <span class="number">0</span>; </span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">2</span>][<span class="number">1</span>] = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = max_k; k &gt;= <span class="number">1</span>; k--) &#123;</span><br><span class="line">                dp[i][k][<span class="number">0</span>] = Math.max(dp[i-<span class="number">1</span>][k][<span class="number">0</span>], dp[i-<span class="number">1</span>][k][<span class="number">1</span>] + prices[i-<span class="number">1</span>]);</span><br><span class="line">                dp[i][k][<span class="number">1</span>] = Math.max(dp[i-<span class="number">1</span>][k][<span class="number">1</span>], dp[i-<span class="number">1</span>][k-<span class="number">1</span>][<span class="number">0</span>] - prices[i-<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 穷举了 n × max_k × 2 个状态，正确。</span></span><br><span class="line">        <span class="keyword">return</span> dp[n][max_k][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="leetcode-188-买卖股票的最佳时机-IV"><a href="#leetcode-188-买卖股票的最佳时机-IV" class="headerlink" title="leetcode 188. 买卖股票的最佳时机 IV"></a>leetcode 188. 买卖股票的最佳时机 IV</h2><p>给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。<br>设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。<br>注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> max_k, <span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line">        <span class="keyword">if</span> (max_k &gt; n / <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> maxProfit_k_inf(prices);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[][][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][max_k + <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">        <span class="comment">//base case</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>;k &lt;= max_k; k++)&#123;</span><br><span class="line">            dp[<span class="number">0</span>][k][<span class="number">0</span>] = <span class="number">0</span>; </span><br><span class="line">            dp[<span class="number">0</span>][k][<span class="number">1</span>] = Integer.MIN_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = max_k; k &gt;= <span class="number">1</span>; k--) &#123;</span><br><span class="line">                dp[i][k][<span class="number">0</span>] = Math.max(dp[i-<span class="number">1</span>][k][<span class="number">0</span>], dp[i-<span class="number">1</span>][k][<span class="number">1</span>] + prices[i-<span class="number">1</span>]);</span><br><span class="line">                dp[i][k][<span class="number">1</span>] = Math.max(dp[i-<span class="number">1</span>][k][<span class="number">1</span>], dp[i-<span class="number">1</span>][k-<span class="number">1</span>][<span class="number">0</span>] - prices[i-<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 穷举了 n × max_k × 2 个状态，正确。</span></span><br><span class="line">        <span class="keyword">return</span> dp[n][max_k][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit_k_inf</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>; </span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i-<span class="number">1</span>]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">1</span>], dp[i-<span class="number">1</span>][<span class="number">0</span>] - prices[i-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="leetcode-309-最佳买卖股票时机含冷冻期"><a href="#leetcode-309-最佳买卖股票时机含冷冻期" class="headerlink" title="leetcode 309. 最佳买卖股票时机含冷冻期"></a>leetcode 309. 最佳买卖股票时机含冷冻期</h2><p>给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。​</p>
<p>设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:</p>
<ul>
<li>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</li>
<li>卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>; </span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i-<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">                dp[i][<span class="number">1</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">1</span>], - prices[i-<span class="number">1</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][<span class="number">1</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">1</span>], dp[i-<span class="number">2</span>][<span class="number">0</span>] - prices[i-<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="leetcode-714-买卖股票的最佳时机含手续费"><a href="#leetcode-714-买卖股票的最佳时机含手续费" class="headerlink" title="leetcode 714. 买卖股票的最佳时机含手续费"></a>leetcode 714. 买卖股票的最佳时机含手续费</h2><p>给定一个整数数组 prices，其中第 i 个元素代表了第 i 天的股票价格 ；非负整数 fee 代表了交易股票的手续费用。</p>
<p>你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。</p>
<p>返回获得利润的最大值。</p>
<p>注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices, <span class="keyword">int</span> fee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>; </span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i-<span class="number">1</span>]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">1</span>], dp[i-<span class="number">1</span>][<span class="number">0</span>] - prices[i-<span class="number">1</span>] - fee);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>链表</title>
    <url>/algorithms/list/</url>
    <content><![CDATA[<h1 id="链表种类"><a href="#链表种类" class="headerlink" title="链表种类"></a>链表种类</h1><p>单链表、循环链表、双链表、双向循环链表</p>
<a id="more"></a>
<h1 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h1><p>在实际的软件开发中，从链表中删除一个数据无外乎这两种情况：<br><strong>删除结点中“值等于某个给定值”的结点；<br>删除给定指针指向的结点。</strong><br>对于第一种情况，不管是单链表还是双向链表，为了查找到值等于给定值的结点，都需要从头结点开始一个一个依次遍历对比，直到找到值等于给定值的结点，然后再通过我前面讲的指针操作将其删除。<br>尽管单纯的删除操作时间复杂度是 O(1)，但遍历查找的时间是主要的耗时点，对应的时间复杂度为 O(n)。根据时间复杂度分析中的加法法则，删除值等于给定值的结点对应的链表操作的总时间复杂度为 O(n)。<br>对于第二种情况，我们已经找到了要删除的结点，但是删除某个结点 q 需要知道其前驱结点，而单链表并不支持直接获取前驱结点，所以，为了找到前驱结点，我们还是要从头结点开始遍历链表，直到 p-&gt;next=q，说明 p 是 q 的前驱结点。<br>但是对于双向链表来说，这种情况就比较有优势了。因为双向链表中的结点已经保存了前驱结点的指针，不需要像单链表那样遍历。所以，针对第二种情况，单链表删除操作需要 O(n) 的时间复杂度，而双向链表只需要在 O(1) 的时间复杂度内就搞定了！</p>
<h1 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h1><p>同理，如果我们希望在链表的某个指定结点前面插入一个结点，双向链表比单链表有很大的优势。双向链表可以在 O(1) 时间复杂度搞定，而单向链表需要 O(n) 的时间复杂度。</p>
<h1 id="如何基于链表实现-LRU-缓存淘汰算法？"><a href="#如何基于链表实现-LRU-缓存淘汰算法？" class="headerlink" title="如何基于链表实现 LRU 缓存淘汰算法？"></a>如何基于链表实现 LRU 缓存淘汰算法？</h1><ol>
<li>如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的结点，并将其从原来的位置删除，然后再插入到链表的头部。</li>
<li>如果此数据没有在缓存链表中，又可以分为两种情况：<ol>
<li>如果此时缓存未满，则将此结点直接插入到链表的头部；</li>
<li>如果此时缓存已满，则链表尾结点删除，将新的数据结点插入链表的头部。<br>现在我们来看下 m 缓存访问的时间复杂度是多少。因为不管缓存有没有满，我们都需要遍历一遍链表，所以这种基于链表的实现思路，缓存访问的时间复杂度为 O(n)。<br>实际上，我们可以继续优化这个实现思路，比如引入散列表（Hash table）来记录每个数据的位置，将缓存访问的时间复杂度降到 O(1)。</li>
</ol>
</li>
</ol>
<h1 id="链表-VS-数组性能大比拼"><a href="#链表-VS-数组性能大比拼" class="headerlink" title="链表 VS 数组性能大比拼"></a>链表 VS 数组性能大比拼</h1><table>
<thead>
<tr>
<th>时间复杂度</th>
<th>数组</th>
<th>链表</th>
</tr>
</thead>
<tbody><tr>
<td>插入删除</td>
<td>o(n)</td>
<td>o(1)</td>
</tr>
<tr>
<td>随机访问</td>
<td>o(1)</td>
<td>o(n)</td>
</tr>
</tbody></table>
<h1 id="几个写链表代码技巧"><a href="#几个写链表代码技巧" class="headerlink" title="几个写链表代码技巧"></a>几个写链表代码技巧</h1><h2 id="技巧一：理解指针或引用的含义"><a href="#技巧一：理解指针或引用的含义" class="headerlink" title="技巧一：理解指针或引用的含义"></a>技巧一：理解指针或引用的含义</h2><p>将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针，或者反过来说，指针中存储了这个变量的内存地址，指向了这个变量，通过指针就能找到这个变量。<br>在编写链表代码的时候，我们经常会有这样的代码：p-&gt;next=q。这行代码是说，p 结点中的 next 指针存储了 q 结点的内存地址。<br>还有一个更复杂的，也是我们写链表代码经常会用到的：p-&gt;next=p-&gt;next-&gt;next。这行代码表示，p 结点的 next 指针存储了 p 结点的下下一个结点的内存地址。</p>
<h2 id="技巧二：警惕指针丢失和内存泄漏"><a href="#技巧二：警惕指针丢失和内存泄漏" class="headerlink" title="技巧二：警惕指针丢失和内存泄漏"></a>技巧二：警惕指针丢失和内存泄漏</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">p-&gt;next = x;  <span class="comment">// 将 p 的 next 指针指向 x 结点；</span></span><br><span class="line">x-&gt;next = p-&gt;next;  <span class="comment">// 将 x 的结点的 next 指针指向 b 结点；</span></span><br></pre></td></tr></table></figure>
<p>p-&gt;next 指针在完成第一步操作之后，已经不再指向结点 b 了，而是指向结点 x。第 2 行代码相当于将 x 赋值给 x-&gt;next，自己指向自己。因此，整个链表也就断成了两半，从结点 b 往后的所有结点都无法访问到了。<br>我们插入结点时，一定要注意操作的顺序，要先将结点 x 的 next 指针指向结点 b，再把结点 a 的 next 指针指向结点 x，这样才不会丢失指针，导致内存泄漏。所以，对于刚刚的插入代码，我们只需要把第 1 行和第 2 行代码的顺序颠倒一下就可以了。</p>
<h2 id="技巧三：利用哨兵简化实现难度"><a href="#技巧三：利用哨兵简化实现难度" class="headerlink" title="技巧三：利用哨兵简化实现难度"></a>技巧三：利用哨兵简化实现难度</h2><p>首先，我们先来回顾一下单链表的插入和删除操作。如果我们在结点 p 后面插入一个新的结点，只需要下面两行代码就可以搞定。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">new_node-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = new_node;</span><br></pre></td></tr></table></figure>
<p>但是，当我们要向一个空链表中插入第一个结点，刚刚的逻辑就不能用了。我们需要进行下面这样的特殊处理，其中 head 表示链表的头结点。所以，从这段代码，我们可以发现，对于单链表的插入操作，第一个结点和其他结点的插入逻辑是不一样的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">  head = new_node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们再来看单链表结点删除操作。如果要删除结点 p 的后继结点，我们只需要一行代码就可以搞定。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">p-&gt;next = p-&gt;next-&gt;next;</span><br></pre></td></tr></table></figure>
<p>但是，如果我们要删除链表中的最后一个结点，前面的删除代码就不 work 了。跟插入类似，我们也需要对于这种情况特殊处理。写成代码是这样子的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (head-&gt;next == <span class="keyword">null</span>) &#123;</span><br><span class="line">   head = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从前面的一步一步分析，我们可以看出，针对链表的插入、删除操作，需要对插入第一个结点和删除最后一个结点的情况进行特殊处理。这样代码实现起来就会很繁琐，不简洁，而且也容易因为考虑不全而出错。如何来解决这个问题呢？<br>技巧三中提到的哨兵就要登场了。哨兵，解决的是国家之间的边界问题。同理，这里说的哨兵也是解决“边界问题”的，不直接参与业务逻辑。<br>还记得如何表示一个空链表吗？head=null 表示链表中没有结点了。其中 head 表示头结点指针，指向链表中的第一个结点。<br>如果我们引入哨兵结点，在任何时候，不管链表是不是空，head 指针都会一直指向这个哨兵结点。我们也把这种有哨兵结点的链表叫带头链表。相反，没有哨兵结点的链表就叫作不带头链表。<br>我画了一个带头链表，你可以发现，哨兵结点是不存储数据的。因为哨兵结点一直存在，所以插入第一个结点和插入其他结点，删除最后一个结点和删除其他结点，都可以统一为相同的代码实现逻辑了。<br>实际上，这种利用哨兵简化编程难度的技巧，在很多代码实现中都有用到，比如插入排序、归并排序、动态规划等。这些内容我们后面才会讲，现在为了让你感受更深，我再举一个非常简单的例子。代码我是用 C 语言实现的，不涉及语言方面的高级语法，很容易看懂，你可以类比到你熟悉的语言。<br>代码一：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在数组 a 中，查找 key，返回 key 所在的位置</span></span><br><span class="line"><span class="comment">// 其中，n 表示数组 a 的长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">char</span>* a, <span class="keyword">int</span> n, <span class="keyword">char</span> key)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 边界条件处理，如果 a 为空，或者 n&lt;=0，说明数组中没有数据，就不用 while 循环比较了</span></span><br><span class="line">  <span class="keyword">if</span>(a == <span class="keyword">null</span> || n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 这里有两个比较操作：i&lt;n 和 a[i]==key.</span></span><br><span class="line">  <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a[i] == key) &#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    ++i;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码二：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在数组 a 中，查找 key，返回 key 所在的位置</span></span><br><span class="line"><span class="comment">// 其中，n 表示数组 a 的长度</span></span><br><span class="line"><span class="comment">// 我举 2 个例子，你可以拿例子走一下代码</span></span><br><span class="line"><span class="comment">// a = &#123;4, 2, 3, 5, 9, 6&#125;  n=6 key = 7</span></span><br><span class="line"><span class="comment">// a = &#123;4, 2, 3, 5, 9, 6&#125;  n=6 key = 6</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">char</span>* a, <span class="keyword">int</span> n, <span class="keyword">char</span> key)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(a == <span class="keyword">null</span> || n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 这里因为要将 a[n-1] 的值替换成 key，所以要特殊处理这个值</span></span><br><span class="line">  <span class="keyword">if</span> (a[n-<span class="number">1</span>] == key) &#123;</span><br><span class="line">    <span class="keyword">return</span> n-<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 把 a[n-1] 的值临时保存在变量 tmp 中，以便之后恢复。tmp=6。</span></span><br><span class="line">  <span class="comment">// 之所以这样做的目的是：希望 find() 代码不要改变 a 数组中的内容</span></span><br><span class="line">  <span class="keyword">char</span> tmp = a[n-<span class="number">1</span>];</span><br><span class="line">  <span class="comment">// 把 key 的值放到 a[n-1] 中，此时 a = &#123;4, 2, 3, 5, 9, 7&#125;</span></span><br><span class="line">  a[n-<span class="number">1</span>] = key;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// while 循环比起代码一，少了 i&lt;n 这个比较操作</span></span><br><span class="line">  <span class="keyword">while</span> (a[i] != key) &#123;</span><br><span class="line">    ++i;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 恢复 a[n-1] 原来的值, 此时 a= &#123;4, 2, 3, 5, 9, 6&#125;</span></span><br><span class="line">  a[n-<span class="number">1</span>] = tmp;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (i == n-<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果 i == n-1 说明，在 0...n-2 之间都没有 key，所以返回 -1</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 否则，返回 i，就是等于 key 值的元素的下标</span></span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对比两段代码，在字符串 a 很长的时候，比如几万、几十万，你觉得哪段代码运行得更快点呢？答案是代码二，因为两段代码中执行次数最多就是 while 循环那一部分。第二段代码中，我们通过一个哨兵 a[n-1] = key，成功省掉了一个比较语句 i &lt; n，不要小看这一条语句，当累积执行万次、几十万次时，累积的时间就很明显了。<br>当然，这只是为了举例说明哨兵的作用，你写代码的时候千万不要写第二段那样的代码，因为可读性太差了。大部分情况下，我们并不需要如此追求极致的性能。</p>
<h2 id="技巧四：重点留意边界条件处理"><a href="#技巧四：重点留意边界条件处理" class="headerlink" title="技巧四：重点留意边界条件处理"></a>技巧四：重点留意边界条件处理</h2><ol>
<li>如果链表为空时，代码是否能正常工作？</li>
<li>如果链表只包含一个结点时，代码是否能正常工作？</li>
<li>如果链表只包含两个结点时，代码是否能正常工作？</li>
<li>代码逻辑在处理头结点和尾结点的时候，是否能正常工作？</li>
</ol>
<h2 id="技巧五：举例画图，辅助思考"><a href="#技巧五：举例画图，辅助思考" class="headerlink" title="技巧五：举例画图，辅助思考"></a>技巧五：举例画图，辅助思考</h2><h2 id="技巧六：多写多练，没有捷径"><a href="#技巧六：多写多练，没有捷径" class="headerlink" title="技巧六：多写多练，没有捷径"></a>技巧六：多写多练，没有捷径</h2><h1 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h1><h2 id="如何判断一个字符串是否是回文字符串的问题"><a href="#如何判断一个字符串是否是回文字符串的问题" class="headerlink" title="如何判断一个字符串是否是回文字符串的问题"></a>如何判断一个字符串是否是回文字符串的问题</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PalindromeLinkedList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    ListNode fast = head;</span><br><span class="line">    ListNode slow = head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">      stack.push(slow.val);</span><br><span class="line">      fast = fast.next.next;</span><br><span class="line">      slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fast != <span class="keyword">null</span>) &#123;</span><br><span class="line">      slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (slow != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (stack.pop() != slow.val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ListNode node1 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">    ListNode node2 = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">    ListNode node3 = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">    ListNode node4 = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">    ListNode node5 = <span class="keyword">new</span> ListNode(<span class="number">5</span>);</span><br><span class="line">    ListNode node6 = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">    ListNode node7 = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">    ListNode node8 = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">    ListNode node9 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">    node1.next = node2;</span><br><span class="line">    node2.next = node3;</span><br><span class="line">    node3.next = node4;</span><br><span class="line">    node4.next = node5;</span><br><span class="line">    node5.next = node6;</span><br><span class="line">    node6.next = node7;</span><br><span class="line">    node7.next = node8;</span><br><span class="line">    node8.next = node9;</span><br><span class="line">    System.out.println(isPalindrome(node1));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="单链表反转"><a href="#单链表反转" class="headerlink" title="单链表反转"></a>单链表反转</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReverseLinkedList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ListNode newHead = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">      ListNode next = head.next;</span><br><span class="line">      head.next = newHead;</span><br><span class="line">      newHead = head;</span><br><span class="line">      head = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ListNode first = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">    ListNode second = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">    ListNode third = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">    first.next = second;</span><br><span class="line">    second.next = third;</span><br><span class="line"></span><br><span class="line">    ListNode node = reverseList(first);</span><br><span class="line">    <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">      System.out.println(node.val);</span><br><span class="line">      node = node.next;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="链表中环的检测"><a href="#链表中环的检测" class="headerlink" title="链表中环的检测"></a>链表中环的检测</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListCycle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ListNode slow = head;</span><br><span class="line">    ListNode fast = head.next;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span> &amp;&amp; fast != slow) &#123;</span><br><span class="line">      slow = slow.next;</span><br><span class="line">      fast = fast.next.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fast == slow;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ListNode node1 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">    ListNode node2 = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">    ListNode node3 = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">    ListNode node4 = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">    ListNode node5 = <span class="keyword">new</span> ListNode(<span class="number">5</span>);</span><br><span class="line">    node1.next = node2;</span><br><span class="line">    node2.next = node3;</span><br><span class="line">    node3.next = node4;</span><br><span class="line">    node4.next = node5;</span><br><span class="line">    node5.next = node2;</span><br><span class="line"></span><br><span class="line">    System.out.println(hasCycle(node1));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="两个有序的链表合并"><a href="#两个有序的链表合并" class="headerlink" title="两个有序的链表合并"></a>两个有序的链表合并</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeKSortedLists</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">mergeKLists</span><span class="params">(ListNode[] lists)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lists == <span class="keyword">null</span> || lists.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PriorityQueue&lt;ListNode&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;&gt;(lists.length,</span><br><span class="line">        (o1, o2) -&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (o1.val &lt; o2.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o1.val == o2.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    ListNode tail = dummy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (ListNode node : lists) &#123;</span><br><span class="line">      <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">        queue.add(node);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">      tail.next = queue.poll();</span><br><span class="line">      tail = tail.next;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (tail.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        queue.add(tail.next);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ListNode node1 = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">    ListNode node11 = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">    ListNode node12 = <span class="keyword">new</span> ListNode(<span class="number">6</span>);</span><br><span class="line">    node1.next = node11;</span><br><span class="line">    node11.next = node12;</span><br><span class="line"></span><br><span class="line">    ListNode node2 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">    ListNode node21 = <span class="keyword">new</span> ListNode(<span class="number">7</span>);</span><br><span class="line">    ListNode node22 = <span class="keyword">new</span> ListNode(<span class="number">9</span>);</span><br><span class="line">    node2.next = node21;</span><br><span class="line">    node21.next = node22;</span><br><span class="line"></span><br><span class="line">    ListNode node3 = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">    ListNode node31 = <span class="keyword">new</span> ListNode(<span class="number">5</span>);</span><br><span class="line">    ListNode node32 = <span class="keyword">new</span> ListNode(<span class="number">8</span>);</span><br><span class="line">    node3.next = node31;</span><br><span class="line">    node31.next = node32;</span><br><span class="line">    ListNode[] listNodes = <span class="keyword">new</span> ListNode[]&#123;node1, node2, node3&#125;;</span><br><span class="line">    ListNode node = mergeKLists(listNodes);</span><br><span class="line">    <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">      System.out.println(node.val);</span><br><span class="line">      node = node.next;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="删除链表倒数第-n-个结点"><a href="#删除链表倒数第-n-个结点" class="headerlink" title="删除链表倒数第 n 个结点"></a>删除链表倒数第 n 个结点</h2><h2 id="求链表的中间结点"><a href="#求链表的中间结点" class="headerlink" title="求链表的中间结点"></a>求链表的中间结点</h2>]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>时间复杂度</title>
    <url>/algorithms/time-complexity/</url>
    <content><![CDATA[<h1 id="大-O-复杂度表示法"><a href="#大-O-复杂度表示法" class="headerlink" title="大 O 复杂度表示法"></a>大 O 复杂度表示法</h1><p>大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，所以，也叫作渐进时间复杂度（asymptotic time complexity），简称时间复杂度。</p>
<a id="more"></a>
<h1 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h1><h2 id="只关注循环执行次数最多的一段代码"><a href="#只关注循环执行次数最多的一段代码" class="headerlink" title="只关注循环执行次数最多的一段代码"></a>只关注循环执行次数最多的一段代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt;= n; ++i) &#123;</span><br><span class="line">    sum = sum + i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>O(n)。</p>
<h2 id="加法法则：总复杂度等于量级最大的那段代码的复杂度"><a href="#加法法则：总复杂度等于量级最大的那段代码的复杂度" class="headerlink" title="加法法则：总复杂度等于量级最大的那段代码的复杂度"></a>加法法则：总复杂度等于量级最大的那段代码的复杂度</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> sum_1 = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">int</span> p = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span> (; p &lt; <span class="number">100</span>; ++p) &#123;</span><br><span class="line">     sum_1 = sum_1 + p;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">int</span> sum_2 = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">int</span> q = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span> (; q &lt; n; ++q) &#123;</span><br><span class="line">     sum_2 = sum_2 + q;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">int</span> sum_3 = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span> (; i &lt;= n; ++i) &#123;</span><br><span class="line">     j = <span class="number">1</span>; </span><br><span class="line">     <span class="keyword">for</span> (; j &lt;= n; ++j) &#123;</span><br><span class="line">       sum_3 = sum_3 +  i * j;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> sum_1 + sum_2 + sum_3;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>O(n2)</p>
<h2 id="乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积"><a href="#乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积" class="headerlink" title="乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积"></a>乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> ret = <span class="number">0</span>; </span><br><span class="line">   <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span> (; i &lt; n; ++i) &#123;</span><br><span class="line">     ret = ret + f(i);</span><br><span class="line">   &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; n; ++i) &#123;</span><br><span class="line">    sum = sum + i;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p> O(n2)。</p>
<h1 id="几种常见时间复杂度实例分析"><a href="#几种常见时间复杂度实例分析" class="headerlink" title="几种常见时间复杂度实例分析"></a>几种常见时间复杂度实例分析</h1><h2 id="O-1"><a href="#O-1" class="headerlink" title="O(1)"></a>O(1)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> sum = i + j;</span><br></pre></td></tr></table></figure>
<h2 id="O-logn-、O-nlogn"><a href="#O-logn-、O-nlogn" class="headerlink" title="O(logn)、O(nlogn)"></a>O(logn)、O(nlogn)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">i=<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">while</span> (i &lt;= n)  &#123;</span><br><span class="line">   i = i * <span class="number">2</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>O(log2n)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">i=<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">while</span> (i &lt;= n)  &#123;</span><br><span class="line">   i = i * <span class="number">3</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>O(log3n)。</p>
<p>实际上，不管是以 2 为底、以 3 为底，还是以 10 为底，我们可以把所有对数阶的时间复杂度都记为 O(logn)。为什么呢？</p>
<p>我们知道，对数之间是可以互相转换的，log3n 就等于 log32 * log2n，所以 O(log3n) = O(C * log2n)，其中 C=log32 是一个常量。基于我们前面的一个理论：在采用大 O 标记复杂度的时候，可以忽略系数，即 O(Cf(n)) = O(f(n))。所以，O(log2n) 就等于 O(log3n)。因此，在对数阶时间复杂度的表示方法里，我们忽略对数的“底”，统一表示为 O(logn)。</p>
<h2 id="O-m-n-、O-m-n"><a href="#O-m-n-、O-m-n" class="headerlink" title="O(m+n)、O(m*n)"></a>O(m+n)、O(m*n)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum_1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; m; ++i) &#123;</span><br><span class="line">    sum_1 = sum_1 + i;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">int</span> sum_2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; j &lt; n; ++j) &#123;</span><br><span class="line">    sum_2 = sum_2 + j;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> sum_1 + sum_2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>O(m+n)。</p>
<h1 id="空间复杂度分析"><a href="#空间复杂度分析" class="headerlink" title="空间复杂度分析"></a>空间复杂度分析</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">  <span class="keyword">for</span> (i; i &lt;n; ++i) &#123;</span><br><span class="line">    a[i] = i * i;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">for</span> (i = n-<span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">    print out a[i]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>O(n)</p>
<p>内容小结<br>复杂度也叫渐进复杂度，包括时间复杂度和空间复杂度，用来分析算法执行效率与数据规模之间的增长关系，可以粗略地表示，越高阶复杂度的算法，执行效率越低。常见的复杂度并不多，从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n2 )。</p>
<h1 id="浅析最好、最坏、平均、均摊时间复杂度"><a href="#浅析最好、最坏、平均、均摊时间复杂度" class="headerlink" title="浅析最好、最坏、平均、均摊时间复杂度"></a>浅析最好、最坏、平均、均摊时间复杂度</h1><h2 id="最好、最坏情况时间复杂度、平均情况时间复杂度"><a href="#最好、最坏情况时间复杂度、平均情况时间复杂度" class="headerlink" title="最好、最坏情况时间复杂度、平均情况时间复杂度"></a>最好、最坏情况时间复杂度、平均情况时间复杂度</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// n 表示数组 array 的长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> n, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> pos = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array[i] == x) pos = i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>O(n)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// n 表示数组 array 的长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> n, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> pos = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array[i] == x) &#123;</span><br><span class="line">       pos = i;</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最好o(1)、最坏o(n)、平均o(n) </p>
<h2 id="均摊时间复杂度"><a href="#均摊时间复杂度" class="headerlink" title="均摊时间复杂度"></a>均摊时间复杂度</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// array 表示一个长度为 n 的数组</span></span><br><span class="line"> <span class="comment">// 代码中的 array.length 就等于 n</span></span><br><span class="line"> <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (count == array.length) &#123;</span><br><span class="line">       <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class="line">          sum = sum + array[i];</span><br><span class="line">       &#125;</span><br><span class="line">       array[<span class="number">0</span>] = sum;</span><br><span class="line">       count = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    array[count] = val;</span><br><span class="line">    ++count;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p> o(1)<br>课后思考</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局变量，大小为 10 的数组 array，长度 len，下标 i。</span></span><br><span class="line"><span class="keyword">int</span> array[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]; </span><br><span class="line"><span class="keyword">int</span> len = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 往数组中添加一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> element)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (i &gt;= len) &#123; <span class="comment">// 数组空间不够了</span></span><br><span class="line">     <span class="comment">// 重新申请一个 2 倍大小的数组空间</span></span><br><span class="line">     <span class="keyword">int</span> new_array[] = <span class="keyword">new</span> <span class="keyword">int</span>[len*<span class="number">2</span>];</span><br><span class="line">     <span class="comment">// 把原来 array 数组中的数据依次 copy 到 new_array</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; ++j) &#123;</span><br><span class="line">       new_array[j] = array[j];</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// new_array 复制给 array，array 现在大小就是 2 倍 len 了</span></span><br><span class="line">     array = new_array;</span><br><span class="line">     len = <span class="number">2</span> * len;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 将 element 放到下标为 i 的位置，下标 i 加一</span></span><br><span class="line">   array[i] = element;</span><br><span class="line">   ++i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>o(1)</p>
<h1 id="油管-Ravindrababu-Ravula-时间复杂度"><a href="#油管-Ravindrababu-Ravula-时间复杂度" class="headerlink" title="油管 Ravindrababu Ravula 时间复杂度"></a>油管 Ravindrababu Ravula 时间复杂度</h1><h2 id="O-n"><a href="#O-n" class="headerlink" title="O(n)"></a>O(n)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timeComplex1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">"time complex"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="O-n-2"><a href="#O-n-2" class="headerlink" title="O(n^2)"></a>O(n^2)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timeComplex2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">      System.out.println(<span class="string">"time complex"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="o-sqrt-n"><a href="#o-sqrt-n" class="headerlink" title="o(sqrt(n))"></a>o(sqrt(n))</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timeComplex3</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; sum &lt;= n; i++) &#123;</span><br><span class="line">    sum = sum + i;</span><br><span class="line">    System.out.println(<span class="string">"time complex"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>i</th>
<th>sum</th>
<th>n</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>1</td>
<td>n</td>
</tr>
<tr>
<td>2</td>
<td>2+1</td>
<td>n</td>
</tr>
<tr>
<td>3</td>
<td>3+2+1</td>
<td>n</td>
</tr>
<tr>
<td>4</td>
<td>4+3+2+1</td>
<td>n</td>
</tr>
<tr>
<td>k</td>
<td>k+(K-1)+(K-2)+…+3+2+1</td>
<td>n</td>
</tr>
<tr>
<td>k</td>
<td>k(k-1)/2</td>
<td>n</td>
</tr>
</tbody></table>
<p>推导k与n的关系<br>k(k-1)/2 = n<br>计算时间复杂度<br>o(sqrt(n))</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timeComplex4</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i * i &lt;= n; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">"time complex"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>i</th>
<th>i * i</th>
<th>n</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>1 *1</td>
<td>n</td>
</tr>
<tr>
<td>2</td>
<td>2*2</td>
<td>n</td>
</tr>
<tr>
<td>3</td>
<td>3*3</td>
<td>n</td>
</tr>
<tr>
<td>k</td>
<td>k*k</td>
<td>n</td>
</tr>
</tbody></table>
<p>推导k与n的关系<br>k*k = n<br>计算时间复杂度<br>o(sqrt(n))</p>
<h2 id="O-n-2-1"><a href="#O-n-2-1" class="headerlink" title="O(n^2)"></a>O(n^2)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timeComplex5</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">100</span>; k++) &#123;</span><br><span class="line">        System.out.println(<span class="string">"time complex"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>i</th>
<th>执行次数</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>1*100</td>
</tr>
<tr>
<td>2</td>
<td>2*100</td>
</tr>
<tr>
<td>3</td>
<td>3*100</td>
</tr>
<tr>
<td>n</td>
<td>n*100</td>
</tr>
</tbody></table>
<p>推导总执行次数<br>1<em>100+2<em>100+3</em>100+4<em>100+…+n</em>100 = 100</em>(n(n-1))/2<br>计算时间复杂度<br>o(n^2)</p>
<h2 id="o-n-4"><a href="#o-n-4" class="headerlink" title="o(n^4)"></a>o(n^4)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timeComplex6</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i * i; j++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n / <span class="number">2</span>; k++) &#123;</span><br><span class="line">        System.out.println(<span class="string">"time complex"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>i</th>
<th>执行次数</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>1*(n/2)</td>
</tr>
<tr>
<td>2</td>
<td>2<em>2</em>(n/2)</td>
</tr>
<tr>
<td>3</td>
<td>3<em>3</em>(n/2)</td>
</tr>
<tr>
<td>n</td>
<td>n<em>n</em>(n/2)</td>
</tr>
</tbody></table>
<p>推导总执行次数<br>1<em>(n/2)+2*2</em>(n/2)+3<em>3</em>(n/2)+…+n<em>n(n/2) = (1+2</em>2+3<em>3+4</em>4+…+n*n)(n/2) = (1/6)n(n+1)(n+2)(n/2)<br>计算时间复杂度<br>o(n^4)</p>
<h2 id="O-log-n"><a href="#O-log-n" class="headerlink" title="O(log(n))"></a>O(log(n))</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timeComplex7</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i = i * <span class="number">2</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">"time complex"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>k</th>
<th>i</th>
<th>n</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>2</td>
<td>n</td>
</tr>
<tr>
<td>2</td>
<td>2*2</td>
<td>n</td>
</tr>
<tr>
<td>3</td>
<td>2<em>2</em>2</td>
<td>n</td>
</tr>
<tr>
<td>k</td>
<td>2^k</td>
<td>n</td>
</tr>
</tbody></table>
<p>推导k与n关系<br>2^k = n<br>计算时间复杂度<br>o(log(n))</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timeComplex10</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    n = n / <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>推导k与n关系n = 2^k<br>计算时间复杂度<br>o(log(n))</p>
<h2 id="O-n-2-log-n"><a href="#O-n-2-log-n" class="headerlink" title="O((n^2)log(n))"></a>O((n^2)log(n))</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timeComplex8</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n / <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n / <span class="number">2</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k = k * <span class="number">2</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">"time complex"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="O-n-log-n-2"><a href="#O-n-log-n-2" class="headerlink" title="O(n(log(n)^2))"></a>O(n(log(n)^2))</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timeComplex9</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n / <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j = <span class="number">2</span> * j) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k = k * <span class="number">2</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">"time complex"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="O-nlog-n"><a href="#O-nlog-n" class="headerlink" title="O(nlog(n))"></a>O(nlog(n))</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timeComplex11</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j = j + i) &#123;</span><br><span class="line">      System.out.println(<span class="string">"time complex"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>i</th>
<th>执行次数</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>n</td>
</tr>
<tr>
<td>2</td>
<td>n/2</td>
</tr>
<tr>
<td>3</td>
<td>n/3</td>
</tr>
<tr>
<td>n</td>
<td>n/n</td>
</tr>
</tbody></table>
<p>推导总执行次数<br>n+n/2+n/3+…+n/n=n(1+1/2+1/3+…+1/n)<br>计算时间复杂度<br>o(nlog(n))</p>
<h2 id="O-nlog-log-n"><a href="#O-nlog-log-n" class="headerlink" title="O(nlog(log(n)))"></a>O(nlog(log(n)))</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timeComplex12</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n = <span class="number">2</span> &lt;&lt; (<span class="number">2</span> &lt;&lt; k);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= n; j = j * j) &#123;</span><br><span class="line">      System.out.println(<span class="string">"time complex"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>k</th>
<th>执行次数</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>n*2</td>
</tr>
<tr>
<td>2</td>
<td>n*4</td>
</tr>
<tr>
<td>3</td>
<td>n*8</td>
</tr>
<tr>
<td>k</td>
<td>n*k</td>
</tr>
</tbody></table>
<p>k = log2(log2(n))<br>计算时间复杂度<br>o(nlog(log(n)))</p>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>滑动窗口</title>
    <url>/algorithms/slide-window/</url>
    <content><![CDATA[<h1 id="leetcode-76-最小覆盖子串"><a href="#leetcode-76-最小覆盖子串" class="headerlink" title="leetcode 76. 最小覆盖子串"></a>leetcode 76. 最小覆盖子串</h1><p>给你一个字符串 S、一个字符串 T，请在字符串 S 里面找出：包含 T 所有字符的最小子串。</p>
<p>示例：</p>
<p>输入: S = “ADOBECODEBANC”, T = “ABC”<br>输出: “BANC”<br>说明：</p>
<a id="more"></a>
<p>如果 S 中不存这样的子串，则返回空字符串 “”。<br>如果 S 中存在这样的子串，我们保证它是唯一的答案。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">minWindow</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left,right,count,minLen= Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> start=<span class="number">0</span>,end=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//needs存储t的&lt;字符,出现次数&gt;,windows存储&lt;s中与t中字符相同的字符,出现次数&gt;</span></span><br><span class="line">        HashMap&lt;Character,Integer&gt; needs = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        HashMap&lt;Character,Integer&gt; windows = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化needs</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t.length();i++)&#123;</span><br><span class="line">            <span class="comment">//needs.getOrDefault(t.charAt(i),0)+1 含义是：needs如果包含t.charAt(i)，</span></span><br><span class="line">            <span class="comment">//则取出值+1;不包含取0+1</span></span><br><span class="line">            needs.put(t.charAt(i),needs.getOrDefault(t.charAt(i),<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        left=right=count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(right &lt;s.length())&#123;</span><br><span class="line">            <span class="comment">//获取字符</span></span><br><span class="line">            <span class="keyword">char</span> temp=s.charAt(right);</span><br><span class="line">            <span class="comment">//如果是t中字符，在windows里添加，累计出现次数</span></span><br><span class="line">            <span class="keyword">if</span>(needs.containsKey(temp))&#123;</span><br><span class="line">                windows.put(temp,windows.getOrDefault(temp,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">                <span class="comment">//注意：Integer不能用==比较，要用compareTo</span></span><br><span class="line">                <span class="keyword">if</span>(windows.get(temp).compareTo(needs.get(temp))==<span class="number">0</span> )&#123;</span><br><span class="line">                    <span class="comment">//字符temp出现次数符合要求，count代表符合要求的字符个数</span></span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//优化到不满足情况，right继续前进找可行解</span></span><br><span class="line">            right++;</span><br><span class="line">            <span class="comment">//符合要求的字符个数正好是t中所有字符，获得一个可行解</span></span><br><span class="line">            <span class="keyword">while</span>(count==needs.size())&#123;</span><br><span class="line">                <span class="comment">//更新结果</span></span><br><span class="line">                <span class="keyword">if</span>(right-left&lt;minLen)&#123;</span><br><span class="line">                    start=left;</span><br><span class="line">                    end=right;</span><br><span class="line">                    minLen=end-left;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//开始进行优化，即缩小区间，删除s[left],</span></span><br><span class="line">                <span class="keyword">char</span> c=s.charAt(left);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//当前删除的字符包含于t,更新Windows中对应出现的次数，如果更新后的次数&lt;t中出现的次数，符合要求的字符数减1，下次判断count==needs.size()时不满足情况，</span></span><br><span class="line">                <span class="keyword">if</span>(needs.containsKey(c))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(windows.get(c).compareTo(needs.get(c)) == <span class="number">0</span>)&#123;</span><br><span class="line">                        count--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    windows.put(c,windows.getOrDefault(c,<span class="number">1</span>)-<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回覆盖的最小串</span></span><br><span class="line">        <span class="keyword">return</span> minLen==Integer.MAX_VALUE ? <span class="string">""</span>:s.substring(start,end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="leetcode-567-字符串的排列"><a href="#leetcode-567-字符串的排列" class="headerlink" title="leetcode 567. 字符串的排列"></a>leetcode 567. 字符串的排列</h1><p>给定两个字符串 s1 和 s2，写一个函数来判断 s2 是否包含 s1 的排列。</p>
<p>换句话说，第一个字符串的排列之一是第二个字符串的子串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkInclusion</span><span class="params">(String t, String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left, right, count, minLen = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//needs存储t的&lt;字符,出现次数&gt;,windows存储&lt;s中与t中字符相同的字符,出现次数&gt;</span></span><br><span class="line">        HashMap&lt;Character, Integer&gt; needs = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        HashMap&lt;Character, Integer&gt; windows = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化needs</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.length(); i++) &#123;</span><br><span class="line">            <span class="comment">//needs.getOrDefault(t.charAt(i),0)+1 含义是：needs如果包含t.charAt(i)，</span></span><br><span class="line">            <span class="comment">//则取出值+1;不包含取0+1</span></span><br><span class="line">            needs.put(t.charAt(i), needs.getOrDefault(t.charAt(i), <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        left = right = count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; s.length()) &#123;</span><br><span class="line">            <span class="comment">//获取字符</span></span><br><span class="line">            <span class="keyword">char</span> temp = s.charAt(right);</span><br><span class="line">            <span class="comment">//如果是t中字符，在windows里添加，累计出现次数</span></span><br><span class="line">            <span class="keyword">if</span> (needs.containsKey(temp)) &#123;</span><br><span class="line">                windows.put(temp, windows.getOrDefault(temp, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">//注意：Integer不能用==比较，要用compareTo</span></span><br><span class="line">                <span class="keyword">if</span> (windows.get(temp).compareTo(needs.get(temp)) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//字符temp出现次数符合要求，count代表符合要求的字符个数</span></span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//优化到不满足情况，right继续前进找可行解</span></span><br><span class="line">            right++;</span><br><span class="line">            <span class="comment">//符合要求的字符个数正好是t中所有字符，获得一个可行解</span></span><br><span class="line">            <span class="keyword">while</span> (right - left &gt;= t.length()) &#123;</span><br><span class="line">                <span class="comment">//更新结果</span></span><br><span class="line">                <span class="keyword">if</span> (count == needs.size()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//开始进行优化，即缩小区间，删除s[left],</span></span><br><span class="line">                <span class="keyword">char</span> c = s.charAt(left);</span><br><span class="line">                left++;</span><br><span class="line">                <span class="comment">//当前删除的字符包含于t,更新Windows中对应出现的次数，如果更新后的次数&lt;t中出现的次数，符合要求的字符数减1，下次判断count==needs.size()时不满足情况，</span></span><br><span class="line">                <span class="keyword">if</span> (needs.containsKey(c)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (windows.get(c).compareTo(needs.get(c)) == <span class="number">0</span>) &#123;</span><br><span class="line">                        count--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    windows.put(c, windows.getOrDefault(c, <span class="number">1</span>) - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回覆盖的最小串</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="leetcode-438-找到字符串中所有字母异位词"><a href="#leetcode-438-找到字符串中所有字母异位词" class="headerlink" title="leetcode 438. 找到字符串中所有字母异位词"></a>leetcode 438. 找到字符串中所有字母异位词</h1><p>给定一个字符串 s 和一个非空字符串 p，找到 s 中所有是 p 的字母异位词的子串，返回这些子串的起始索引。</p>
<p>字符串只包含小写英文字母，并且字符串 s 和 p 的长度都不超过 20100。</p>
<p>说明：</p>
<p>字母异位词指字母相同，但排列不同的字符串。<br>不考虑答案输出的顺序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findAnagrams</span><span class="params">(String s,String t)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left, right, count, minLen = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//needs存储t的&lt;字符,出现次数&gt;,windows存储&lt;s中与t中字符相同的字符,出现次数&gt;</span></span><br><span class="line">        HashMap&lt;Character, Integer&gt; needs = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        HashMap&lt;Character, Integer&gt; windows = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化needs</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.length(); i++) &#123;</span><br><span class="line">            <span class="comment">//needs.getOrDefault(t.charAt(i),0)+1 含义是：needs如果包含t.charAt(i)，</span></span><br><span class="line">            <span class="comment">//则取出值+1;不包含取0+1</span></span><br><span class="line">            needs.put(t.charAt(i), needs.getOrDefault(t.charAt(i), <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        left = right = count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; s.length()) &#123;</span><br><span class="line">            <span class="comment">//获取字符</span></span><br><span class="line">            <span class="keyword">char</span> temp = s.charAt(right);</span><br><span class="line">            <span class="comment">//如果是t中字符，在windows里添加，累计出现次数</span></span><br><span class="line">            <span class="keyword">if</span> (needs.containsKey(temp)) &#123;</span><br><span class="line">                windows.put(temp, windows.getOrDefault(temp, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">//注意：Integer不能用==比较，要用compareTo</span></span><br><span class="line">                <span class="keyword">if</span> (windows.get(temp).compareTo(needs.get(temp)) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//字符temp出现次数符合要求，count代表符合要求的字符个数</span></span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//优化到不满足情况，right继续前进找可行解</span></span><br><span class="line">            right++;</span><br><span class="line">            <span class="comment">//符合要求的字符个数正好是t中所有字符，获得一个可行解</span></span><br><span class="line">            <span class="keyword">while</span> (right - left &gt;= t.length()) &#123;</span><br><span class="line">                <span class="comment">//更新结果</span></span><br><span class="line">                <span class="keyword">if</span> (count == needs.size()) &#123;</span><br><span class="line">                    res.add(left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//开始进行优化，即缩小区间，删除s[left],</span></span><br><span class="line">                <span class="keyword">char</span> c = s.charAt(left);</span><br><span class="line">                left++;</span><br><span class="line">                <span class="comment">//当前删除的字符包含于t,更新Windows中对应出现的次数，如果更新后的次数&lt;t中出现的次数，符合要求的字符数减1，下次判断count==needs.size()时不满足情况，</span></span><br><span class="line">                <span class="keyword">if</span> (needs.containsKey(c)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (windows.get(c).compareTo(needs.get(c)) == <span class="number">0</span>) &#123;</span><br><span class="line">                        count--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    windows.put(c, windows.getOrDefault(c, <span class="number">1</span>) - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回覆盖的最小串</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="leetcode-3-无重复字符的最长子串"><a href="#leetcode-3-无重复字符的最长子串" class="headerlink" title="leetcode 3. 无重复字符的最长子串"></a>leetcode 3. 无重复字符的最长子串</h1><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>; <span class="comment">// 记录结果</span></span><br><span class="line">        Map&lt;Character,Integer&gt; windows = <span class="keyword">new</span> HashMap();</span><br><span class="line">        <span class="keyword">while</span> (right &lt; s.length()) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(right);</span><br><span class="line">            right++;</span><br><span class="line">            <span class="comment">// 进行窗口内数据的一系列更新</span></span><br><span class="line">            windows.put(c, windows.getOrDefault(c, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 判断左侧窗口是否要收缩</span></span><br><span class="line">            <span class="keyword">while</span> (windows.get(c) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">char</span> d = s.charAt(left);</span><br><span class="line">                left++;</span><br><span class="line">                <span class="comment">// 进行窗口内数据的一系列更新</span></span><br><span class="line">                windows.put(d, windows.getOrDefault(d, <span class="number">1</span>) - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 在这里更新答案</span></span><br><span class="line">            res = Math.max(res, right - left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法</title>
    <url>/algorithms/sort/</url>
    <content><![CDATA[<h1 id="排序算法对比"><a href="#排序算法对比" class="headerlink" title="排序算法对比"></a>排序算法对比</h1><table>
<thead>
<tr>
<th>算法</th>
<th>时间复杂度</th>
<th>是稳定排序？</th>
<th>是原地排序？</th>
</tr>
</thead>
<tbody><tr>
<td>冒泡排序</td>
<td>o(n^2)</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>插入排序</td>
<td>o(n^2)</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>选择排序</td>
<td>o(n^2)</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td>快速排序</td>
<td>o(nlog(n))</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td>归并排序</td>
<td>o(nlog(n))</td>
<td>✅</td>
<td>❌</td>
</tr>
<tr>
<td>桶排序</td>
<td>o(n+k) k是数据范围</td>
<td>✅</td>
<td>❌</td>
</tr>
<tr>
<td>计数排序</td>
<td>o(n)</td>
<td>✅</td>
<td>❌</td>
</tr>
<tr>
<td>基数排序</td>
<td>o(dn)  d是维度</td>
<td>✅</td>
<td>❌</td>
</tr>
<tr>
<td>堆排序</td>
<td>O(nlogn)</td>
<td>❌</td>
<td>✅</td>
</tr>
</tbody></table>
<a id="more"></a>
<h1 id="jdk排序算法"><a href="#jdk排序算法" class="headerlink" title="jdk排序算法"></a>jdk排序算法</h1><p><img src="http://assets.processon.com/chart_image/5ebaaf6b0791290fe05bd9cf.png" alt="jdk排序算法"></p>
<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InsertionSort</span> <span class="keyword">implements</span> <span class="title">SortAlgorithm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method implements the Generic Insertion Sort</span></span><br><span class="line"><span class="comment">     * Sorts the array in increasing order</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array The array to be sorted</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//算法导论</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; array.length; j++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Picking up the key(Card)</span></span><br><span class="line">            <span class="keyword">int</span> key = array[j];</span><br><span class="line">            <span class="keyword">int</span> i = j - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; key &lt; array[i]) &#123;</span><br><span class="line">                array[i + <span class="number">1</span>] = array[i];</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Placing the key (Card) at its correct position in the sorted subarray</span></span><br><span class="line">            array[i + <span class="number">1</span>] = key;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Driver Program</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Integer Input</span></span><br><span class="line">        Integer[] integers = &#123;<span class="number">4</span>, <span class="number">23</span>, <span class="number">6</span>, <span class="number">78</span>, <span class="number">1</span>, <span class="number">54</span>, <span class="number">231</span>, <span class="number">9</span>, <span class="number">12</span>&#125;;</span><br><span class="line"></span><br><span class="line">        InsertionSort sort = <span class="keyword">new</span> InsertionSort();</span><br><span class="line"></span><br><span class="line">        sort.sort(integers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Output =&gt; 1 4 6 9 12 23 54 78 231</span></span><br><span class="line">        Arrays.stream(a).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">    doSort(array, <span class="number">0</span>, array.length - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSort</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> pivot = partition(array, left, right);</span><br><span class="line">    doSort(array, left, pivot - <span class="number">1</span>);</span><br><span class="line">    doSort(array, pivot, right);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//算法导论</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> key = array[right];</span><br><span class="line">    <span class="keyword">int</span> i = left - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = left; j &lt;= right - <span class="number">1</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (array[j] &lt;= key) &#123;</span><br><span class="line">        i++;</span><br><span class="line">        swap(array, i, j);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(array, i + <span class="number">1</span>, right);</span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> idx, <span class="keyword">int</span> idy)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> swap = array[idx];</span><br><span class="line">    array[idx] = array[idy];</span><br><span class="line">    array[idy] = swap;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] array = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">32</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">44</span>, <span class="number">111</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">    QuickSort quickSort = <span class="keyword">new</span> QuickSort();</span><br><span class="line">    quickSort.sort(array);</span><br><span class="line"></span><br><span class="line">    Arrays.stream(array).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//递归终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//分治递归</span></span><br><span class="line">    doSort(arr, left, mid);</span><br><span class="line">    doSort(arr, mid + <span class="number">1</span>, right);</span><br><span class="line">    <span class="comment">//合并</span></span><br><span class="line">    merge(arr, left, mid, right);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//算法导论</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1 = mid - left + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> n2 = right - mid;</span><br><span class="line">    <span class="keyword">int</span>[] leftArr = <span class="keyword">new</span> <span class="keyword">int</span>[n1 + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span>[] rightArr = <span class="keyword">new</span> <span class="keyword">int</span>[n2 + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n1; i++) &#123;</span><br><span class="line">      leftArr[i] = arr[left + i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n2; j++) &#123;</span><br><span class="line">      rightArr[j] = arr[mid + j + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    leftArr[n1] = Integer.MAX_VALUE;</span><br><span class="line">    rightArr[n2] = Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = left; k &lt;= right; k++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (leftArr[i] &lt;= rightArr[j]) &#123;</span><br><span class="line">        arr[k] = leftArr[i];</span><br><span class="line">        i++;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        arr[k] = rightArr[j];</span><br><span class="line">        j++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">4</span>, <span class="number">23</span>, <span class="number">6</span>, <span class="number">78</span>, <span class="number">1</span>, <span class="number">54</span>, <span class="number">231</span>, <span class="number">9</span>, <span class="number">12</span>&#125;;</span><br><span class="line">    MergeSort mergeSort = <span class="keyword">new</span> MergeSort();</span><br><span class="line">    mergeSort.sort(arr);</span><br><span class="line">    Arrays.stream(arr).forEach(System.out::println);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] unsorted) &#123;</span><br><span class="line">    doSort(unsorted, <span class="number">0</span>, unsorted.length - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> unsorted;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] heap = &#123;<span class="number">0</span>, <span class="number">4</span>, <span class="number">23</span>, <span class="number">6</span>, <span class="number">78</span>, <span class="number">1</span>, <span class="number">54</span>, <span class="number">231</span>, <span class="number">9</span>, <span class="number">12</span>&#125;;</span><br><span class="line">    sort(heap, <span class="number">9</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = heap.length - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">      System.out.println(heap[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildHeap</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n / <span class="number">2</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">      heapify(a, n, i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> n, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      <span class="keyword">int</span> maxPos = i;</span><br><span class="line">      <span class="keyword">if</span> (i * <span class="number">2</span> &lt;= n &amp;&amp; a[i] &lt; a[i * <span class="number">2</span>]) &#123;</span><br><span class="line">        maxPos = i * <span class="number">2</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (i * <span class="number">2</span> + <span class="number">1</span> &lt;= n &amp;&amp; a[maxPos] &lt; a[i * <span class="number">2</span> + <span class="number">1</span>]) &#123;</span><br><span class="line">        maxPos = i * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (maxPos == i) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      swap(a, i, maxPos);</span><br><span class="line">      i = maxPos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// n 表示数据的个数，数组 a 中的数据从下标 1 到 n 的位置。</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//建堆</span></span><br><span class="line">    buildHeap(a, n);</span><br><span class="line">    <span class="keyword">int</span> k = n;</span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    <span class="keyword">while</span> (k &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      swap(a, <span class="number">1</span>, k);</span><br><span class="line">      --k;</span><br><span class="line">      heapify(a, k, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> idx, <span class="keyword">int</span> idy)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> swap = array[idx];</span><br><span class="line">    array[idx] = array[idy];</span><br><span class="line">    array[idy] = swap;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>23种设计模式分类</title>
    <url>/design-pattern/23/</url>
    <content><![CDATA[<p><img src="../../images/23.png" alt="23种设计模式"></p>]]></content>
      <categories>
        <category>设计模式</category>
        <category>概览</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>抽象工厂模式</title>
    <url>/design-pattern/abstract-factory/</url>
    <content><![CDATA[<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><p>抽象工厂模式也就是不仅生产鼠标，同时生产键盘。<br>也就是 PC 厂商是个父类，有生产鼠标，生产键盘两个接口。<br>戴尔工厂，惠普工厂继承它，可以分别生产戴尔鼠标+戴尔键盘，和惠普鼠标+惠普键盘。<br>创建工厂时，由戴尔工厂创建。<br>后续工厂.生产鼠标()则生产戴尔鼠标，工厂.生产键盘()则生产戴尔键盘。<br><img src="../../images/AbstractFactory.png" alt="抽象工厂"></p>
<a id="more"></a>
<blockquote>
<p>在抽象工厂模式中，假设我们需要增加一个工厂</p>
</blockquote>
<p>假设我们增加华硕工厂，则我们需要增加华硕工厂，和戴尔工厂一样，继承 PC 厂商。<br>之后创建华硕鼠标，继承鼠标类。创建华硕键盘，继承键盘类即可。<br><img src="../../images/AbstractFactory-AddFactory.png" alt="增加工厂"></p>
<blockquote>
<p>在抽象工厂模式中，假设我们需要增加一个产品</p>
</blockquote>
<p>假设我们增加耳麦这个产品，则首先我们需要增加耳麦这个父类，再加上戴尔耳麦，惠普耳麦这两个子类。<br>之后在PC厂商这个父类中，增加生产耳麦的接口。最后在戴尔工厂，惠普工厂这两个类中，分别实现生产戴尔耳麦，惠普耳麦的功能。 以上。<br><img src="../../images/AbstractFactory-AddProduct.png" alt="增加产品"></p>
<h1 id="抽象工厂设计模式UML类图"><a href="#抽象工厂设计模式UML类图" class="headerlink" title="抽象工厂设计模式UML类图"></a>抽象工厂设计模式UML类图</h1><p><img src="../../images/plantuml/abstract-factory.urm.png" alt="抽象工厂设计模式UML类图"></p>
<!-- more -->
<h1 id="抽象工厂设计模式java实现"><a href="#抽象工厂设计模式java实现" class="headerlink" title="抽象工厂设计模式java实现"></a>抽象工厂设计模式java实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * KingdomFactory factory interface.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">KingdomFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">Castle <span class="title">createCastle</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">King <span class="title">createKing</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Army <span class="title">createArmy</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OrcKingdomFactory concrete factory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrcKingdomFactory</span> <span class="keyword">implements</span> <span class="title">KingdomFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Castle <span class="title">createCastle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OrcCastle();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> King <span class="title">createKing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OrcKing();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Army <span class="title">createArmy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OrcArmy();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ElfKingdomFactory concrete factory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElfKingdomFactory</span> <span class="keyword">implements</span> <span class="title">KingdomFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Castle <span class="title">createCastle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ElfCastle();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> King <span class="title">createKing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ElfKing();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Army <span class="title">createArmy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ElfArmy();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * King interface.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">King</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OrcKing.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrcKing</span> <span class="keyword">implements</span> <span class="title">King</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> String DESCRIPTION = <span class="string">"This is the Orc king!"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DESCRIPTION;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ElfKing.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElfKing</span> <span class="keyword">implements</span> <span class="title">King</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> String DESCRIPTION = <span class="string">"This is the Elven king!"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DESCRIPTION;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Castle interface.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Castle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OrcCastle.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrcCastle</span> <span class="keyword">implements</span> <span class="title">Castle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> String DESCRIPTION = <span class="string">"This is the Orc castle!"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DESCRIPTION;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ElfCastle.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElfCastle</span> <span class="keyword">implements</span> <span class="title">Castle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> String DESCRIPTION = <span class="string">"This is the Elven castle!"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DESCRIPTION;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Army interface.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Army</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OrcArmy.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrcArmy</span> <span class="keyword">implements</span> <span class="title">Army</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> String DESCRIPTION = <span class="string">"This is the Orc Army!"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DESCRIPTION;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ElfArmy.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElfArmy</span> <span class="keyword">implements</span> <span class="title">Army</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> String DESCRIPTION = <span class="string">"This is the Elven Army!"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DESCRIPTION;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Abstract Factory pattern provides a way to encapsulate a group of individual factories that</span></span><br><span class="line"><span class="comment"> * have a common theme without specifying their concrete classes. In normal usage, the client</span></span><br><span class="line"><span class="comment"> * software creates a concrete implementation of the abstract factory and then uses the generic</span></span><br><span class="line"><span class="comment"> * interface of the factory to create the concrete objects that are part of the theme. The client</span></span><br><span class="line"><span class="comment"> * does not know (or care) which concrete objects it gets from each of these internal factories,</span></span><br><span class="line"><span class="comment"> * since it uses only the generic interfaces of their products. This pattern separates the details</span></span><br><span class="line"><span class="comment"> * of implementation of a set of objects from their general usage and relies on object composition,</span></span><br><span class="line"><span class="comment"> * as object creation is implemented in methods exposed in the factory interface.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The essence of the Abstract Factory pattern is a factory interface (&#123;<span class="doctag">@link</span> KingdomFactory&#125;)</span></span><br><span class="line"><span class="comment"> * and its implementations ( &#123;<span class="doctag">@link</span> ElfKingdomFactory&#125;, &#123;<span class="doctag">@link</span> OrcKingdomFactory&#125;). The example uses</span></span><br><span class="line"><span class="comment"> * both concrete implementations to create a king, a castle and an army.</span></span><br><span class="line"><span class="comment"> 抽象工厂模式提供了一种封装一组具有共同主题的单个工厂而无需指定其具体类的方法。在正常使用中，客户端软件会创建抽象工厂的具体实现，然后使用工厂的通用接口来创建作为主题一部分的具体对象。客户端不知道（或不在乎）它从这些内部工厂中获得了哪些具体对象，因为客户端仅使用其产品的通用接口。这种模式将一组对象的实现细节与它们的一般用法分开，并依赖于对象组成，因为对象创建是在工厂接口中公开的方法中实现的。</span></span><br><span class="line"><span class="comment">&lt;p&gt;抽象工厂模式的本质是工厂接口（&#123;<span class="doctag">@link</span> KingdomFactory&#125;）及其实现（&#123;<span class="doctag">@link</span> ElfKingdomFactory&#125;，&#123;@ link OrcKingdomFactory&#125;）。</span></span><br><span class="line"><span class="comment">该示例使用两种具体实现来创建国王，城堡和军队。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(App<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> King king;</span><br><span class="line">  <span class="keyword">private</span> Castle castle;</span><br><span class="line">  <span class="keyword">private</span> Army army;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Creates kingdom.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createKingdom</span><span class="params">(<span class="keyword">final</span> KingdomFactory factory)</span> </span>&#123;</span><br><span class="line">    setKing(factory.createKing());</span><br><span class="line">    setCastle(factory.createCastle());</span><br><span class="line">    setArmy(factory.createArmy());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">King <span class="title">getKing</span><span class="params">(<span class="keyword">final</span> KingdomFactory factory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> factory.createKing();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> King <span class="title">getKing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> king;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setKing</span><span class="params">(<span class="keyword">final</span> King king)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.king = king;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">Castle <span class="title">getCastle</span><span class="params">(<span class="keyword">final</span> KingdomFactory factory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> factory.createCastle();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Castle <span class="title">getCastle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> castle;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setCastle</span><span class="params">(<span class="keyword">final</span> Castle castle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.castle = castle;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">Army <span class="title">getArmy</span><span class="params">(<span class="keyword">final</span> KingdomFactory factory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> factory.createArmy();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Army <span class="title">getArmy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> army;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setArmy</span><span class="params">(<span class="keyword">final</span> Army army)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.army = army;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The factory of kingdom factories.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryMaker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Enumeration for the different types of Kingdoms.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> KingdomType &#123;</span><br><span class="line">      ELF, ORC</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The factory method to create KingdomFactory concrete objects.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> KingdomFactory <span class="title">makeFactory</span><span class="params">(KingdomType type)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> ELF:</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> ElfKingdomFactory();</span><br><span class="line">        <span class="keyword">case</span> ORC:</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> OrcKingdomFactory();</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"KingdomType not supported."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Program entry point.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> args command line args</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> App();</span><br><span class="line"></span><br><span class="line">    LOGGER.info(<span class="string">"Elf Kingdom"</span>);</span><br><span class="line">    app.createKingdom(FactoryMaker.makeFactory(KingdomType.ELF));</span><br><span class="line">    LOGGER.info(app.getArmy().getDescription());</span><br><span class="line">    LOGGER.info(app.getCastle().getDescription());</span><br><span class="line">    LOGGER.info(app.getKing().getDescription());</span><br><span class="line"></span><br><span class="line">    LOGGER.info(<span class="string">"Orc Kingdom"</span>);</span><br><span class="line">    app.createKingdom(FactoryMaker.makeFactory(KingdomType.ORC));</span><br><span class="line">    LOGGER.info(app.getArmy().getDescription());</span><br><span class="line">    LOGGER.info(app.getCastle().getDescription());</span><br><span class="line">    LOGGER.info(app.getKing().getDescription());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
        <category>创建型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>适配器模式</title>
    <url>/design-pattern/adapter/</url>
    <content><![CDATA[<h1 id="菜鸟教程笔记-计算机读取SD卡例子"><a href="#菜鸟教程笔记-计算机读取SD卡例子" class="headerlink" title="菜鸟教程笔记-计算机读取SD卡例子"></a>菜鸟教程笔记-计算机读取SD卡例子</h1><h2 id="先模拟计算机读取SD卡："><a href="#先模拟计算机读取SD卡：" class="headerlink" title="先模拟计算机读取SD卡："></a>先模拟计算机读取SD卡：</h2><p>1、先创建一个SD卡的接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SDCard</span> </span>&#123;</span><br><span class="line">    <span class="comment">//读取SD卡方法</span></span><br><span class="line">    <span class="function">String <span class="title">readSD</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//写入SD卡功能</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">writeSD</span><span class="params">(String msg)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、创建SD卡接口的实现类，模拟SD卡的功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SDCardImpl</span> <span class="keyword">implements</span> <span class="title">SDCard</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">readSD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String msg = <span class="string">"sdcard read a msg :hello word SD"</span>;</span><br><span class="line">        <span class="keyword">return</span> msg;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">writeSD</span><span class="params">(String msg)</span> </span>&#123;      </span><br><span class="line">        System.out.println(<span class="string">"sd card write msg : "</span> + msg);    </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、创建计算机接口，计算机提供读取SD卡方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Computer</span> </span>&#123;    </span><br><span class="line">    <span class="function">String <span class="title">readSD</span><span class="params">(SDCard sdCard)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、创建一个计算机实例，实现计算机接口，并实现其读取SD卡方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThinkpadComputer</span> <span class="keyword">implements</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">readSD</span><span class="params">(SDCard sdCard)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">if</span>(sdCard == <span class="keyword">null</span>)<span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"sd card null"</span>);        </span><br><span class="line">        <span class="keyword">return</span> sdCard.readSD();    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、这时候就可以模拟计算机读取SD卡功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerReadDemo</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        Computer computer = <span class="keyword">new</span> ThinkpadComputer();        </span><br><span class="line">        SDCard sdCard = <span class="keyword">new</span> SDCardImpl();       </span><br><span class="line">        System.out.println(computer.readSD(sdCard));    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="接下来在不改变计算机读取SD卡接口的情况下，通过适配器模式读取TF卡："><a href="#接下来在不改变计算机读取SD卡接口的情况下，通过适配器模式读取TF卡：" class="headerlink" title="接下来在不改变计算机读取SD卡接口的情况下，通过适配器模式读取TF卡："></a>接下来在不改变计算机读取SD卡接口的情况下，通过适配器模式读取TF卡：</h2><p>1、创建TF卡接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TFCard</span> </span>&#123;    </span><br><span class="line">    <span class="function">String <span class="title">readTF</span><span class="params">()</span></span>;    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">writeTF</span><span class="params">(String msg)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、创建TF卡实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TFCardImpl</span> <span class="keyword">implements</span> <span class="title">TFCard</span> </span>&#123;    </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">readTF</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">        String msg =<span class="string">"tf card reade msg : hello word tf card"</span>;        </span><br><span class="line">        <span class="keyword">return</span> msg;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">writeTF</span><span class="params">(String msg)</span> </span>&#123;        </span><br><span class="line">        System.out.println(<span class="string">"tf card write a msg : "</span> + msg);        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、创建SD适配TF （也可以说是SD兼容TF，相当于读卡器）：<br>实现SDCard接口，并将要适配的对象作为适配器的属性引入。</p>
<h3 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SDObjectAdapterTF</span> <span class="keyword">implements</span> <span class="title">SDCard</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">private</span> TFCard tfCard;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SDAdapterTF</span><span class="params">(TFCard tfCard)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">this</span>.tfCard = tfCard;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">readSD</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">        System.out.println(<span class="string">"adapter read tf card "</span>);        </span><br><span class="line">        <span class="keyword">return</span> tfCard.readTF();    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">writeSD</span><span class="params">(String msg)</span> </span>&#123;        </span><br><span class="line">        System.out.println(<span class="string">"adapter write tf card"</span>);        </span><br><span class="line">        <span class="keyword">return</span> tfCard.writeTF(msg);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SDClassAdapterTF</span> <span class="keyword">extends</span> <span class="title">TFCardImpl</span> <span class="keyword">implements</span> <span class="title">SDCard</span> </span>&#123;    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">readSD</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">        System.out.println(<span class="string">"adapter read tf card "</span>);        </span><br><span class="line">        <span class="keyword">return</span> readTF();    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">writeSD</span><span class="params">(String msg)</span> </span>&#123;        </span><br><span class="line">        System.out.println(<span class="string">"adapter write tf card"</span>);        </span><br><span class="line">        <span class="keyword">return</span> writeTF(msg);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、通过上面的例子测试计算机通过SD读卡器读取TF卡：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerReadDemo</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        Computer computer = <span class="keyword">new</span> ThinkpadComputer();        </span><br><span class="line">        SDCard sdCard = <span class="keyword">new</span> SDCardImpl();        </span><br><span class="line">        System.out.println(computer.readSD(sdCard));        </span><br><span class="line">        System.out.println(<span class="string">"===================================="</span>);        </span><br><span class="line">        TFCard tfCard = <span class="keyword">new</span> TFCardImpl();      </span><br><span class="line">        <span class="comment">//对象适配器  </span></span><br><span class="line">        SDCard tfCardObjectAdapterSD = <span class="keyword">new</span> SDObjectAdapterTF(tfCard);  </span><br><span class="line">        System.out.println(computer.readSD(tfCardObjectAdapterSD)); </span><br><span class="line">        <span class="comment">//类适配器</span></span><br><span class="line">        SDCard tfCardClassAdapterSD = <span class="keyword">new</span> SDClassAdapterTF();  </span><br><span class="line">        System.out.println(computer.readSD(tfCardClassAdapterSD));        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sdcard read a msg :hello word SD</span><br><span class="line">====================================</span><br><span class="line">adapter read tf card </span><br><span class="line">tf card reade msg : hello word tf card</span><br></pre></td></tr></table></figure>
<p>在这种模式下，计算机并不需要知道具体是什么卡，只需要负责操作接口即可，具体操作的什么类，由适配器决定。</p>
<h1 id="适配器设计模式UML类图"><a href="#适配器设计模式UML类图" class="headerlink" title="适配器设计模式UML类图"></a>适配器设计模式UML类图</h1><p><img src="../../images/plantuml/adapter.urm.png" alt="适配器设计模式UML类图"></p>
<h1 id="适配器设计模式java实现"><a href="#适配器设计模式java实现" class="headerlink" title="适配器设计模式java实现"></a>适配器设计模式java实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The interface expected by the client.&lt;br&gt; A rowing boat is rowed to move.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RowingBoat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">row</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Captain uses &#123;<span class="doctag">@link</span> RowingBoat&#125; to sail. &lt;br&gt; This is the client in the pattern.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Captain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> RowingBoat rowingBoat;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Captain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Captain</span><span class="params">(<span class="keyword">final</span> RowingBoat boat)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.rowingBoat = boat;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setRowingBoat</span><span class="params">(<span class="keyword">final</span> RowingBoat boat)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.rowingBoat = boat;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">row</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    rowingBoat.row();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Device class (adaptee in the pattern). We want to reuse this class. Fishing boat moves by</span></span><br><span class="line"><span class="comment"> * sailing.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FishingBoat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = getLogger(FishingBoat<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">sail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"The fishing boat is sailing"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Adapter class. Adapts the interface of the device (&#123;<span class="doctag">@link</span> FishingBoat&#125;) into &#123;<span class="doctag">@link</span> RowingBoat&#125;</span></span><br><span class="line"><span class="comment"> * interface expected by the client (&#123;<span class="doctag">@link</span> Captain&#125;).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FishingBoatAdapter</span> <span class="keyword">implements</span> <span class="title">RowingBoat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> FishingBoat boat;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">FishingBoatAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    boat = <span class="keyword">new</span> FishingBoat();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">row</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    boat.sail();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An adapter helps two incompatible interfaces to work together. This is the real world definition</span></span><br><span class="line"><span class="comment"> * for an adapter. Interfaces may be incompatible but the inner functionality should suit the need.</span></span><br><span class="line"><span class="comment"> * The Adapter design pattern allows otherwise incompatible classes to work together by converting</span></span><br><span class="line"><span class="comment"> * the interface of one class into an interface expected by the clients.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;There are two variations of the Adapter pattern: The class adapter implements the adaptee's</span></span><br><span class="line"><span class="comment"> * interface whereas the object adapter uses composition to contain the adaptee in the adapter</span></span><br><span class="line"><span class="comment"> * object. This example uses the object adapter approach.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The Adapter (&#123;<span class="doctag">@link</span> FishingBoatAdapter&#125;) converts the interface of the adaptee class (&#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * FishingBoat&#125;) into a suitable one expected by the client (&#123;<span class="doctag">@link</span> RowingBoat&#125;).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The story of this implementation is this. &lt;br&gt; Pirates are coming! we need a &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * RowingBoat&#125; to flee! We have a &#123;<span class="doctag">@link</span> FishingBoat&#125; and our captain. We have no time to make up a</span></span><br><span class="line"><span class="comment"> * new ship! we need to reuse this &#123;<span class="doctag">@link</span> FishingBoat&#125;. The captain needs a rowing boat which he can</span></span><br><span class="line"><span class="comment"> * operate. The spec is in &#123;<span class="doctag">@link</span> RowingBoat&#125;. We will use the Adapter pattern to reuse &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * FishingBoat&#125;.</span></span><br><span class="line"><span class="comment"> 适配器可帮助两个不兼容的接口一起工作。这是适配器的真实定义。接口可能不兼容，但内部功能应满足需要。适配器设计模式允许将不兼容的类通过将一个类的接口转换为客户端期望的接口来协同工作。</span></span><br><span class="line"><span class="comment">&lt;p&gt; Adapter模式有两种变体：类适配器实现适配器的接口，而对象适配器使用合成器将适配器包含在适配器中</span></span><br><span class="line"><span class="comment">宾语。本示例使用对象适配器方法。</span></span><br><span class="line"><span class="comment">&lt;p&gt;适配器（&#123;<span class="doctag">@link</span> FishingBoatAdapter&#125;）将适配器类（&#123;<span class="doctag">@link</span> FishingBoat&#125;）的接口转换为客户端期望的合适接口（&#123;<span class="doctag">@link</span> RowingBoat&#125;）。</span></span><br><span class="line"><span class="comment">&lt;p&gt;这个实现的故事是这样的。 &lt;br&gt;海盗来了！我们需要一个&#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">RowingBoat&#125;逃离！我们有一个&#123;<span class="doctag">@link</span> FishingBoat&#125;和我们的队长。我们没有时间下新船！我们需要重用此&#123;<span class="doctag">@link</span> FishingBoat&#125;。船长需要一艘他可以操作的划艇。规范位于&#123;<span class="doctag">@link</span> RowingBoat&#125;中。我们将使用Adapter模式来重用&#123;<span class="doctag">@link</span> FishingBoat&#125;。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">App</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Program entry point.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> args command line args</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// The captain can only operate rowing boats but with adapter he is able to</span></span><br><span class="line">    <span class="comment">// use fishing boats as well</span></span><br><span class="line">    <span class="keyword">var</span> captain = <span class="keyword">new</span> Captain(<span class="keyword">new</span> FishingBoatAdapter());</span><br><span class="line">    captain.row();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><h2 id="spring-AOP中的适配器模式"><a href="#spring-AOP中的适配器模式" class="headerlink" title="spring AOP中的适配器模式"></a>spring AOP中的适配器模式</h2><p>在Spring的Aop中，使用的 Advice（通知） 来增强被代理类的功能。<br>Advice的类型有：MethodBeforeAdvice、AfterReturningAdvice、ThrowsAdvice<br>在每个类型 Advice 都有对应的拦截器，MethodBeforeAdviceInterceptor、AfterReturningAdviceInterceptor、ThrowsAdviceInterceptor<br>Spring需要将每个 Advice 都封装成对应的拦截器类型，返回给容器，所以需要使用适配器模式对 Advice 进行转换<br>三个适配者类 Adaptee 如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MethodBeforeAdvice</span> <span class="keyword">extends</span> <span class="title">BeforeAdvice</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">before</span><span class="params">(Method var1, Object[] var2, @Nullable Object var3)</span> <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AfterReturningAdvice</span> <span class="keyword">extends</span> <span class="title">AfterAdvice</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(@Nullable Object var1, Method var2, Object[] var3, @Nullable Object var4)</span> <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ThrowsAdvice</span> <span class="keyword">extends</span> <span class="title">AfterAdvice</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="../../images/AdvisorAdapter.png" alt="AdvisorAdapter"><br>目标接口 Target，有两个方法，一个判断 Advice 类型是否匹配，一个是工厂方法，创建对应类型的 Advice 对应的拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AdvisorAdapter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">supportsAdvice</span><span class="params">(Advice var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">MethodInterceptor <span class="title">getInterceptor</span><span class="params">(Advisor var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>三个适配器类 Adapter 分别如下，注意其中的 Advice、Adapter、Interceptor之间的对应关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MethodBeforeAdviceAdapter</span> <span class="keyword">implements</span> <span class="title">AdvisorAdapter</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsAdvice</span><span class="params">(Advice advice)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (advice <span class="keyword">instanceof</span> MethodBeforeAdvice);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> MethodInterceptor <span class="title">getInterceptor</span><span class="params">(Advisor advisor)</span> </span>&#123;</span><br><span class="line">		MethodBeforeAdvice advice = (MethodBeforeAdvice) advisor.getAdvice();</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MethodBeforeAdviceInterceptor(advice);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AfterReturningAdviceAdapter</span> <span class="keyword">implements</span> <span class="title">AdvisorAdapter</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsAdvice</span><span class="params">(Advice advice)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (advice <span class="keyword">instanceof</span> AfterReturningAdvice);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> MethodInterceptor <span class="title">getInterceptor</span><span class="params">(Advisor advisor)</span> </span>&#123;</span><br><span class="line">		AfterReturningAdvice advice = (AfterReturningAdvice) advisor.getAdvice();</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> AfterReturningAdviceInterceptor(advice);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThrowsAdviceAdapter</span> <span class="keyword">implements</span> <span class="title">AdvisorAdapter</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsAdvice</span><span class="params">(Advice advice)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (advice <span class="keyword">instanceof</span> ThrowsAdvice);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> MethodInterceptor <span class="title">getInterceptor</span><span class="params">(Advisor advisor)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ThrowsAdviceInterceptor(advisor.getAdvice());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>客户端 DefaultAdvisorAdapterRegistry</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultAdvisorAdapterRegistry</span> <span class="keyword">implements</span> <span class="title">AdvisorAdapterRegistry</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;AdvisorAdapter&gt; adapters = <span class="keyword">new</span> ArrayList(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultAdvisorAdapterRegistry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里注册了适配器</span></span><br><span class="line">        <span class="keyword">this</span>.registerAdvisorAdapter(<span class="keyword">new</span> MethodBeforeAdviceAdapter());</span><br><span class="line">        <span class="keyword">this</span>.registerAdvisorAdapter(<span class="keyword">new</span> AfterReturningAdviceAdapter());</span><br><span class="line">        <span class="keyword">this</span>.registerAdvisorAdapter(<span class="keyword">new</span> ThrowsAdviceAdapter());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> MethodInterceptor[] getInterceptors(Advisor advisor) <span class="keyword">throws</span> UnknownAdviceTypeException &#123;</span><br><span class="line">        List&lt;MethodInterceptor&gt; interceptors = <span class="keyword">new</span> ArrayList(<span class="number">3</span>);</span><br><span class="line">        Advice advice = advisor.getAdvice();</span><br><span class="line">        <span class="keyword">if</span> (advice <span class="keyword">instanceof</span> MethodInterceptor) &#123;</span><br><span class="line">            interceptors.add((MethodInterceptor)advice);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Iterator var4 = <span class="keyword">this</span>.adapters.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">            AdvisorAdapter adapter = (AdvisorAdapter)var4.next();</span><br><span class="line">            <span class="keyword">if</span> (adapter.supportsAdvice(advice)) &#123;   <span class="comment">// 这里调用适配器方法</span></span><br><span class="line">                interceptors.add(adapter.getInterceptor(advisor));  <span class="comment">// 这里调用适配器方法</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (interceptors.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAdviceTypeException(advisor.getAdvice());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (MethodInterceptor[])interceptors.toArray(<span class="keyword">new</span> MethodInterceptor[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里看 while 循环里，逐个取出注册的适配器，调用 supportsAdvice() 方法来判断 Advice 对应的类型，然后调用 getInterceptor() 创建对应类型的拦截器<br>这里应该属于对象适配器模式，关键字 instanceof 可看成是 Advice 的方法，不过这里的 Advice 对象是从外部传进来，而不是成员属性</p>
<h2 id="spring-JPA中的适配器模式"><a href="#spring-JPA中的适配器模式" class="headerlink" title="spring JPA中的适配器模式"></a>spring JPA中的适配器模式</h2><p>在Spring的ORM包中，对于JPA的支持也是采用了适配器模式，首先定义了一个接口的 JpaVendorAdapter，然后不同的持久层框架都实现此接口。<br>jpaVendorAdapter：用于设置实现厂商JPA实现的特定属性，如设置Hibernate的是否自动生成DDL的属性generateDdl；这些属性是厂商特定的，因此最好在这里设置；目前Spring提供 HibernateJpaVendorAdapter、OpenJpaVendorAdapter、EclipseLinkJpaVendorAdapter、TopLinkJpaVendorAdapter 四个实现。其中最重要的属性是 database，用来指定使用的数据库类型，从而能根据数据库类型来决定比如如何将数据库特定异常转换为Spring的一致性异常，目前支持如下数据库（DB2、DERBY、H2、HSQL、INFORMIX、MYSQL、ORACLE、POSTGRESQL、SQL_SERVER、SYBASE）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JpaVendorAdapter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="comment">// 返回一个具体的持久层提供者</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> PersistenceProvider <span class="title">getPersistenceProvider</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回持久层提供者的包名</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getPersistenceProviderRootPackage</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回持久层提供者的属性</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> Map&lt;String, ?&gt; getJpaPropertyMap();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回JpaDialect</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> JpaDialect <span class="title">getJpaDialect</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回持久层管理器工厂</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> Class&lt;? extends EntityManagerFactory&gt; getEntityManagerFactoryInterface();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回持久层管理器</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> Class&lt;? extends EntityManager&gt; getEntityManagerInterface();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自定义回调方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">postProcessEntityManagerFactory</span><span class="params">(EntityManagerFactory paramEntityManagerFactory)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们来看其中一个适配器实现类 HibernateJpaVendorAdapter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateJpaVendorAdapter</span> <span class="keyword">extends</span> <span class="title">AbstractJpaVendorAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//设定持久层提供者</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PersistenceProvider persistenceProvider;</span><br><span class="line">    <span class="comment">//设定持久层方言</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JpaDialect jpaDialect;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HibernateJpaVendorAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.persistenceProvider = <span class="keyword">new</span> HibernatePersistence();</span><br><span class="line">        <span class="keyword">this</span>.jpaDialect = <span class="keyword">new</span> HibernateJpaDialect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回持久层方言</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PersistenceProvider <span class="title">getPersistenceProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.persistenceProvider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回持久层提供者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPersistenceProviderRootPackage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"org.hibernate"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回JPA的属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getJpaPropertyMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map jpaProperties = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (getDatabasePlatform() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            jpaProperties.put(<span class="string">"hibernate.dialect"</span>, getDatabasePlatform());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getDatabase() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Class databaseDialectClass = determineDatabaseDialectClass(getDatabase());</span><br><span class="line">            <span class="keyword">if</span> (databaseDialectClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">                jpaProperties.put(<span class="string">"hibernate.dialect"</span>,</span><br><span class="line">                        databaseDialectClass.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isGenerateDdl()) &#123;</span><br><span class="line">            jpaProperties.put(<span class="string">"hibernate.hbm2ddl.auto"</span>, <span class="string">"update"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isShowSql()) &#123;</span><br><span class="line">            jpaProperties.put(<span class="string">"hibernate.show_sql"</span>, <span class="string">"true"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jpaProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设定数据库</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Class <span class="title">determineDatabaseDialectClass</span><span class="params">(Database database)</span>     </span></span><br><span class="line"><span class="function">    </span>&#123;                                                                                       </span><br><span class="line">        <span class="keyword">switch</span> (<span class="number">1</span>.$SwitchMap$org$springframework$orm$jpa$vendor$Database[database.ordinal()]) </span><br><span class="line">        &#123;                                                                                     </span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:                                                                             </span><br><span class="line">          <span class="keyword">return</span> DB2Dialect<span class="class">.<span class="keyword">class</span></span>;                                                            </span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:                                                                               </span><br><span class="line">          <span class="keyword">return</span> DerbyDialect<span class="class">.<span class="keyword">class</span></span>;                                                          </span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:                                                                               </span><br><span class="line">          <span class="keyword">return</span> H2Dialect<span class="class">.<span class="keyword">class</span></span>;                                                             </span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:                                                                               </span><br><span class="line">          <span class="keyword">return</span> HSQLDialect<span class="class">.<span class="keyword">class</span></span>;                                                           </span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:                                                                               </span><br><span class="line">          <span class="keyword">return</span> InformixDialect<span class="class">.<span class="keyword">class</span></span>;                                                       </span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:                                                                               </span><br><span class="line">          <span class="keyword">return</span> MySQLDialect<span class="class">.<span class="keyword">class</span></span>;                                                          </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:                                                                               </span><br><span class="line">          <span class="keyword">return</span> Oracle9iDialect<span class="class">.<span class="keyword">class</span></span>;                                                       </span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:                                                                               </span><br><span class="line">          <span class="keyword">return</span> PostgreSQLDialect<span class="class">.<span class="keyword">class</span></span>;                                                     </span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:                                                                               </span><br><span class="line">          <span class="keyword">return</span> SQLServerDialect<span class="class">.<span class="keyword">class</span></span>;                                                      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:                                                                              </span><br><span class="line">          <span class="keyword">return</span> SybaseDialect<span class="class">.<span class="keyword">class</span></span>; &#125;                                                       </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;              </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回JPA方言</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JpaDialect <span class="title">getJpaDialect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.jpaDialect;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回JPA实体管理器工厂</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;? extends EntityManagerFactory&gt; getEntityManagerFactoryInterface() &#123;</span><br><span class="line">        <span class="keyword">return</span> HibernateEntityManagerFactory<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回JPA实体管理器</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;? extends EntityManager&gt; getEntityManagerInterface() &#123;</span><br><span class="line">        <span class="keyword">return</span> HibernateEntityManager<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置文件中可以这样指定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"jpaVendorAdapter"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"</span>&gt; </span><br><span class="line">   &lt;property name=<span class="string">"generateDdl"</span> value=<span class="string">"false"</span> /&gt;  </span><br><span class="line">   &lt;property name=<span class="string">"database"</span> value=<span class="string">"HSQL"</span>/&gt;  </span><br><span class="line">&lt;/bean&gt;  </span><br><span class="line">&lt;bean id=<span class="string">"jpaDialect"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.orm.jpa.vendor.HibernateJpaDialect"</span>/&gt;</span><br></pre></td></tr></table></figure>
<h2 id="spring-MVC中的适配器模式"><a href="#spring-MVC中的适配器模式" class="headerlink" title="spring MVC中的适配器模式"></a>spring MVC中的适配器模式</h2><p>Spring MVC中的适配器模式主要用于执行目标 Controller 中的请求处理方法。<br>在Spring MVC中，DispatcherServlet 作为用户，HandlerAdapter 作为期望接口，具体的适配器实现类用于对目标类进行适配，Controller 作为需要适配的类。<br>为什么要在 Spring MVC 中使用适配器模式？Spring MVC 中的 Controller 种类众多，不同类型的 Controller 通过不同的方法来对请求进行处理。如果不利用适配器模式的话，DispatcherServlet 直接获取对应类型的 Controller，需要的自行来判断，像下面这段代码一样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(mappedHandler.getHandler() <span class="keyword">instanceof</span> MultiActionController)&#123;  </span><br><span class="line">   ((MultiActionController)mappedHandler.getHandler()).xxx  </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(mappedHandler.getHandler() <span class="keyword">instanceof</span> XXX)&#123;  </span><br><span class="line">    ...  </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(...)&#123;  </span><br><span class="line">   ...  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样假设如果我们增加一个 HardController,就要在代码中加入一行 if(mappedHandler.getHandler() instanceof HardController)，这种形式就使得程序难以维护，也违反了设计模式中的开闭原则 – 对扩展开放，对修改关闭。<br>我们来看看源码，首先是适配器接口 HandlerAdapter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ModelAndView <span class="title">handle</span><span class="params">(HttpServletRequest var1, HttpServletResponse var2, Object var3)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getLastModified</span><span class="params">(HttpServletRequest var1, Object var2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现该接口的适配器每一个 Controller 都有一个适配器与之对应，这样的话，每自定义一个 Controller 需要定义一个实现 HandlerAdapter 的适配器。<br>springmvc 中提供的 Controller 实现类有如下<br><img src="../../images/Controller.png" alt="Controller"><br>springmvc 中提供的 HandlerAdapter 实现类如下<br><img src="../../images/HandlerAdapter.png" alt="HandlerAdapter"><br>HttpRequestHandlerAdapter 这个适配器代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpRequestHandlerAdapter</span> <span class="keyword">implements</span> <span class="title">HandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpRequestHandlerAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> handler <span class="keyword">instanceof</span> HttpRequestHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ((HttpRequestHandler)handler).handleRequest(request, response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getLastModified</span><span class="params">(HttpServletRequest request, Object handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> handler <span class="keyword">instanceof</span> LastModified ? ((LastModified)handler).getLastModified(request) : -<span class="number">1L</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当Spring容器启动后，会将所有定义好的适配器对象存放在一个List集合中，当一个请求来临时，DispatcherServlet 会通过 handler 的类型找到对应适配器，并将该适配器对象返回给用户，然后就可以统一通过适配器的 hanle() 方法来调用 Controller 中的用于处理请求的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherServlet</span> <span class="keyword">extends</span> <span class="title">FrameworkServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;HandlerAdapter&gt; handlerAdapters;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//初始化handlerAdapters</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initHandlerAdapters</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//..省略...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 遍历所有的 HandlerAdapters，通过 supports 判断找到匹配的适配器</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> HandlerAdapter <span class="title">getHandlerAdapter</span><span class="params">(Object handler)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (HandlerAdapter ha : <span class="keyword">this</span>.handlerAdapters) &#123;</span><br><span class="line">			<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">				logger.trace(<span class="string">"Testing handler adapter ["</span> + ha + <span class="string">"]"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (ha.supports(handler)) &#123;</span><br><span class="line">				<span class="keyword">return</span> ha;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 分发请求，请求需要找到匹配的适配器来处理</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		HttpServletRequest processedRequest = request;</span><br><span class="line">		HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Determine handler for the current request.</span></span><br><span class="line">		mappedHandler = getHandler(processedRequest);</span><br><span class="line">			</span><br><span class="line">		<span class="comment">// 确定当前请求的匹配的适配器.</span></span><br><span class="line">		HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">		ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">					</span><br><span class="line">		mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// ...省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过适配器模式我们将所有的 controller 统一交给 HandlerAdapter 处理，免去了写大量的 if-else 语句对 Controller 进行判断，也更利于扩展新的 Controller 类型。</p>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>结构型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>建造者模式</title>
    <url>/design-pattern/builder/</url>
    <content><![CDATA[<h1 id="建造者模式UML类图"><a href="#建造者模式UML类图" class="headerlink" title="建造者模式UML类图"></a>建造者模式UML类图</h1><p><img src="../../images/plantuml/builder.urm.png" alt="建造者模式UML类图"></p>
<a id="more"></a>
<h1 id="建造者模式java实现"><a href="#建造者模式java实现" class="headerlink" title="建造者模式java实现"></a>建造者模式java实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Armor enumeration.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Armor &#123;</span><br><span class="line"></span><br><span class="line">  CLOTHES(<span class="string">"clothes"</span>), LEATHER(<span class="string">"leather"</span>), CHAIN_MAIL(<span class="string">"chain mail"</span>), PLATE_MAIL(<span class="string">"plate mail"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String title;</span><br><span class="line"></span><br><span class="line">  Armor(String title) &#123;</span><br><span class="line">    <span class="keyword">this</span>.title = title;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> title;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HairColor enumeration.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> HairColor &#123;</span><br><span class="line"></span><br><span class="line">  WHITE, BLOND, RED, BROWN, BLACK;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name().toLowerCase();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HairType enumeration.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> HairType &#123;</span><br><span class="line"></span><br><span class="line">  BALD(<span class="string">"bald"</span>), SHORT(<span class="string">"short"</span>), CURLY(<span class="string">"curly"</span>), LONG_STRAIGHT(<span class="string">"long straight"</span>), LONG_CURLY(</span><br><span class="line">      <span class="string">"long curly"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String title;</span><br><span class="line"></span><br><span class="line">  HairType(String title) &#123;</span><br><span class="line">    <span class="keyword">this</span>.title = title;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> title;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Profession enumeration.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Profession &#123;</span><br><span class="line"></span><br><span class="line">  WARRIOR, THIEF, MAGE, PRIEST;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name().toLowerCase();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Weapon enumeration.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Weapon &#123;</span><br><span class="line"></span><br><span class="line">  DAGGER, SWORD, AXE, WARHAMMER, BOW;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name().toLowerCase();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hero, the class with many parameters.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Profession profession;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> HairType hairType;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> HairColor hairColor;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Armor armor;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Weapon weapon;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Hero</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.profession = builder.profession;</span><br><span class="line">    <span class="keyword">this</span>.name = builder.name;</span><br><span class="line">    <span class="keyword">this</span>.hairColor = builder.hairColor;</span><br><span class="line">    <span class="keyword">this</span>.hairType = builder.hairType;</span><br><span class="line">    <span class="keyword">this</span>.weapon = builder.weapon;</span><br><span class="line">    <span class="keyword">this</span>.armor = builder.armor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Profession <span class="title">getProfession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> profession;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> HairType <span class="title">getHairType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hairType;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> HairColor <span class="title">getHairColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hairColor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Armor <span class="title">getArmor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> armor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Weapon <span class="title">getWeapon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> weapon;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    sb.append(<span class="string">"This is a "</span>)</span><br><span class="line">        .append(profession)</span><br><span class="line">        .append(<span class="string">" named "</span>)</span><br><span class="line">        .append(name);</span><br><span class="line">    <span class="keyword">if</span> (hairColor != <span class="keyword">null</span> || hairType != <span class="keyword">null</span>) &#123;</span><br><span class="line">      sb.append(<span class="string">" with "</span>);</span><br><span class="line">      <span class="keyword">if</span> (hairColor != <span class="keyword">null</span>) &#123;</span><br><span class="line">        sb.append(hairColor).append(<span class="string">' '</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (hairType != <span class="keyword">null</span>) &#123;</span><br><span class="line">        sb.append(hairType).append(<span class="string">' '</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      sb.append(hairType != HairType.BALD ? <span class="string">"hair"</span> : <span class="string">"head"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (armor != <span class="keyword">null</span>) &#123;</span><br><span class="line">      sb.append(<span class="string">" wearing "</span>).append(armor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (weapon != <span class="keyword">null</span>) &#123;</span><br><span class="line">      sb.append(<span class="string">" and wielding a "</span>).append(weapon);</span><br><span class="line">    &#125;</span><br><span class="line">    sb.append(<span class="string">'.'</span>);</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The builder class.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Profession profession;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> HairType hairType;</span><br><span class="line">    <span class="keyword">private</span> HairColor hairColor;</span><br><span class="line">    <span class="keyword">private</span> Armor armor;</span><br><span class="line">    <span class="keyword">private</span> Weapon weapon;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(Profession profession, String name)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (profession == <span class="keyword">null</span> || name == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"profession and name can not be null"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.profession = profession;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">withHairType</span><span class="params">(HairType hairType)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.hairType = hairType;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">withHairColor</span><span class="params">(HairColor hairColor)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.hairColor = hairColor;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">withArmor</span><span class="params">(Armor armor)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.armor = armor;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">withWeapon</span><span class="params">(Weapon weapon)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.weapon = weapon;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Hero <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Hero(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The intention of the Builder pattern is to find a solution to the telescoping constructor</span></span><br><span class="line"><span class="comment"> * anti-pattern. The telescoping constructor anti-pattern occurs when the increase of object</span></span><br><span class="line"><span class="comment"> * constructor parameter combination leads to an exponential list of constructors. Instead of using</span></span><br><span class="line"><span class="comment"> * numerous constructors, the builder pattern uses another object, a builder, that receives each</span></span><br><span class="line"><span class="comment"> * initialization parameter step by step and then returns the resulting constructed object at once.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The Builder pattern has another benefit. It can be used for objects that contain flat data</span></span><br><span class="line"><span class="comment"> * (html code, SQL query, X.509 certificate...), that is to say, data that can't be easily edited.</span></span><br><span class="line"><span class="comment"> * This type of data cannot be edited step by step and must be edited at once. The best way to</span></span><br><span class="line"><span class="comment"> * construct such an object is to use a builder class.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;In this example we have the Builder pattern variation as described by Joshua Bloch in</span></span><br><span class="line"><span class="comment"> * Effective Java 2nd Edition.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;We want to build &#123;<span class="doctag">@link</span> Hero&#125; objects, but its construction is complex because of the many</span></span><br><span class="line"><span class="comment"> * parameters needed. To aid the user we introduce &#123;<span class="doctag">@link</span> Builder&#125; class. &#123;<span class="doctag">@link</span> Hero.Builder&#125; takes</span></span><br><span class="line"><span class="comment"> * the minimum parameters to build &#123;<span class="doctag">@link</span> Hero&#125; object in its constructor. After that additional</span></span><br><span class="line"><span class="comment"> * configuration for the &#123;<span class="doctag">@link</span> Hero&#125; object can be done using the fluent &#123;<span class="doctag">@link</span> Builder&#125; interface.</span></span><br><span class="line"><span class="comment"> * When configuration is ready the build method is called to receive the final &#123;<span class="doctag">@link</span> Hero&#125; object.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(App<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Program entry point.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> args command line args</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mage = <span class="keyword">new</span> Hero.Builder(Profession.MAGE, <span class="string">"Riobard"</span>)</span><br><span class="line">        .withHairColor(HairColor.BLACK)</span><br><span class="line">        .withWeapon(Weapon.DAGGER)</span><br><span class="line">        .build();</span><br><span class="line">    LOGGER.info(mage.toString());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> warrior = <span class="keyword">new</span> Hero.Builder(Profession.WARRIOR, <span class="string">"Amberjill"</span>)</span><br><span class="line">        .withHairColor(HairColor.BLOND)</span><br><span class="line">        .withHairType(HairType.LONG_CURLY).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD)</span><br><span class="line">        .build();</span><br><span class="line">    LOGGER.info(warrior.toString());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> thief = <span class="keyword">new</span> Hero.Builder(Profession.THIEF, <span class="string">"Desmond"</span>)</span><br><span class="line">        .withHairType(HairType.BALD)</span><br><span class="line">        .withWeapon(Weapon.BOW)</span><br><span class="line">        .build();</span><br><span class="line">    LOGGER.info(thief.toString());</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
        <category>创建型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>责任链模式</title>
    <url>/design-pattern/chain/</url>
    <content><![CDATA[<h1 id="责任链模式UML类图"><a href="#责任链模式UML类图" class="headerlink" title="责任链模式UML类图"></a>责任链模式UML类图</h1><p><img src="../../images/plantuml/chain.urm.png" alt="责任链模式UML类图"></p>
<a id="more"></a>
<h1 id="责任链模式java实现"><a href="#责任链模式java实现" class="headerlink" title="责任链模式java实现"></a>责任链模式java实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RequestHandler.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(RequestHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> RequestHandler next;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">RequestHandler</span><span class="params">(RequestHandler next)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.next = next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Request handler.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request req)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (next != <span class="keyword">null</span>) &#123;</span><br><span class="line">      next.handleRequest(req);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">printHandling</span><span class="params">(Request req)</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"&#123;&#125; handling request \"&#123;&#125;\""</span>, <span class="keyword">this</span>, req);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OrcCommander.</span></span><br><span class="line"><span class="comment"> 指挥官</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrcCommander</span> <span class="keyword">extends</span> <span class="title">RequestHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">OrcCommander</span><span class="params">(RequestHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(handler);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request req)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//防御城堡</span></span><br><span class="line">    <span class="keyword">if</span> (RequestType.DEFEND_CASTLE == req.getRequestType()) &#123;</span><br><span class="line">      printHandling(req);</span><br><span class="line">      req.markHandled();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">super</span>.handleRequest(req);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Orc commander"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OrcOfficer.</span></span><br><span class="line"><span class="comment"> 官</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrcOfficer</span> <span class="keyword">extends</span> <span class="title">RequestHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">OrcOfficer</span><span class="params">(RequestHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(handler);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request req)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//刑讯犯</span></span><br><span class="line">    <span class="keyword">if</span> (RequestType.TORTURE_PRISONER == req.getRequestType()) &#123;</span><br><span class="line">      printHandling(req);</span><br><span class="line">      req.markHandled();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">super</span>.handleRequest(req);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Orc officer"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OrcSoldier.</span></span><br><span class="line"><span class="comment"> 士兵</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrcSoldier</span> <span class="keyword">extends</span> <span class="title">RequestHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">OrcSoldier</span><span class="params">(RequestHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(handler);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request req)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//征税</span></span><br><span class="line">    <span class="keyword">if</span> (RequestType.COLLECT_TAX == req.getRequestType()) &#123;</span><br><span class="line">      printHandling(req);</span><br><span class="line">      req.markHandled();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">super</span>.handleRequest(req);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Orc soldier"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OrcKing makes requests that are handled by the chain.</span></span><br><span class="line"><span class="comment"> 王</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrcKing</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> RequestHandler chain;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">OrcKing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    buildChain();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildChain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    chain = <span class="keyword">new</span> OrcCommander(<span class="keyword">new</span> OrcOfficer(<span class="keyword">new</span> OrcSoldier(<span class="keyword">null</span>)));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeRequest</span><span class="params">(Request req)</span> </span>&#123;</span><br><span class="line">    chain.handleRequest(req);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RequestType enumeration.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> RequestType &#123;</span><br><span class="line"></span><br><span class="line">  DEFEND_CASTLE, TORTURE_PRISONER, COLLECT_TAX</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Request.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The type of this request, used by each item in the chain to see if they should or can handle</span></span><br><span class="line"><span class="comment">   * this particular request.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> RequestType requestType;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * A description of the request.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String requestDescription;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Indicates if the request is handled or not. A request can only switch state from unhandled to</span></span><br><span class="line"><span class="comment">   * handled, there's no way to 'unhandle' a request.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> handled;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Create a new request of the given type and accompanied description.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> requestType        The type of request</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> requestDescription The description of the request</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Request</span><span class="params">(<span class="keyword">final</span> RequestType requestType, <span class="keyword">final</span> String requestDescription)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.requestType = Objects.requireNonNull(requestType);</span><br><span class="line">    <span class="keyword">this</span>.requestDescription = Objects.requireNonNull(requestDescription);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Get a description of the request.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> A human readable description of the request</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getRequestDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> requestDescription;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Get the type of this request, used by each person in the chain of command to see if they should</span></span><br><span class="line"><span class="comment">   * or can handle this particular request.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> The request type</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> RequestType <span class="title">getRequestType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> requestType;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Mark the request as handled.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">markHandled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.handled = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Indicates if this request is handled or not.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; when the request is handled, &lt;tt&gt;false&lt;/tt&gt; if not</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHandled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.handled;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getRequestDescription();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Chain of Responsibility pattern is a design pattern consisting of command objects and a</span></span><br><span class="line"><span class="comment"> * series of processing objects. Each processing object contains logic that defines the types of</span></span><br><span class="line"><span class="comment"> * command objects that it can handle; the rest are passed to the next processing object in the</span></span><br><span class="line"><span class="comment"> * chain. A mechanism also exists for adding new processing objects to the end of this chain.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;In this example we organize the request handlers (&#123;<span class="doctag">@link</span> RequestHandler&#125;) into a chain where</span></span><br><span class="line"><span class="comment"> * each handler has a chance to act on the request on its turn. Here the king (&#123;<span class="doctag">@link</span> OrcKing&#125;)</span></span><br><span class="line"><span class="comment"> * makes requests and the military orcs (&#123;<span class="doctag">@link</span> OrcCommander&#125;, &#123;<span class="doctag">@link</span> OrcOfficer&#125;, &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * OrcSoldier&#125;) form the handler chain.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Program entry point.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> args command line args</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> king = <span class="keyword">new</span> OrcKing();</span><br><span class="line">    king.makeRequest(<span class="keyword">new</span> Request(RequestType.DEFEND_CASTLE, <span class="string">"defend castle"</span>));</span><br><span class="line">    king.makeRequest(<span class="keyword">new</span> Request(RequestType.TORTURE_PRISONER, <span class="string">"torture prisoner"</span>));</span><br><span class="line">    king.makeRequest(<span class="keyword">new</span> Request(RequestType.COLLECT_TAX, <span class="string">"collect tax"</span>));</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="极客时间"><a href="#极客时间" class="headerlink" title="极客时间"></a>极客时间</h1><h2 id="实际应用案例"><a href="#实际应用案例" class="headerlink" title="实际应用案例"></a>实际应用案例</h2><ul>
<li>Servlet Filter</li>
<li>Spring Interceptor</li>
<li>Dubbo Filter</li>
<li>Netty ChannelPipeline</li>
</ul>
<h1 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h1><ul>
<li>敏感词过滤</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>行为型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>组合模式</title>
    <url>/design-pattern/composite/</url>
    <content><![CDATA[<h1 id="组合设计模式UML类图"><a href="#组合设计模式UML类图" class="headerlink" title="组合设计模式UML类图"></a>组合设计模式UML类图</h1><p><img src="../../images/plantuml/composite.urm.png" alt="组合设计模式UML类图"></p>
<a id="more"></a>
<h1 id="组合设计模式java代码实现"><a href="#组合设计模式java代码实现" class="headerlink" title="组合设计模式java代码实现"></a>组合设计模式java代码实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Word.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Word</span> <span class="keyword">extends</span> <span class="title">LetterComposite</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Constructor.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Word</span><span class="params">(List&lt;Letter&gt; letters)</span> </span>&#123;</span><br><span class="line">    letters.forEach(<span class="keyword">this</span>::add);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Constructor.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> letters to include</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Word</span><span class="params">(<span class="keyword">char</span>... letters)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> letter : letters) &#123;</span><br><span class="line">      <span class="keyword">this</span>.add(<span class="keyword">new</span> Letter(letter));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">printThisBefore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.print(<span class="string">" "</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sentence.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sentence</span> <span class="keyword">extends</span> <span class="title">LetterComposite</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Constructor.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Sentence</span><span class="params">(List&lt;Word&gt; words)</span> </span>&#123;</span><br><span class="line">    words.forEach(<span class="keyword">this</span>::add);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">printThisAfter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.print(<span class="string">"."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Letter.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Letter</span> <span class="keyword">extends</span> <span class="title">LetterComposite</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">char</span> character;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Letter</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.character = c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">printThisBefore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.print(character);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Composite interface.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LetterComposite</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> List&lt;LetterComposite&gt; children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(LetterComposite letter)</span> </span>&#123;</span><br><span class="line">    children.add(letter);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> children.size();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">printThisBefore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">printThisAfter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Print.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    printThisBefore();</span><br><span class="line">    children.forEach(LetterComposite::print);</span><br><span class="line">    printThisAfter();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Messenger.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Messenger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">LetterComposite <span class="title">messageFromOrcs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> words = List.of(</span><br><span class="line">        <span class="keyword">new</span> Word(<span class="string">'W'</span>, <span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'r'</span>, <span class="string">'e'</span>),</span><br><span class="line">        <span class="keyword">new</span> Word(<span class="string">'t'</span>, <span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'r'</span>, <span class="string">'e'</span>),</span><br><span class="line">        <span class="keyword">new</span> Word(<span class="string">'i'</span>, <span class="string">'s'</span>),</span><br><span class="line">        <span class="keyword">new</span> Word(<span class="string">'a'</span>),</span><br><span class="line">        <span class="keyword">new</span> Word(<span class="string">'w'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'p'</span>),</span><br><span class="line">        <span class="keyword">new</span> Word(<span class="string">'t'</span>, <span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'r'</span>, <span class="string">'e'</span>),</span><br><span class="line">        <span class="keyword">new</span> Word(<span class="string">'i'</span>, <span class="string">'s'</span>),</span><br><span class="line">        <span class="keyword">new</span> Word(<span class="string">'a'</span>),</span><br><span class="line">        <span class="keyword">new</span> Word(<span class="string">'w'</span>, <span class="string">'a'</span>, <span class="string">'y'</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Sentence(words);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">LetterComposite <span class="title">messageFromElves</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> words = List.of(</span><br><span class="line">        <span class="keyword">new</span> Word(<span class="string">'M'</span>, <span class="string">'u'</span>, <span class="string">'c'</span>, <span class="string">'h'</span>),</span><br><span class="line">        <span class="keyword">new</span> Word(<span class="string">'w'</span>, <span class="string">'i'</span>, <span class="string">'n'</span>, <span class="string">'d'</span>),</span><br><span class="line">        <span class="keyword">new</span> Word(<span class="string">'p'</span>, <span class="string">'o'</span>, <span class="string">'u'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>),</span><br><span class="line">        <span class="keyword">new</span> Word(<span class="string">'f'</span>, <span class="string">'r'</span>, <span class="string">'o'</span>, <span class="string">'m'</span>),</span><br><span class="line">        <span class="keyword">new</span> Word(<span class="string">'y'</span>, <span class="string">'o'</span>, <span class="string">'u'</span>, <span class="string">'r'</span>),</span><br><span class="line">        <span class="keyword">new</span> Word(<span class="string">'m'</span>, <span class="string">'o'</span>, <span class="string">'u'</span>, <span class="string">'t'</span>, <span class="string">'h'</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Sentence(words);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Composite pattern is a partitioning design pattern. The Composite pattern describes that a</span></span><br><span class="line"><span class="comment"> * group of objects is to be treated in the same way as a single instance of an object. The intent</span></span><br><span class="line"><span class="comment"> * of a composite is to "compose" objects into tree structures to represent part-whole hierarchies.</span></span><br><span class="line"><span class="comment"> * Implementing the Composite pattern lets clients treat individual objects and compositions</span></span><br><span class="line"><span class="comment"> * uniformly.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;In this example we have sentences composed of words composed of letters. All of the objects</span></span><br><span class="line"><span class="comment"> * can be treated through the same interface (&#123;<span class="doctag">@link</span> LetterComposite&#125;).</span></span><br><span class="line"><span class="comment"> Composite模式是一种分区设计模式。 复合模式描述了要以与对象的单个实例相同的方式对待一组对象。 </span></span><br><span class="line"><span class="comment"> 组合的目的是将对象“组合”为树状结构，以表示整个部分的层次结构。实施“组合”模式可使客户统一对待各个对象和组合。</span></span><br><span class="line"><span class="comment">&lt;p&gt;在此示例中，我们具有由字母组成的单词组成的句子。 所有对象可以通过相同的界面（&#123;<span class="doctag">@link</span> LetterComposite&#125;）进行处理。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(App<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Program entry point.</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> args command line args</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"Message from the orcs: "</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> orcMessage = <span class="keyword">new</span> Messenger().messageFromOrcs();</span><br><span class="line">    orcMessage.print();</span><br><span class="line"></span><br><span class="line">    LOGGER.info(<span class="string">"\nMessage from the elves: "</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> elfMessage = <span class="keyword">new</span> Messenger().messageFromElves();</span><br><span class="line">    elfMessage.print();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><h2 id="java-awt中的组合模式"><a href="#java-awt中的组合模式" class="headerlink" title="java.awt中的组合模式"></a>java.awt中的组合模式</h2><p>Java GUI分两种：<br>AWT(Abstract Window Toolkit)：抽象窗口工具集，是第一代的Java GUI组件。绘制依赖于底层的操作系统。基本的AWT库处理用户界面元素的方法是把这些元素的创建和行为委托给每个目标平台上（Windows、 Unix、 Macintosh等）的本地GUI工具进行处理。<br>Swing，不依赖于底层细节，是轻量级的组件。现在多是基于Swing来开发。<br>我们来看一个AWT的简单示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFrame</span> <span class="keyword">extends</span> <span class="title">Frame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyFrame</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(title);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyFrame frame = <span class="keyword">new</span> MyFrame(<span class="string">"这是一个 Frame"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义三个构件，添加到Frame中去</span></span><br><span class="line">        Button button = <span class="keyword">new</span> Button(<span class="string">"按钮 A"</span>);</span><br><span class="line">        Label label = <span class="keyword">new</span> Label(<span class="string">"这是一个 AWT Label!"</span>);</span><br><span class="line">        TextField textField = <span class="keyword">new</span> TextField(<span class="string">"这是一个 AWT TextField!"</span>);</span><br><span class="line"></span><br><span class="line">        frame.add(button, BorderLayout.EAST);</span><br><span class="line">        frame.add(label, BorderLayout.SOUTH);</span><br><span class="line">        frame.add(textField, BorderLayout.NORTH);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义一个 Panel，在Panel中添加三个构件，然后再把Panel添加到Frame中去</span></span><br><span class="line">        Panel panel = <span class="keyword">new</span> Panel();</span><br><span class="line">        panel.setBackground(Color.pink);</span><br><span class="line"></span><br><span class="line">        Label lable1 = <span class="keyword">new</span> Label(<span class="string">"用户名"</span>);</span><br><span class="line">        TextField textField1 = <span class="keyword">new</span> TextField(<span class="string">"请输入用户名："</span>, <span class="number">20</span>);</span><br><span class="line">        Button button1 = <span class="keyword">new</span> Button(<span class="string">"确定"</span>);</span><br><span class="line">        panel.add(lable1);</span><br><span class="line">        panel.add(textField1);</span><br><span class="line">        panel.add(button1);</span><br><span class="line"></span><br><span class="line">        frame.add(panel, BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置Frame的属性</span></span><br><span class="line">        frame.setSize(<span class="number">500</span>, <span class="number">300</span>);</span><br><span class="line">        frame.setBackground(Color.orange);</span><br><span class="line">        <span class="comment">// 设置点击关闭事件</span></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行后窗体显示如下<br><img src="../../images/swing.png" alt="swing"><br>我们在Frame容器中添加了三个不同的构件 Button、Label、TextField，还添加了一个 Panel 容器，Panel 容器中又添加了 Button、Label、TextField 三个构件，为什么容器 Frame 和 Panel 可以添加类型不同的构件和容器呢？<br>我们先来看下AWT Component的类图<br><img src="../../images/component.png" alt="component"><br>GUI组件根据作用可以分为两种：基本组件和容器组件。<br>基本组件又称构件，诸如按钮、文本框之类的图形界面元素。<br>容器是一种比较特殊的组件，可以容纳其他组件，容器如窗口、对话框等。所有的容器类都是 java.awt.Container 的直接或间接子类<br>容器父类 Container 的部分代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Container</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The components in this container.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #add</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #getComponents</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> java.util.List&lt;Component&gt; component = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Component <span class="title">add</span><span class="params">(Component comp)</span> </span>&#123;</span><br><span class="line">        addImpl(comp, <span class="keyword">null</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> comp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>容器父类 Container 内部定义了一个集合用于存储 Component 对象，而容器组件 Container 和 基本组件如 Button、Label、TextField 等都是 Component 的子类，所以可以很清楚的看到这里应用了组合模式<br>Component 类中封装了组件通用的方法和属性，如图形的组件对象、大小、显示位置、前景色和背景色、边界、可见性等，因此许多组件类也就继承了 Component 类的成员方法和成员变量，相应的成员方法包括：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getComponentAt(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span><br><span class="line">　　　getFont()</span><br><span class="line">　　　getForeground()</span><br><span class="line">　　　getName()</span><br><span class="line">　　　getSize()</span><br><span class="line">　　　paint(Graphics g)</span><br><span class="line">　　　repaint()</span><br><span class="line">　　　update()</span><br><span class="line">　　　setVisible(<span class="keyword">boolean</span> b)</span><br><span class="line">　　　setSize(Dimension d)</span><br><span class="line">　　　setName(String name)</span><br></pre></td></tr></table></figure>
<h2 id="Java集合中的组合模式"><a href="#Java集合中的组合模式" class="headerlink" title="Java集合中的组合模式"></a>Java集合中的组合模式</h2><p>HashMap 提供 putAll 的方法，可以将另一个 Map 对象放入自己的存储空间中，如果有相同的 key 值则会覆盖之前的 key 值所对应的 value 值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Integer&gt; map1 = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">        map1.put(<span class="string">"aa"</span>, <span class="number">1</span>);</span><br><span class="line">        map1.put(<span class="string">"bb"</span>, <span class="number">2</span>);</span><br><span class="line">        map1.put(<span class="string">"cc"</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"map1: "</span> + map1);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Integer&gt; map2 = <span class="keyword">new</span> LinkedMap();</span><br><span class="line">        map2.put(<span class="string">"cc"</span>, <span class="number">4</span>);</span><br><span class="line">        map2.put(<span class="string">"dd"</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">"map2: "</span> + map2);</span><br><span class="line"></span><br><span class="line">        map1.putAll(map2);</span><br><span class="line">        System.out.println(<span class="string">"map1.putAll(map2): "</span> + map1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map1: &#123;aa=<span class="number">1</span>, bb=<span class="number">2</span>, cc=<span class="number">3</span>&#125;</span><br><span class="line">map2: &#123;cc=<span class="number">4</span>, dd=<span class="number">5</span>&#125;</span><br><span class="line">map1.putAll(map2): &#123;aa=<span class="number">1</span>, bb=<span class="number">2</span>, cc=<span class="number">4</span>, dd=<span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure>
<p>查看 putAll 源码<br>putAll 接收的参数为父类 Map 类型，所以 HashMap 是一个容器类，Map 的子类为叶子类，当然如果 Map 的其他子类也实现了 putAll 方法，那么它们都既是容器类，又都是叶子类<br>同理，ArrayList 中的 addAll(Collection&lt;? extends E&gt; c) 方法也是一个组合模式的应用，在此不做探讨</p>
<h2 id="Mybatis-SqlNode中的组合模式"><a href="#Mybatis-SqlNode中的组合模式" class="headerlink" title="Mybatis SqlNode中的组合模式"></a>Mybatis SqlNode中的组合模式</h2><p>MyBatis 的强大特性之一便是它的动态SQL，其通过 if, choose, when, otherwise, trim, where, set, foreach 标签，可组合成非常灵活的SQL语句，从而提高开发人员的效率。<br>来几个官方示例：<br>动态SQL – IF</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogLike"</span>  <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG WHERE state = ‘ACTIVE’ </span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">    AND title like #&#123;title&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null and author.name != null"</span>&gt;</span></span><br><span class="line">    AND author_name like #&#123;author.name&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>动态SQL – choose, when, otherwise</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogLike"</span>  <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG WHERE state = ‘ACTIVE’</span><br><span class="line">  <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">      AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"author != null and author.name != null"</span>&gt;</span></span><br><span class="line">      AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">      AND featured = 1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>动态SQL – where</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogLike"</span>  <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG </span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"state != null"</span>&gt;</span></span><br><span class="line">         state = #&#123;state&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">        AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null and author.name != null"</span>&gt;</span></span><br><span class="line">        AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>动态SQL – foreach</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectPostIn"</span> <span class="attr">resultType</span>=<span class="string">"domain.blog.Post"</span>&gt;</span></span><br><span class="line">  SELECT * FROM POST P WHERE ID in</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">collection</span>=<span class="string">"list"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">        #&#123;item&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Mybatis在处理动态SQL节点时，应用到了组合设计模式，Mybatis会将映射配置文件中定义的动态SQL节点、文本节点等解析成对应的 SqlNode 实现，并形成树形结构。<br>SQLNode 的类图如下所示<br><img src="../../images/sqlnode.png" alt="sqlnode"><br>需要先了解 DynamicContext 类的作用：主要用于记录解析动态SQL语句之后产生的SQL语句片段，可以认为它是一个用于记录动态SQL语句解析结果的容器<br>抽象构件为 SqlNode 接口，源码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SqlNode</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(DynamicContext context)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>apply 是 SQLNode 接口中定义的唯一方法，该方法会根据用户传入的实参，参数解析该SQLNode所记录的动态SQL节点，并调用 DynamicContext.appendSql() 方法将解析后的SQL片段追加到 DynamicContext.sqlBuilder 中保存，当SQL节点下所有的 SqlNode 完成解析后，我们就可以从 DynamicContext 中获取一条动态生产的、完整的SQL语句<br>然后来看 MixedSqlNode 类的源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MixedSqlNode</span> <span class="keyword">implements</span> <span class="title">SqlNode</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> List&lt;SqlNode&gt; contents;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MixedSqlNode</span><span class="params">(List&lt;SqlNode&gt; contents)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.contents = contents;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(DynamicContext context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (SqlNode sqlNode : contents) &#123;</span><br><span class="line">      sqlNode.apply(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>MixedSqlNode 维护了一个 List<SqlNode> 类型的列表，用于存储 SqlNode 对象，apply 方法通过 for循环 遍历 contents 并调用其中对象的 apply 方法，这里跟我们的示例中的 Folder 类中的 print 方法非常类似，很明显 MixedSqlNode 扮演了容器构件角色<br>对于其他SqlNode子类的功能，稍微概括如下：</p>
<ul>
<li>TextSqlNode：表示包含 ${} 占位符的动态SQL节点，其 apply 方法会使用 GenericTokenParser 解析 ${} 占位符，并直接替换成用户给定的实际参数值</li>
<li>IfSqlNode：对应的是动态SQL节点 <If> 节点，其 apply 方法首先通过 ExpressionEvaluator.evaluateBoolean() 方法检测其 test 表达式是否为 true，然后根据 test 表达式的结果，决定是否执行其子节点的 apply() 方法</li>
<li>TrimSqlNode ：会根据子节点的解析结果，添加或删除相应的前缀或后缀。</li>
<li>WhereSqlNode 和 SetSqlNode 都继承了 TrimSqlNode</li>
<li>ForeachSqlNode：对应 <foreach> 标签，对集合进行迭代</li>
<li>动态SQL中的 <choose>、<when>、<otherwise> 分别解析成 ChooseSqlNode、IfSqlNode、MixedSqlNode</li>
</ul>
<p>综上，SqlNode 接口有多个实现类，每个实现类对应一个动态SQL节点，其中 SqlNode 扮演抽象构件角色，MixedSqlNode 扮演容器构件角色，其它一般是叶子构件角色</p>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>结构型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>命令模式</title>
    <url>/design-pattern/command/</url>
    <content><![CDATA[<h1 id="命令模式UML类图"><a href="#命令模式UML类图" class="headerlink" title="命令模式UML类图"></a>命令模式UML类图</h1><p><img src="../../images/plantuml/command.urm.png" alt="命令模式UML类图"></p>
<a id="more"></a>
<h1 id="命令模式java实现"><a href="#命令模式java实现" class="headerlink" title="命令模式java实现"></a>命令模式java实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Enumeration for target size.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Size &#123;</span><br><span class="line"></span><br><span class="line">  SMALL(<span class="string">"small"</span>), NORMAL(<span class="string">"normal"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">  Size(String title) &#123;</span><br><span class="line">    <span class="keyword">this</span>.title = title;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> title;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Enumeration for target visibility.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Visibility &#123;</span><br><span class="line"></span><br><span class="line">  VISIBLE(<span class="string">"visible"</span>), INVISIBLE(<span class="string">"invisible"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">  Visibility(String title) &#123;</span><br><span class="line">    <span class="keyword">this</span>.title = title;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> title;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface for Commands.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Target target)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">redo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ShrinkSpell is a concrete command.</span></span><br><span class="line"><span class="comment"> 收缩法术是一个具体的命令。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShrinkSpell</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Size oldSize;</span><br><span class="line">  <span class="keyword">private</span> Target target;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Target target)</span> </span>&#123;</span><br><span class="line">    oldSize = target.getSize();</span><br><span class="line">    target.setSize(Size.SMALL);</span><br><span class="line">    <span class="keyword">this</span>.target = target;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (oldSize != <span class="keyword">null</span> &amp;&amp; target != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> temp = target.getSize();</span><br><span class="line">      target.setSize(oldSize);</span><br><span class="line">      oldSize = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">redo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    undo();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//收缩法术</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Shrink spell"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * InvisibilitySpell is a concrete command.</span></span><br><span class="line"><span class="comment"> 隐身法术是一个具体的命令。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvisibilitySpell</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Target target;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Target target)</span> </span>&#123;</span><br><span class="line">    target.setVisibility(Visibility.INVISIBLE);</span><br><span class="line">    <span class="keyword">this</span>.target = target;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">      target.setVisibility(Visibility.VISIBLE);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">redo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">      target.setVisibility(Visibility.INVISIBLE);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//隐形法术</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Invisibility spell"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Base class for spell targets.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Target<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Size size;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Visibility visibility;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Size <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSize</span><span class="params">(Size size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.size = size;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Visibility <span class="title">getVisibility</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> visibility;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVisibility</span><span class="params">(Visibility visibility)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.visibility = visibility;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Print status.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"&#123;&#125;, [size=&#123;&#125;] [visibility=&#123;&#125;]"</span>, <span class="keyword">this</span>, getSize(), getVisibility());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Goblin is the target of the spells.</span></span><br><span class="line"><span class="comment"> 地精是法术的目标。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Goblin</span> <span class="keyword">extends</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Goblin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    setSize(Size.NORMAL);</span><br><span class="line">    setVisibility(Visibility.VISIBLE);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Goblin"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Wizard is the invoker of the commands.</span></span><br><span class="line"><span class="comment"> 向导是命令的调用者。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wizard</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Wizard<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Deque&lt;Command&gt; undoStack = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">  <span class="keyword">private</span> Deque&lt;Command&gt; redoStack = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Wizard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// comment to ignore sonar issue: LEVEL critical</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Cast spell.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">castSpell</span><span class="params">(Command command, Target target)</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"&#123;&#125; casts &#123;&#125; at &#123;&#125;"</span>, <span class="keyword">this</span>, command, target);</span><br><span class="line">    command.execute(target);</span><br><span class="line">    undoStack.offerLast(command);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Undo last spell.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undoLastSpell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!undoStack.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">var</span> previousSpell = undoStack.pollLast();</span><br><span class="line">      redoStack.offerLast(previousSpell);</span><br><span class="line">      LOGGER.info(<span class="string">"&#123;&#125; undoes &#123;&#125;"</span>, <span class="keyword">this</span>, previousSpell);</span><br><span class="line">      previousSpell.undo();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Redo last spell.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">redoLastSpell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!redoStack.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">var</span> previousSpell = redoStack.pollLast();</span><br><span class="line">      undoStack.offerLast(previousSpell);</span><br><span class="line">      LOGGER.info(<span class="string">"&#123;&#125; redoes &#123;&#125;"</span>, <span class="keyword">this</span>, previousSpell);</span><br><span class="line">      previousSpell.redo();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Wizard"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Command pattern is a behavioral design pattern in which an object is used to encapsulate all</span></span><br><span class="line"><span class="comment"> * information needed to perform an action or trigger an event at a later time. This information</span></span><br><span class="line"><span class="comment"> * includes the method name, the object that owns the method and values for the method parameters.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Four terms always associated with the command pattern are command, receiver, invoker and</span></span><br><span class="line"><span class="comment"> * client. A command object (spell) knows about the receiver (target) and invokes a method of the</span></span><br><span class="line"><span class="comment"> * receiver. Values for parameters of the receiver method are stored in the command. The receiver</span></span><br><span class="line"><span class="comment"> * then does the work. An invoker object (wizard) knows how to execute a command, and optionally</span></span><br><span class="line"><span class="comment"> * does bookkeeping about the command execution. The invoker does not know anything about a concrete</span></span><br><span class="line"><span class="comment"> * command, it knows only about command interface. Both an invoker object and several command</span></span><br><span class="line"><span class="comment"> * objects are held by a client object (app). The client decides which commands to execute at which</span></span><br><span class="line"><span class="comment"> * points. To execute a command, it passes the command object to the invoker object.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;In other words, in this example the wizard casts spells on the goblin. The wizard keeps track</span></span><br><span class="line"><span class="comment"> * of the previous spells cast, so it is easy to undo them. In addition, the wizard keeps track of</span></span><br><span class="line"><span class="comment"> * the spells undone, so they can be redone.</span></span><br><span class="line"><span class="comment"> 命令模式是一种行为设计模式，其中一个对象用于封装以后执行动作或触发事件所需的所有信息。该信息包括方法名称，拥有方法的对象和方法参数的值。</span></span><br><span class="line"><span class="comment">&lt;p&gt;始终与命令模式关联的四个术语是命令，接收者，调用者和客户端。命令对象（咒语）了解接收者（目标）并调用该命令的方法</span></span><br><span class="line"><span class="comment">接收器。接收器方法的参数值存储在命令中。接收者然后完成工作。调用程序对象（向导）知道如何执行命令，并且可以选择对命令执行进行簿记。调用者对具体命令一无所知，只知道命令界面。一个调用者对象和几个命令</span></span><br><span class="line"><span class="comment">对象由客户端对象（应用程序）保存。客户端决定在哪些点执行哪些命令。要执行命令，它将命令对象传递给调用者对象。</span></span><br><span class="line"><span class="comment">&lt;p&gt;换句话说，在此示例中，向导在妖精上施放咒语。该向导会跟踪先前施放的咒语，因此很容易撤消它们。另外，向导会跟踪未撤消的咒语，因此可以重做。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Program entry point.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> args command line args</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> wizard = <span class="keyword">new</span> Wizard();</span><br><span class="line">    <span class="keyword">var</span> goblin = <span class="keyword">new</span> Goblin();</span><br><span class="line"></span><br><span class="line">    goblin.printStatus();</span><br><span class="line"></span><br><span class="line">    wizard.castSpell(<span class="keyword">new</span> ShrinkSpell(), goblin);</span><br><span class="line">    goblin.printStatus();</span><br><span class="line"></span><br><span class="line">    wizard.castSpell(<span class="keyword">new</span> InvisibilitySpell(), goblin);</span><br><span class="line">    goblin.printStatus();</span><br><span class="line"></span><br><span class="line">    wizard.undoLastSpell();</span><br><span class="line">    goblin.printStatus();</span><br><span class="line"></span><br><span class="line">    wizard.undoLastSpell();</span><br><span class="line">    goblin.printStatus();</span><br><span class="line"></span><br><span class="line">    wizard.redoLastSpell();</span><br><span class="line">    goblin.printStatus();</span><br><span class="line"></span><br><span class="line">    wizard.redoLastSpell();</span><br><span class="line">    goblin.printStatus();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><h2 id="jdk线程池"><a href="#jdk线程池" class="headerlink" title="jdk线程池"></a>jdk线程池</h2><p><img src="../../images/thread-pool-command.png" alt="23种设计模式"></p>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>行为型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>桥接模式</title>
    <url>/design-pattern/bridge/</url>
    <content><![CDATA[<h1 id="桥接模式UML类图"><a href="#桥接模式UML类图" class="headerlink" title="桥接模式UML类图"></a>桥接模式UML类图</h1><p><img src="../../images/plantuml/bridge.urm.png" alt="桥接模式UML类图"></p>
<a id="more"></a>
<h1 id="桥接模式java实现"><a href="#桥接模式java实现" class="headerlink" title="桥接模式java实现"></a>桥接模式java实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Enchantment.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Enchantment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onActivate</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">apply</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onDeactivate</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Weapon.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">wield</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">swing</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">unwield</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Enchantment <span class="title">getEnchantment</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sword.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sword</span> <span class="keyword">implements</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Sword<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Enchantment enchantment;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Sword</span><span class="params">(Enchantment enchantment)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.enchantment = enchantment;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wield</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//持剑。</span></span><br><span class="line">    LOGGER.info(<span class="string">"The sword is wielded."</span>);</span><br><span class="line">    enchantment.onActivate();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//剑摆动。</span></span><br><span class="line">    LOGGER.info(<span class="string">"The sword is swinged."</span>);</span><br><span class="line">    enchantment.apply();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unwield</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//剑未使用。</span></span><br><span class="line">    LOGGER.info(<span class="string">"The sword is unwielded."</span>);</span><br><span class="line">    enchantment.onDeactivate();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Enchantment <span class="title">getEnchantment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> enchantment;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hammer.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hammer</span> <span class="keyword">implements</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Hammer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Enchantment enchantment;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Hammer</span><span class="params">(Enchantment enchantment)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.enchantment = enchantment;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wield</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//锤子被挥舞了。</span></span><br><span class="line">    LOGGER.info(<span class="string">"The hammer is wielded."</span>);</span><br><span class="line">    enchantment.onActivate();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//锤子摆动。</span></span><br><span class="line">    LOGGER.info(<span class="string">"The hammer is swinged."</span>);</span><br><span class="line">    enchantment.apply();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unwield</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//锤子没有挥舞。</span></span><br><span class="line">    LOGGER.info(<span class="string">"The hammer is unwielded."</span>);</span><br><span class="line">    enchantment.onDeactivate();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Enchantment <span class="title">getEnchantment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> enchantment;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SoulEatingEnchantment.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SoulEatingEnchantment</span> <span class="keyword">implements</span> <span class="title">Enchantment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(SoulEatingEnchantment<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//该物品散布嗜血的味道。</span></span><br><span class="line">    LOGGER.info(<span class="string">"The item spreads bloodlust."</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//该物品吞噬了敌人的灵魂。</span></span><br><span class="line">    LOGGER.info(<span class="string">"The item eats the soul of enemies."</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDeactivate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//嗜血慢慢消失。</span></span><br><span class="line">    LOGGER.info(<span class="string">"Bloodlust slowly disappears."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * FlyingEnchantment.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyingEnchantment</span> <span class="keyword">implements</span> <span class="title">Enchantment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(FlyingEnchantment<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//该项目开始微弱地发光。</span></span><br><span class="line">    LOGGER.info(<span class="string">"The item begins to glow faintly."</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//该物品飞走并击中了敌人，最后又回到了主人的手上。</span></span><br><span class="line">    LOGGER.info(<span class="string">"The item flies and strikes the enemies finally returning to owner's hand."</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDeactivate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//该项目的辉光消失。</span></span><br><span class="line">    LOGGER.info(<span class="string">"The item's glow fades."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Composition over inheritance. The Bridge pattern can also be thought of as two layers of</span></span><br><span class="line"><span class="comment"> * abstraction. With Bridge, you can decouple an abstraction from its implementation so that the two</span></span><br><span class="line"><span class="comment"> * can vary independently.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;In Bridge pattern both abstraction (&#123;<span class="doctag">@link</span> Weapon&#125;) and implementation ( &#123;<span class="doctag">@link</span> Enchantment&#125;)</span></span><br><span class="line"><span class="comment"> * have their own class hierarchies. The interface of the implementations can be changed without</span></span><br><span class="line"><span class="comment"> * affecting the clients.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;In this example we have two class hierarchies. One of weapons and another one of</span></span><br><span class="line"><span class="comment"> * enchantments. We can easily combine any weapon with any enchantment using composition instead of</span></span><br><span class="line"><span class="comment"> * creating deep class hierarchy.</span></span><br><span class="line"><span class="comment"> 组成超过继承。 桥接模式也可以被认为是两层抽象。 使用Bridge，您可以将抽象与其实现分离，以便两者</span></span><br><span class="line"><span class="comment">可以独立变化。</span></span><br><span class="line"><span class="comment">&lt;p&gt;在Bridge模式中，抽象（&#123;<span class="doctag">@link</span> Weapon&#125;）和实现（&#123;<span class="doctag">@link</span> Enchantment&#125;）都有自己的类层次结构。 实现的界面可以更改，而不会影响客户端。</span></span><br><span class="line"><span class="comment">&lt;p&gt;在此示例中，我们有两个类层次结构。 一种武器，另一种是结界。 我们可以使用合成轻松地将任何武器与任何结界结合起来，而无需创建深层次的等级体系。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(App<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Program entry point.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> args command line args</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//骑士收到一把附魔剑。</span></span><br><span class="line">    LOGGER.info(<span class="string">"The knight receives an enchanted sword."</span>);</span><br><span class="line">    <span class="keyword">var</span> enchantedSword = <span class="keyword">new</span> Sword(<span class="keyword">new</span> SoulEatingEnchantment());</span><br><span class="line">    enchantedSword.wield();</span><br><span class="line">    enchantedSword.swing();</span><br><span class="line">    enchantedSword.unwield();</span><br><span class="line">    <span class="comment">//女武神得到了一个附魔的锤子。</span></span><br><span class="line">    LOGGER.info(<span class="string">"The valkyrie receives an enchanted hammer."</span>);</span><br><span class="line">    <span class="keyword">var</span> hammer = <span class="keyword">new</span> Hammer(<span class="keyword">new</span> FlyingEnchantment());</span><br><span class="line">    hammer.wield();</span><br><span class="line">    hammer.swing();</span><br><span class="line">    hammer.unwield();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><h2 id="JDBC是桥接模式的典型实现。"><a href="#JDBC是桥接模式的典型实现。" class="headerlink" title="JDBC是桥接模式的典型实现。"></a>JDBC是桥接模式的典型实现。</h2><p>先看下类图：<br><img src="../../images/jdbc-bridge.png" alt="jdbc-bridge"><br>通常使用JDBC连接数据库时，会使用如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">"数据库类驱动器"</span>);</span><br><span class="line">Connection conn = DriverManager.getConnection(<span class="string">"数据库url"</span>, <span class="string">"用户名"</span>, <span class="string">"密码"</span>);</span><br><span class="line"><span class="comment">//.................</span></span><br></pre></td></tr></table></figure>
<p>针对不同的数据库，JDBC都可以通过java.sql.DriverManager类的静态方法getConnection(数据库url, 用户名, 密码)来获取数据库的连接。JDBC通过DriverManager对外提供了操作数据库的统一接口getConnection，通过该方法可以获取不同数据库的连接，并且通过Connection类提供的接口来进行数据的查询操作。</p>
<p>JDBC为不同的数据库操作提供了相同的接口，但是JDBC本身并没有针对每种数据库提供一套具体实现代码，而是通过接口java.sql.Driver的connect方法连接到了不同的数据库实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Driver</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Connection <span class="title">connect</span><span class="params">(String s, Properties properties)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">    <span class="comment">//其他方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在JDBC中，针对不同数据库提供的统一的操作接口通过java.sql.Driver（桥）连接到了不同的数据库实现。如连接mysql数据库。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mysql.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonRegisteringDriver</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">sql</span>.<span class="title">Driver</span> //对<span class="title">java</span>.<span class="title">sql</span>.<span class="title">Driver</span>接口提供了实现</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Connection <span class="title">connect</span><span class="params">(String url, Properties info)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> SQLException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//实现</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//其他方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Java在连接MySQL时需要使用mysql-connector-java.jar，mysql-connector-java.jar包提供了对MySQL数据库操作的具体实现，并通过接口Driver连接到了JDBC统一的api。<br>JDBC中桥接模式具体如何实现？<br>既然，针对不同的数据库，通过DriverManger.getConnection()可以获得相同的Connection接口，那先看DriverManager的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DriverManager</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> CopyOnWriteArrayList registeredDrivers = <span class="keyword">new</span> CopyOnWriteArrayList(); <span class="comment">//存放DriverInfo的链表</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">registerDriver</span><span class="params">(Driver driver)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> SQLException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(driver != <span class="keyword">null</span>)</span><br><span class="line">            registeredDrivers.addIfAbsent(<span class="keyword">new</span> DriverInfo(driver)); <span class="comment">//向链表中添加DriverInfo实例，DriverInfo封装了Driver</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        println((<span class="keyword">new</span> StringBuilder()).append(<span class="string">"registerDriver: "</span>).append(driver).toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">(String s, Properties properties, Class class1)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> SQLException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//.....</span></span><br><span class="line">        Iterator iterator = registeredDrivers.iterator(); <span class="comment">//遍历registeredDrivers表</span></span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!iterator.hasNext())</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            DriverInfo driverinfo = (DriverInfo)iterator.next();</span><br><span class="line">            <span class="keyword">if</span>(isDriverAllowed(driverinfo.driver, classloader))</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Connection connection = driverinfo.driver.connect(s, properties); <span class="comment">//调用Driver接口提供的connect方法来获取Connection对象</span></span><br><span class="line">                    <span class="keyword">if</span>(connection != <span class="keyword">null</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">return</span> connection;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span>(SQLException sqlexception1)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(sqlexception == <span class="keyword">null</span>)</span><br><span class="line">                        sqlexception = sqlexception1;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//其他方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从DriverManager.getConnection()源码可见，方法中遍历了包含DriverInfo实例的表registeredDrivers，通过表中实例driverinfo来获取封装的java.sql.Driver类型的实例，并调用java.sql.Driver接口的connect方法获取到Connection。注：DriverInfo是Driver的封装类。由DriverInfo源码可见。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DriverInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    DriverInfo(Driver driver1)</span><br><span class="line">    &#123;</span><br><span class="line">        driver = driver1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (obj <span class="keyword">instanceof</span> DriverInfo) &amp;&amp; driver == ((DriverInfo)obj).driver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> driver.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> StringBuilder()).append(<span class="string">"driver[className="</span>).append(driver).append(<span class="string">"]"</span>).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Driver driver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么，Driver实例是何时注入到DriverManager类的registeredDrivers中的呢？以mysql为例，在每次使用JDBC连接mysql时，都会有下面的调用：<br>Class.forName(“com.mysql.jdbc.Driver”);<br>该行代码通过反射加载了com.mysql.jdbc.Driver类（com.mysql.jdbc.Driver类在mysql-connector-java.jar中，而mysql-connector-java.jar是JDBC连接MySQL的jar包），查看com.mysql.jdbc.Driver类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mysql.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> <span class="keyword">extends</span> <span class="title">NonRegisteringDriver</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">sql</span>.<span class="title">Driver</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Driver</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> SQLException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(SQLException E)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Can't register driver!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在com.mysql.jdbc.Driver的源码中可以看到在加载com.mysql.jdbc.Driver类时，通过类中的静态域中的红色代码，会调用DriverManager的registerDriver方法将当前MySQL的驱动类实例注入到DriverManager的registeredDrivers中。</p>
<p>通过整个代码调用，展示了桥接模式在JDBC中是如何运用的。</p>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>结构型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>外观模式</title>
    <url>/design-pattern/facade/</url>
    <content><![CDATA[<h1 id="外观模式UML类图"><a href="#外观模式UML类图" class="headerlink" title="外观模式UML类图"></a>外观模式UML类图</h1><p><img src="../../images/plantuml/facade.urm.png" alt="外观模式UML类图"></p>
<a id="more"></a>
<h1 id="外观模式java实现"><a href="#外观模式java实现" class="headerlink" title="外观模式java实现"></a>外观模式java实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DwarvenMineWorker is one of the goldmine subsystems.</span></span><br><span class="line"><span class="comment"> DwarvenMineWorker(矮人矿工)是金矿子系统之一。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DwarvenMineWorker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(DwarvenMineWorker<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goToSleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"&#123;&#125; goes to sleep."</span>, name());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wakeUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"&#123;&#125; wakes up."</span>, name());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goHome</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"&#123;&#125; goes home."</span>, name());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goToMine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"&#123;&#125; goes to the mine."</span>, name());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">(Action action)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">      <span class="keyword">case</span> GO_TO_SLEEP:</span><br><span class="line">        goToSleep();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> WAKE_UP:</span><br><span class="line">        wakeUp();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> GO_HOME:</span><br><span class="line">        goHome();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> GO_TO_MINE:</span><br><span class="line">        goToMine();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> WORK:</span><br><span class="line">        work();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        LOGGER.info(<span class="string">"Undefined action"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Perform actions.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">(Action... actions)</span> </span>&#123;</span><br><span class="line">    Arrays.stream(actions).forEach(<span class="keyword">this</span>::action);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">enum</span> Action &#123;</span><br><span class="line">    GO_TO_SLEEP, WAKE_UP, GO_HOME, GO_TO_MINE, WORK</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DwarvenGoldDigger is one of the goldmine subsystems.</span></span><br><span class="line"><span class="comment"> DwarvenGoldDigger(矮人金矿)是金矿子系统之一。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DwarvenGoldDigger</span> <span class="keyword">extends</span> <span class="title">DwarvenMineWorker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(DwarvenGoldDigger<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//挖金。</span></span><br><span class="line">    LOGGER.info(<span class="string">"&#123;&#125; digs for gold."</span>, name());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//矮人淘金者</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Dwarf gold digger"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DwarvenTunnelDigger is one of the goldmine subsystems.</span></span><br><span class="line"><span class="comment"> DwarvenTunnelDigger(矮人隧道挖掘者)是金矿子系统之一。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DwarvenTunnelDigger</span> <span class="keyword">extends</span> <span class="title">DwarvenMineWorker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(DwarvenTunnelDigger<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创造另一个有希望的隧道</span></span><br><span class="line">    LOGGER.info(<span class="string">"&#123;&#125; creates another promising tunnel."</span>, name());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//矮人隧道挖掘机</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Dwarven tunnel digger"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DwarvenCartOperator is one of the goldmine subsystems.</span></span><br><span class="line"><span class="comment"> DwarvenCartOperator(矮人推车运营商)是金矿子系统之一。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DwarvenCartOperator</span> <span class="keyword">extends</span> <span class="title">DwarvenMineWorker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(DwarvenCartOperator<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将金块从矿山中移出</span></span><br><span class="line">    LOGGER.info(<span class="string">"&#123;&#125; moves gold chunks out of the mine."</span>, name());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//矮推车操作员</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Dwarf cart operator"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DwarvenGoldmineFacade provides a single interface through which users can operate the</span></span><br><span class="line"><span class="comment"> * subsystems.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This makes the goldmine easier to operate and cuts the dependencies from the goldmine user to</span></span><br><span class="line"><span class="comment"> * the subsystems.</span></span><br><span class="line"><span class="comment"> DwarvenGoldmineFacade提供了一个界面，用户可以通过该界面来操作子系统。</span></span><br><span class="line"><span class="comment">&lt;p&gt;这使金矿更易于操作，并减少了金矿用户与子系统之间的依赖关系。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DwarvenGoldmineFacade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> List&lt;DwarvenMineWorker&gt; workers;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Constructor.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DwarvenGoldmineFacade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    workers = List.of(</span><br><span class="line">        <span class="keyword">new</span> DwarvenGoldDigger(),</span><br><span class="line">        <span class="keyword">new</span> DwarvenCartOperator(),</span><br><span class="line">        <span class="keyword">new</span> DwarvenTunnelDigger());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startNewDay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    makeActions(workers, DwarvenMineWorker.Action.WAKE_UP, DwarvenMineWorker.Action.GO_TO_MINE);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">digOutGold</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    makeActions(workers, DwarvenMineWorker.Action.WORK);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endDay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    makeActions(workers, DwarvenMineWorker.Action.GO_HOME, DwarvenMineWorker.Action.GO_TO_SLEEP);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">makeActions</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      Collection&lt;DwarvenMineWorker&gt; workers,</span></span></span><br><span class="line"><span class="function"><span class="params">      DwarvenMineWorker.Action... actions</span></span></span><br><span class="line"><span class="function"><span class="params">  )</span> </span>&#123;</span><br><span class="line">    workers.forEach(worker -&gt; worker.action(actions));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Facade design pattern is often used when a system is very complex or difficult to understand</span></span><br><span class="line"><span class="comment"> * because the system has a large number of interdependent classes or its source code is</span></span><br><span class="line"><span class="comment"> * unavailable. This pattern hides the complexities of the larger system and provides a simpler</span></span><br><span class="line"><span class="comment"> * interface to the client. It typically involves a single wrapper class which contains a set of</span></span><br><span class="line"><span class="comment"> * members required by client. These members access the system on behalf of the facade client and</span></span><br><span class="line"><span class="comment"> * hide the implementation details.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;In this example the Facade is (&#123;<span class="doctag">@link</span> DwarvenGoldmineFacade&#125;) and it provides a simpler</span></span><br><span class="line"><span class="comment"> * interface to the goldmine subsystem.</span></span><br><span class="line"><span class="comment"> 当系统非常复杂或难以理解时，通常会使用Facade设计模式，因为该系统具有大量相互依赖的类，或者其源代码不可用。 这种模式隐藏了较大系统的复杂性，并为客户端提供了更简单的界面。 它通常涉及单个包装器类，其中包含客户端所需的一组成员。 这些成员代表外观客户端访问系统，并隐藏实现细节。</span></span><br><span class="line"><span class="comment">&lt;p&gt;在此示例中，外观为（&#123;<span class="doctag">@link</span> DwarvenGoldmineFacade&#125;），它为金矿子系统提供了更简单的界面。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Program entry point.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> args command line args</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> facade = <span class="keyword">new</span> DwarvenGoldmineFacade();</span><br><span class="line">    facade.startNewDay();</span><br><span class="line">    facade.digOutGold();</span><br><span class="line">    facade.endDay();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><h2 id="spring-jdbc中的外观模式"><a href="#spring-jdbc中的外观模式" class="headerlink" title="spring jdbc中的外观模式"></a>spring jdbc中的外观模式</h2><p>查看 org.springframework.jdbc.support.JdbcUtils</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeConnection</span><span class="params">(Connection con)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (con != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                con.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Could not close JDBC Connection"</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                <span class="comment">// We don't trust the JDBC driver: It might throw RuntimeException or Error.</span></span><br><span class="line">                logger.debug(<span class="string">"Unexpected exception on closing JDBC Connection"</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getResultSetValue</span><span class="params">(ResultSet rs, <span class="keyword">int</span> index, Class&lt;?&gt; requiredType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (requiredType == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> getResultSetValue(rs, index);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object value = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">boolean</span> wasNullCheck = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Explicitly extract typed value, as far as possible.</span></span><br><span class="line">        <span class="keyword">if</span> (String<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">requiredType</span>)) </span>&#123;</span><br><span class="line">            value = rs.getString(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">boolean</span><span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">requiredType</span>) || <span class="title">Boolean</span>.<span class="title">class</span>.<span class="title">equals</span>(<span class="title">requiredType</span>)) </span>&#123;</span><br><span class="line">            value = rs.getBoolean(index);</span><br><span class="line">            wasNullCheck = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">byte</span><span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">requiredType</span>) || <span class="title">Byte</span>.<span class="title">class</span>.<span class="title">equals</span>(<span class="title">requiredType</span>)) </span>&#123;</span><br><span class="line">            value = rs.getByte(index);</span><br><span class="line">            wasNullCheck = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">short</span><span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">requiredType</span>) || <span class="title">Short</span>.<span class="title">class</span>.<span class="title">equals</span>(<span class="title">requiredType</span>)) </span>&#123;</span><br><span class="line">            value = rs.getShort(index);</span><br><span class="line">            wasNullCheck = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">int</span><span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">requiredType</span>) || <span class="title">Integer</span>.<span class="title">class</span>.<span class="title">equals</span>(<span class="title">requiredType</span>)) </span>&#123;</span><br><span class="line">            value = rs.getInt(index);</span><br><span class="line">            wasNullCheck = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">long</span><span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">requiredType</span>) || <span class="title">Long</span>.<span class="title">class</span>.<span class="title">equals</span>(<span class="title">requiredType</span>)) </span>&#123;</span><br><span class="line">            value = rs.getLong(index);</span><br><span class="line">            wasNullCheck = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">float</span><span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">requiredType</span>) || <span class="title">Float</span>.<span class="title">class</span>.<span class="title">equals</span>(<span class="title">requiredType</span>)) </span>&#123;</span><br><span class="line">            value = rs.getFloat(index);</span><br><span class="line">            wasNullCheck = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">double</span><span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">requiredType</span>) || <span class="title">Double</span>.<span class="title">class</span>.<span class="title">equals</span>(<span class="title">requiredType</span>) ||</span></span><br><span class="line"><span class="class">                <span class="title">Number</span>.<span class="title">class</span>.<span class="title">equals</span>(<span class="title">requiredType</span>)) </span>&#123;</span><br><span class="line">            value = rs.getDouble(index);</span><br><span class="line">            wasNullCheck = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">byte</span>[]<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">requiredType</span>)) </span>&#123;</span><br><span class="line">            value = rs.getBytes(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (java.sql.Date<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">requiredType</span>)) </span>&#123;</span><br><span class="line">            value = rs.getDate(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (java.sql.Time<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">requiredType</span>)) </span>&#123;</span><br><span class="line">            value = rs.getTime(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (java.sql.Timestamp<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">requiredType</span>) || <span class="title">java</span>.<span class="title">util</span>.<span class="title">Date</span>.<span class="title">class</span>.<span class="title">equals</span>(<span class="title">requiredType</span>)) </span>&#123;</span><br><span class="line">            value = rs.getTimestamp(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (BigDecimal<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">requiredType</span>)) </span>&#123;</span><br><span class="line">            value = rs.getBigDecimal(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Blob<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">requiredType</span>)) </span>&#123;</span><br><span class="line">            value = rs.getBlob(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Clob<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">requiredType</span>)) </span>&#123;</span><br><span class="line">            value = rs.getClob(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Some unknown type desired -&gt; rely on getObject.</span></span><br><span class="line">            value = getResultSetValue(rs, index);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (wasNullCheck &amp;&amp; value != <span class="keyword">null</span> &amp;&amp; rs.wasNull()) &#123;</span><br><span class="line">            value = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该工具类主要是对原生的 jdbc 进行了封装</p>
<h2 id="Mybatis中的外观模式"><a href="#Mybatis中的外观模式" class="headerlink" title="Mybatis中的外观模式"></a>Mybatis中的外观模式</h2><p>查看 org.apache.ibatis.session.Configuration 类中以 new 开头的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configuration</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">newExecutor</span><span class="params">(Transaction transaction, ExecutorType executorType)</span> </span>&#123;</span><br><span class="line">        executorType = executorType == <span class="keyword">null</span> ? defaultExecutorType : executorType;</span><br><span class="line">        executorType = executorType == <span class="keyword">null</span> ? ExecutorType.SIMPLE : executorType;</span><br><span class="line">        Executor executor;</span><br><span class="line">        <span class="keyword">if</span> (ExecutorType.BATCH == executorType) &#123;</span><br><span class="line">          executor = <span class="keyword">new</span> BatchExecutor(<span class="keyword">this</span>, transaction);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ExecutorType.REUSE == executorType) &#123;</span><br><span class="line">          executor = <span class="keyword">new</span> ReuseExecutor(<span class="keyword">this</span>, transaction);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          executor = <span class="keyword">new</span> SimpleExecutor(<span class="keyword">this</span>, transaction);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cacheEnabled) &#123;</span><br><span class="line">          executor = <span class="keyword">new</span> CachingExecutor(executor);</span><br><span class="line">        &#125;</span><br><span class="line">        executor = (Executor) interceptorChain.pluginAll(executor);</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultSetHandler <span class="title">newResultSetHandler</span><span class="params">(Executor executor, MappedStatement mappedStatement, RowBounds rowBounds, ParameterHandler parameterHandler,</span></span></span><br><span class="line"><span class="function"><span class="params">          ResultHandler resultHandler, BoundSql boundSql)</span> </span>&#123;</span><br><span class="line">        ResultSetHandler resultSetHandler = <span class="keyword">new</span> DefaultResultSetHandler(executor, mappedStatement, parameterHandler, resultHandler, boundSql, rowBounds);</span><br><span class="line">        resultSetHandler = (ResultSetHandler) interceptorChain.pluginAll(resultSetHandler);</span><br><span class="line">        <span class="keyword">return</span> resultSetHandler;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该类主要对一些创建对象的操作进行封装</p>
<h2 id="Tomcat-中的外观模式"><a href="#Tomcat-中的外观模式" class="headerlink" title="Tomcat 中的外观模式"></a>Tomcat 中的外观模式</h2><p>Tomcat 源码中大量使用了很多外观模式<br><img src="../../images/tomcat-facade.png" alt="tomcat-facade"><br>org.apache.catalina.connector.Request 和 org.apache.catalina.connector.RequestFacade 这两个类都实现了 HttpServletRequest 接口<br>在 Request 中调用 getRequest() 实际获取的是 RequestFacade 的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> RequestFacade facade = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> HttpServletRequest <span class="title">getRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (facade == <span class="keyword">null</span>) &#123;</span><br><span class="line">        facade = <span class="keyword">new</span> RequestFacade(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> facade;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 RequestFacade 中再对认为是子系统的操作进行封装</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestFacade</span> <span class="keyword">implements</span> <span class="title">HttpServletRequest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The wrapped request.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Request request = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getAttribute</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(sm.getString(<span class="string">"requestFacade.nullRequest"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> request.getAttribute(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SLF4J-中的外观模式"><a href="#SLF4J-中的外观模式" class="headerlink" title="SLF4J 中的外观模式"></a>SLF4J 中的外观模式</h2><p>SLF4J 是简单的日志外观模式框架，抽象了各种日志框架例如 Logback、Log4j、Commons-logging 和 JDK 自带的 logging 实现接口。它使得用户可以在部署时使用自己想要的日志框架。</p>
<p>SLF4J 没有替代任何日志框架，它仅仅是标准日志框架的外观模式。如果在类路径下除了 SLF4J 再没有任何日志框架，那么默认状态是在控制台输出日志。</p>
<blockquote>
<p>日志处理框架 Logback 是 Log4j 的改进版本，原生支持SLF4J（因为是同一作者开发的），因此 Logback＋SLF4J 的组合是日志框架的最佳选择，比 SLF4J+其它日志框架 的组合要快一些。而且Logback的配置可以是XML或Groovy代码。</p>
</blockquote>
<p>SLF4J 的 helloworld 如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    logger.info(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下图为 SLF4J 与日志处理框架的绑定调用关系<br><img src="../../images/slf4j-bind.png" alt="slf4j"><br>应用层调用 slf4j-api.jar，slf4j-api.jar 再根据所绑定的日志处理框架调用不同的 jar 包进行处理</p>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>结构型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂方法模式</title>
    <url>/design-pattern/factory-method/</url>
    <content><![CDATA[<h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><p>工厂方法模式也就是鼠标工厂是个父类，有生产鼠标这个接口。<br>戴尔鼠标工厂，惠普鼠标工厂继承它，可以分别生产戴尔鼠标，惠普鼠标。<br>生产哪种鼠标不再由参数决定，而是创建鼠标工厂时，由戴尔鼠标工厂创建。<br>后续直接调用鼠标工厂.生产鼠标()即可<br><img src="../../images/Factory-method.png" alt="工厂方法"></p>
<a id="more"></a>
<h1 id="工厂方法设计模式UML类图"><a href="#工厂方法设计模式UML类图" class="headerlink" title="工厂方法设计模式UML类图"></a>工厂方法设计模式UML类图</h1><p><img src="../../images/plantuml/factory-method.urm.png" alt="工厂方法设计模式UML类图"></p>
<h1 id="工厂方法设计模式java实现"><a href="#工厂方法设计模式java实现" class="headerlink" title="工厂方法设计模式java实现"></a>工厂方法设计模式java实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Weapon interface.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">WeaponType <span class="title">getWeaponType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WeaponType enumeration.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> WeaponType &#123;</span><br><span class="line"></span><br><span class="line">  SHORT_SWORD(<span class="string">"short sword"</span>), SPEAR(<span class="string">"spear"</span>), AXE(<span class="string">"axe"</span>), UNDEFINED(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">  WeaponType(String title) &#123;</span><br><span class="line">    <span class="keyword">this</span>.title = title;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> title;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OrcWeapon.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrcWeapon</span> <span class="keyword">implements</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> WeaponType weaponType;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">OrcWeapon</span><span class="params">(WeaponType weaponType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.weaponType = weaponType;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Orcish "</span> + weaponType;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> WeaponType <span class="title">getWeaponType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> weaponType;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ElfWeapon.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElfWeapon</span> <span class="keyword">implements</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> WeaponType weaponType;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ElfWeapon</span><span class="params">(WeaponType weaponType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.weaponType = weaponType;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Elven "</span> + weaponType;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> WeaponType <span class="title">getWeaponType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> weaponType;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The interface containing method for producing objects.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Blacksmith</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">Weapon <span class="title">manufactureWeapon</span><span class="params">(WeaponType weaponType)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Concrete subclass for creating new objects.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrcBlacksmith</span> <span class="keyword">implements</span> <span class="title">Blacksmith</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;WeaponType, OrcWeapon&gt; ORCARSENAL;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    ORCARSENAL = <span class="keyword">new</span> HashMap&lt;&gt;(WeaponType.values().length);</span><br><span class="line">    Arrays.stream(WeaponType.values()).forEach(type -&gt; ORCARSENAL.put(type, <span class="keyword">new</span> OrcWeapon(type)));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Weapon <span class="title">manufactureWeapon</span><span class="params">(WeaponType weaponType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ORCARSENAL.get(weaponType);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Concrete subclass for creating new objects.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElfBlacksmith</span> <span class="keyword">implements</span> <span class="title">Blacksmith</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;WeaponType, ElfWeapon&gt; ELFARSENAL;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    ELFARSENAL = <span class="keyword">new</span> HashMap&lt;&gt;(WeaponType.values().length);</span><br><span class="line">    Arrays.stream(WeaponType.values()).forEach(type -&gt; ELFARSENAL.put(type, <span class="keyword">new</span> ElfWeapon(type)));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Weapon <span class="title">manufactureWeapon</span><span class="params">(WeaponType weaponType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ELFARSENAL.get(weaponType);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Factory Method is a creational design pattern which uses factory methods to deal with the</span></span><br><span class="line"><span class="comment"> * problem of creating objects without specifying the exact class of object that will be created.</span></span><br><span class="line"><span class="comment"> * This is done by creating objects via calling a factory method either specified in an interface</span></span><br><span class="line"><span class="comment"> * and implemented by child classes, or implemented in a base class and optionally overridden by</span></span><br><span class="line"><span class="comment"> * derived classes—rather than by calling a constructor.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;In this Factory Method example we have an interface (&#123;<span class="doctag">@link</span> Blacksmith&#125;) with a method for</span></span><br><span class="line"><span class="comment"> * creating objects (&#123;<span class="doctag">@link</span> Blacksmith#manufactureWeapon&#125;). The concrete subclasses (</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> OrcBlacksmith&#125;, &#123;<span class="doctag">@link</span> ElfBlacksmith&#125;) then override the method to produce objects of</span></span><br><span class="line"><span class="comment"> * their liking.</span></span><br><span class="line"><span class="comment"> 工厂方法是一种创新性的设计模式，它使用工厂方法来处理创建对象的问题，而无需指定要创建的对象的确切类。</span></span><br><span class="line"><span class="comment">这是通过调用工厂方法创建的对象来完成的，该方法可以在接口中指定并由子类实现，也可以在基类中实现，并有选择地覆盖</span></span><br><span class="line"><span class="comment">派生类-而不是通过调用构造函数。</span></span><br><span class="line"><span class="comment">&lt;p&gt;在此工厂方法示例中，我们具有一个接口（&#123;<span class="doctag">@link</span> Blacksmith&#125;），其中包含用于创建对象的方法（&#123;<span class="doctag">@link</span> Blacksmith＃manufactureWeapon&#125;）。 具体的子类（</span></span><br><span class="line"><span class="comment">&#123;<span class="doctag">@link</span> OrcBlacksmith&#125;，&#123;@ link ElfBlacksmith&#125;），然后重写该方法以生成自己喜欢的对象。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(App<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Blacksmith blacksmith;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Creates an instance of &lt;code&gt;App&lt;/code&gt; which will use &lt;code&gt;blacksmith&lt;/code&gt; to manufacture </span></span><br><span class="line"><span class="comment">   * the weapons for war.</span></span><br><span class="line"><span class="comment">   * &lt;code&gt;App&lt;/code&gt; is unaware which concrete implementation of &#123;<span class="doctag">@link</span> Blacksmith&#125; it is using.</span></span><br><span class="line"><span class="comment">   * The decision of which blacksmith implementation to use may depend on configuration, or</span></span><br><span class="line"><span class="comment">   * the type of rival in war.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> blacksmith a non-null implementation of blacksmith</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">App</span><span class="params">(Blacksmith blacksmith)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.blacksmith = blacksmith;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Program entry point.</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> args command line args</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Lets go to war with Orc weapons</span></span><br><span class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> App(<span class="keyword">new</span> OrcBlacksmith());</span><br><span class="line">    app.manufactureWeapons();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Lets go to war with Elf weapons</span></span><br><span class="line">    app = <span class="keyword">new</span> App(<span class="keyword">new</span> ElfBlacksmith());</span><br><span class="line">    app.manufactureWeapons();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">manufactureWeapons</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);</span><br><span class="line">    LOGGER.info(weapon.toString());</span><br><span class="line">    weapon = blacksmith.manufactureWeapon(WeaponType.AXE);</span><br><span class="line">    LOGGER.info(weapon.toString());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
        <category>创建型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰者模式</title>
    <url>/design-pattern/decorate/</url>
    <content><![CDATA[<h1 id="装饰者设计模式UML类图"><a href="#装饰者设计模式UML类图" class="headerlink" title="装饰者设计模式UML类图"></a>装饰者设计模式UML类图</h1><p><img src="../../images/plantuml/decorator.urm.png" alt="装饰者模式UML类图"></p>
<a id="more"></a>
<h1 id="装饰者设计模式java代码实现"><a href="#装饰者设计模式java代码实现" class="headerlink" title="装饰者设计模式java代码实现"></a>装饰者设计模式java代码实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Interface for trolls.</span></span><br><span class="line"><span class="comment">   巨魔</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Troll</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getAttackPower</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">fleeBattle</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SimpleTroll implements &#123;<span class="doctag">@link</span> Troll&#125; interface directly.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleTroll</span> <span class="keyword">implements</span> <span class="title">Troll</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(SimpleTroll<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"The troll tries to grab you!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAttackPower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fleeBattle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//巨魔惊恐地尖叫着逃跑了！</span></span><br><span class="line">    LOGGER.info(<span class="string">"The troll shrieks in horror and runs away!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Decorator that adds a club for the troll.</span></span><br><span class="line"><span class="comment"> 为巨魔添加棒子的装饰器。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClubbedTroll</span> <span class="keyword">implements</span> <span class="title">Troll</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ClubbedTroll<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Troll decorated;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ClubbedTroll</span><span class="params">(Troll decorated)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.decorated = decorated;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    decorated.attack();</span><br><span class="line">    <span class="comment">//巨魔用棍子打你！</span></span><br><span class="line">    LOGGER.info(<span class="string">"The troll swings at you with a club!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAttackPower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> decorated.getAttackPower() + <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fleeBattle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//逃离战斗</span></span><br><span class="line">    decorated.fleeBattle();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Decorator pattern is a more flexible alternative to subclassing. The Decorator class</span></span><br><span class="line"><span class="comment"> * implements the same interface as the target and uses composition to "decorate" calls to the</span></span><br><span class="line"><span class="comment"> * target. Using the Decorator pattern it is possible to change the behavior of the class during</span></span><br><span class="line"><span class="comment"> * runtime.</span></span><br><span class="line"><span class="comment"> Decorator模式是子类的一种更灵活的替代方法。 Decorator类实现与目标相同的接口，并使用组合“修饰”对目标的调用。 使用Decorator模式，可以在运行时更改类的行为。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;In this example we show how the simple &#123;<span class="doctag">@link</span> SimpleTroll&#125; first attacks and then flees the</span></span><br><span class="line"><span class="comment"> * battle. Then we decorate the &#123;<span class="doctag">@link</span> SimpleTroll&#125; with a &#123;<span class="doctag">@link</span> ClubbedTroll&#125; and perform the</span></span><br><span class="line"><span class="comment"> * attack again. You can see how the behavior changes after the decoration.</span></span><br><span class="line"><span class="comment"> &lt;p&gt;在此示例中，我们显示了简单的&#123;<span class="doctag">@link</span> SimpleTroll&#125;如何首先攻击然后逃离战斗。 然后，我们用&#123;<span class="doctag">@link</span> ClubbedTroll&#125;装饰&#123;<span class="doctag">@link</span> SimpleTroll&#125;，然后再次执行攻击。 您可以看到装饰后行为如何变化。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(App<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Program entry point.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> args command line args</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// simple troll</span></span><br><span class="line">    LOGGER.info(<span class="string">"A simple looking troll approaches."</span>);</span><br><span class="line">    <span class="keyword">var</span> troll = <span class="keyword">new</span> SimpleTroll();</span><br><span class="line">    troll.attack();</span><br><span class="line">    troll.fleeBattle();</span><br><span class="line">    LOGGER.info(<span class="string">"Simple troll power &#123;&#125;.\n"</span>, troll.getAttackPower());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// change the behavior of the simple troll by adding a decorator</span></span><br><span class="line">    LOGGER.info(<span class="string">"A troll with huge club surprises you."</span>);</span><br><span class="line">    <span class="keyword">var</span> clubbedTroll = <span class="keyword">new</span> ClubbedTroll(troll);</span><br><span class="line">    clubbedTroll.attack();</span><br><span class="line">    clubbedTroll.fleeBattle();</span><br><span class="line">    LOGGER.info(<span class="string">"Clubbed troll power &#123;&#125;.\n"</span>, clubbedTroll.getAttackPower());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><h2 id="Java-I-O中的装饰者模式"><a href="#Java-I-O中的装饰者模式" class="headerlink" title="Java I/O中的装饰者模式"></a>Java I/O中的装饰者模式</h2><p>使用 Java I/O 的时候总是有各种输入流、输出流、字符流、字节流、过滤流、缓冲流等等各种各样的流，不熟悉里边的设计模式的话总会看得云里雾里的，现在通过设计模式的角度来看 Java I/O，会好理解很多。<br>先用一幅图来看看Java I/O到底是什么，下面的这幅图生动的刻画了Java I/O的作用。<br><img src="../../images/java-io-flow.png" alt="java-io-flow"><br>由上图可知在Java中应用程序通过输入流（InputStream）的Read方法从源地址处读取字节，然后通过输出流（OutputStream）的Write方法将流写入到目的地址。<br>流的来源主要有三种：本地的文件（File）、控制台、通过socket实现的网络通信<br>下面的图可以看出Java中的装饰者类和被装饰者类以及它们之间的关系，这里只列出了InputStream中的关系：<br><img src="../../images/InputStream.png" alt="InputStream"><br>由上图可以看出只要继承了FilterInputStream的类就是装饰者类，可以用于包装其他的流，装饰者类还可以对装饰者和类进行再包装。<br>这里总结几种常用流的应用场景：</p>
<table>
<thead>
<tr>
<th>流名称</th>
<th>应用场景</th>
</tr>
</thead>
<tbody><tr>
<td>ByteArrayInputStream</td>
<td>访问数组，把内存中的一个缓冲区作为 InputStream 使用，CPU从缓存区读取数据比从存储介质的速率快10倍以上</td>
</tr>
<tr>
<td>StringBufferInputStream</td>
<td>把一个 String 对象作为。InputStream。不建议使用，在转换字符的问题上有缺陷</td>
</tr>
<tr>
<td>FileInputStream</td>
<td>访问文件，把一个文件作为 InputStream ，实现对文件的读取操作</td>
</tr>
<tr>
<td>PipedInputStream</td>
<td>访问管道，主要在线程中使用，一个线程通过管道输出流发送数据，而另一个线程通过管道输入流读取数据，这样可实现两个线程间的通讯</td>
</tr>
<tr>
<td>SequenceInputStream</td>
<td>把多个 InputStream 合并为一个 InputStream . 序列输入流类允许应用程序把几个输入流连续地合并起来</td>
</tr>
<tr>
<td>DataInputStream</td>
<td>特殊流，读各种基本类型数据,如byte、int、String的功能</td>
</tr>
<tr>
<td>ObjectInputStream</td>
<td>对象流，读对象的功能</td>
</tr>
<tr>
<td>PushBackInputStream</td>
<td>推回输入流，可以把读取进来的某些数据重新回退到输入流的缓冲区之中</td>
</tr>
<tr>
<td>BufferedInputStream</td>
<td>缓冲流，增加了缓冲功能</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        DataInputStream in=<span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span>  FileInputStream(<span class="string">"D:\\hello.txt"</span>)));</span><br><span class="line">        <span class="keyword">while</span>(in.available()!=<span class="number">0</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)in.readByte());</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>整个Java IO体系都是基于字符流(InputStream/OutputStream) 和 字节流(Reader/Writer)作为基类，下面画出OutputStream、Reader、Writer的部分类图<br><img src="../../images/OutputStream.png" alt="OutputStream"><br><img src="../../images/Reader.png" alt="Reader"><br><img src="../../images/Writer.png" alt="Writer"></p>
<h2 id="spring-cache-中的装饰者模式"><a href="#spring-cache-中的装饰者模式" class="headerlink" title="spring cache 中的装饰者模式"></a>spring cache 中的装饰者模式</h2><p>看 org.springframework.cache.transaction 包下的 TransactionAwareCacheDecorator 这个类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionAwareCacheDecorator</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Cache targetCache;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TransactionAwareCacheDecorator</span><span class="params">(Cache targetCache)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(targetCache, <span class="string">"Target Cache must not be null"</span>);</span><br><span class="line">        <span class="keyword">this</span>.targetCache = targetCache;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">get</span><span class="params">(Object key, Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.targetCache.get(key, type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">final</span> Object key, <span class="keyword">final</span> Object value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否开启了事务</span></span><br><span class="line">        <span class="keyword">if</span> (TransactionSynchronizationManager.isSynchronizationActive()) &#123;</span><br><span class="line">            <span class="comment">// 将操作注册到 afterCommit 阶段</span></span><br><span class="line">            TransactionSynchronizationManager.registerSynchronization(<span class="keyword">new</span> TransactionSynchronizationAdapter() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCommit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    TransactionAwareCacheDecorator.<span class="keyword">this</span>.targetCache.put(key, value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.targetCache.put(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该类实现了 Cache 接口，同时将 Cache 组合到类中成为了成员属性 targetCache，所以可以大胆猜测 TransactionAwareCacheDecorator 是一个装饰类，不过这里并没有抽象装饰类，且 TransactionAwareCacheDecorator 没有子类，这里的装饰类关系并没有Java I/O 中的装饰关系那么复杂<br><img src="../../images/SpringCache.png" alt="SpringCache"><br>该类的主要功能：通过 Spring 的 TransactionSynchronizationManager 将其 put/evict/clear 操作与 Spring 管理的事务同步，仅在成功的事务的 after-commit 阶段执行实际的缓存 put/evict/clear 操作。如果没有事务是 active 的，将立即执行 put/evict/clear 操作</p>
<h2 id="spring-session-中的装饰者模式"><a href="#spring-session-中的装饰者模式" class="headerlink" title="spring session 中的装饰者模式"></a>spring session 中的装饰者模式</h2><p>类 ServletRequestWrapper 的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletRequestWrapper</span> <span class="keyword">implements</span> <span class="title">ServletRequest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ServletRequest request;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServletRequestWrapper</span><span class="params">(ServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Request cannot be null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.request = request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getAttribute</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.request.getAttribute(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到该类对 ServletRequest 进行了包装，这里是一个装饰者模式，再看下图，spring session 中 SessionRepositoryFilter 的一个内部类 SessionRepositoryRequestWrapper 与 ServletRequestWrapper 的关系<br><img src="../../images/HttpServletRequestWrapper.png" alt="HttpServletRequestWrapper"><br>可见 ServletRequestWrapper 是第一层包装，HttpServletRequestWrapper 通过继承进行包装，增加了 HTTP 相关的功能，SessionRepositoryRequestWrapper 又通过继承进行包装，增加了 Session 相关的功能</p>
<h2 id="Mybatis-缓存中的装饰者模式"><a href="#Mybatis-缓存中的装饰者模式" class="headerlink" title="Mybatis 缓存中的装饰者模式"></a>Mybatis 缓存中的装饰者模式</h2><p>org.apache.ibatis.cache 包的文件结构如下所示<br><img src="../../images/MybatisCache.png" alt="MybatisCache"><br>我们通过类所在的包名即可判断出该类的角色，Cache 为抽象构件类，PerpetualCache 为具体构件类，decorators 包下的类为装饰类，没有抽象装饰类<br>通过名称也可以判断出装饰类所要装饰的功能</p>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>结构型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>简单工厂模式</title>
    <url>/design-pattern/factory-kit/</url>
    <content><![CDATA[<h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><p>简单工厂模式不是 23 种里的一种，简而言之，就是有一个专门生产某个产品的类。<br>比如下图中的鼠标工厂，专业生产鼠标，给参数 0，生产戴尔鼠标，给参数 1，生产惠普鼠标。<br><img src="../../images/SimpleFactory.png" alt="简单工厂"></p>
<a id="more"></a>

<h1 id="简单工厂设计模式UML类图"><a href="#简单工厂设计模式UML类图" class="headerlink" title="简单工厂设计模式UML类图"></a>简单工厂设计模式UML类图</h1><p><img src="../../images/plantuml/factory-kit.urm.png" alt="简单工厂设计模式UML类图"></p>
<h1 id="简单工厂设计模式java实现"><a href="#简单工厂设计模式java实现" class="headerlink" title="简单工厂设计模式java实现"></a>简单工厂设计模式java实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface representing weapon.</span></span><br><span class="line"><span class="comment"> 武器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Enumerates &#123;<span class="doctag">@link</span> Weapon&#125; types.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> WeaponType &#123;</span><br><span class="line">  SWORD, AXE, BOW, SPEAR</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class representing Axe.</span></span><br><span class="line"><span class="comment"> 斧头</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Axe</span> <span class="keyword">implements</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Axe"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class representing Bows.</span></span><br><span class="line"><span class="comment"> 弓</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bow</span> <span class="keyword">implements</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Bow"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class representing Spear.</span></span><br><span class="line"><span class="comment"> 矛</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Spear</span> <span class="keyword">implements</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Spear"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class representing Swords.</span></span><br><span class="line"><span class="comment"> 剑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sword</span> <span class="keyword">implements</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Sword"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Functional interface that allows adding builder with name to the factory.</span></span><br><span class="line"><span class="comment"> 函数接口，允许向工厂添加具有名称的生成器。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(WeaponType name, Supplier&lt;Weapon&gt; supplier)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Functional interface, an example of the factory-kit design pattern.</span></span><br><span class="line"><span class="comment"> * &lt;br&gt;Instance created locally gives an opportunity to strictly define</span></span><br><span class="line"><span class="comment"> * which objects types the instance of a factory will be able to create.</span></span><br><span class="line"><span class="comment"> * &lt;br&gt;Factory is a placeholder for &#123;<span class="doctag">@link</span> Builder&#125;s</span></span><br><span class="line"><span class="comment"> * with &#123;<span class="doctag">@link</span> WeaponFactory#create(WeaponType)&#125; method to initialize new objects.</span></span><br><span class="line"><span class="comment"> 功能接口，工厂套件设计模式的示例。</span></span><br><span class="line"><span class="comment">&lt;br&gt;在本地创建的实例为严格定义提供了机会</span></span><br><span class="line"><span class="comment">工厂实例将能够创建哪些对象类型。</span></span><br><span class="line"><span class="comment">&lt;br&gt; Factory是&#123;<span class="doctag">@link</span> Builder&#125;的占位符，它使用&#123;<span class="doctag">@link</span> WeaponFactory＃create（WeaponType）&#125;方法初始化新对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WeaponFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Creates an instance of the given type.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> name representing enum of an object type to be created.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> new instance of a requested class implementing &#123;<span class="doctag">@link</span> Weapon&#125; interface.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function">Weapon <span class="title">create</span><span class="params">(WeaponType name)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Creates factory - placeholder for specified &#123;<span class="doctag">@link</span> Builder&#125;s.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> consumer for the new builder to the factory.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> factory with specified &#123;<span class="doctag">@link</span> Builder&#125;s</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> WeaponFactory <span class="title">factory</span><span class="params">(Consumer&lt;Builder&gt; consumer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> map = <span class="keyword">new</span> HashMap&lt;WeaponType, Supplier&lt;Weapon&gt;&gt;();</span><br><span class="line">    consumer.accept(map::put);</span><br><span class="line">    <span class="keyword">return</span> name -&gt; map.get(name).get();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Factory-kit is a creational pattern which defines a factory of immutable content with separated</span></span><br><span class="line"><span class="comment"> * builder and factory interfaces to deal with the problem of creating one of the objects specified</span></span><br><span class="line"><span class="comment"> * directly in the factory-kit instance.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;In the given example &#123;<span class="doctag">@link</span> WeaponFactory&#125; represents the factory-kit, that contains four</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Builder&#125;s for creating new objects of the classes implementing &#123;<span class="doctag">@link</span> Weapon&#125; interface.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Each of them can be called with &#123;<span class="doctag">@link</span> WeaponFactory#create(WeaponType)&#125; method, with</span></span><br><span class="line"><span class="comment"> * an input representing an instance of &#123;<span class="doctag">@link</span> WeaponType&#125; that needs to be mapped explicitly with</span></span><br><span class="line"><span class="comment"> * desired class type in the factory instance.</span></span><br><span class="line"><span class="comment"> Factory-kit是一种创建模式，该模式定义了具有不可变内容的工厂，并使用单独的生成器和工厂接口来处理创建直接在factory-kit实例中指定的对象之一的问题。</span></span><br><span class="line"><span class="comment">&lt;p&gt;在给定的示例中，&#123;@ link WeaponFactory&#125;代表工厂工具包，其中包含四个&#123;<span class="doctag">@link</span> Builder&#125;，用于创建实现&#123;<span class="doctag">@link</span> Weapon&#125;接口的类的新对象。</span></span><br><span class="line"><span class="comment">&lt;p&gt;可以使用&#123;<span class="doctag">@link</span> WeaponFactory＃create（WeaponType）&#125;方法来调用每个方法，其中输入代表&#123;<span class="doctag">@link</span> WeaponType&#125;的实例，该实例需要在工厂实例中显式映射为所需的类类型。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(App<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Program entry point.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> args command line args</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> factory = WeaponFactory.factory(builder -&gt; &#123;</span><br><span class="line">      builder.add(WeaponType.SWORD, Sword::<span class="keyword">new</span>);</span><br><span class="line">      builder.add(WeaponType.AXE, Axe::<span class="keyword">new</span>);</span><br><span class="line">      builder.add(WeaponType.SPEAR, Spear::<span class="keyword">new</span>);</span><br><span class="line">      builder.add(WeaponType.BOW, Bow::<span class="keyword">new</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> axe = factory.create(WeaponType.AXE);</span><br><span class="line">    LOGGER.info(axe.toString());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
        <category>例外</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>享元模式</title>
    <url>/design-pattern/flyweight/</url>
    <content><![CDATA[<h1 id="享元设计模式UML类图"><a href="#享元设计模式UML类图" class="headerlink" title="享元设计模式UML类图"></a>享元设计模式UML类图</h1><p><img src="../../images/plantuml/flyweight.urm.png" alt="适配器设计模式UML类图"></p>
<a id="more"></a>
<h1 id="享元设计模式java实现"><a href="#享元设计模式java实现" class="headerlink" title="享元设计模式java实现"></a>享元设计模式java实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface for Potions.</span></span><br><span class="line"><span class="comment"> 药水</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Potion</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Enumeration for potion types.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> PotionType &#123;</span><br><span class="line"></span><br><span class="line">  HEALING, INVISIBILITY, STRENGTH, HOLY_WATER, POISON</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HealingPotion.</span></span><br><span class="line"><span class="comment"> 治疗药水</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HealingPotion</span> <span class="keyword">implements</span> <span class="title">Potion</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(HealingPotion<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"You feel healed. (Potion=&#123;&#125;)"</span>, System.identityHashCode(<span class="keyword">this</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HolyWaterPotion.</span></span><br><span class="line"><span class="comment"> 圣水药水</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HolyWaterPotion</span> <span class="keyword">implements</span> <span class="title">Potion</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(HolyWaterPotion<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"You feel blessed. (Potion=&#123;&#125;)"</span>, System.identityHashCode(<span class="keyword">this</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * InvisibilityPotion.</span></span><br><span class="line"><span class="comment"> 隐形药水</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvisibilityPotion</span> <span class="keyword">implements</span> <span class="title">Potion</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(InvisibilityPotion<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"You become invisible. (Potion=&#123;&#125;)"</span>, System.identityHashCode(<span class="keyword">this</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PoisonPotion.</span></span><br><span class="line"><span class="comment"> 毒药</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoisonPotion</span> <span class="keyword">implements</span> <span class="title">Potion</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(PoisonPotion<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"Urgh! This is poisonous. (Potion=&#123;&#125;)"</span>, System.identityHashCode(<span class="keyword">this</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * StrengthPotion.</span></span><br><span class="line"><span class="comment"> 力量药水</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrengthPotion</span> <span class="keyword">implements</span> <span class="title">Potion</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(StrengthPotion<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"You feel strong. (Potion=&#123;&#125;)"</span>, System.identityHashCode(<span class="keyword">this</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PotionFactory is the Flyweight in this example. It minimizes memory use by sharing object</span></span><br><span class="line"><span class="comment"> * instances. It holds a map of potion instances and new potions are created only when none of the</span></span><br><span class="line"><span class="comment"> * type already exists.</span></span><br><span class="line"><span class="comment"> 在此示例中，PotionFactory是Flyweight。 通过共享对象实例，可最大程度地减少内存使用。 它拥有药水实例的映射，并且仅在不存在任何药水类型时才创建新药水。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PotionFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;PotionType, Potion&gt; potions;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">PotionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    potions = <span class="keyword">new</span> EnumMap&lt;&gt;(PotionType<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">Potion <span class="title">createPotion</span><span class="params">(PotionType type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> potion = potions.get(type);</span><br><span class="line">    <span class="keyword">if</span> (potion == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> HEALING:</span><br><span class="line">          potion = <span class="keyword">new</span> HealingPotion();</span><br><span class="line">          potions.put(type, potion);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> HOLY_WATER:</span><br><span class="line">          potion = <span class="keyword">new</span> HolyWaterPotion();</span><br><span class="line">          potions.put(type, potion);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> INVISIBILITY:</span><br><span class="line">          potion = <span class="keyword">new</span> InvisibilityPotion();</span><br><span class="line">          potions.put(type, potion);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> POISON:</span><br><span class="line">          potion = <span class="keyword">new</span> PoisonPotion();</span><br><span class="line">          potions.put(type, potion);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> STRENGTH:</span><br><span class="line">          potion = <span class="keyword">new</span> StrengthPotion();</span><br><span class="line">          potions.put(type, potion);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> potion;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AlchemistShop holds potions on its shelves. It uses PotionFactory to provide the potions.</span></span><br><span class="line"><span class="comment"> AlchemistShop在架子上放着药水。 它使用PotionFactory提供药水。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlchemistShop</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(AlchemistShop<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> List&lt;Potion&gt; topShelf;</span><br><span class="line">  <span class="keyword">private</span> List&lt;Potion&gt; bottomShelf;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Constructor.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">AlchemistShop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> factory = <span class="keyword">new</span> PotionFactory();</span><br><span class="line">    topShelf = List.of(</span><br><span class="line">        factory.createPotion(PotionType.INVISIBILITY),</span><br><span class="line">        factory.createPotion(PotionType.INVISIBILITY),</span><br><span class="line">        factory.createPotion(PotionType.STRENGTH),</span><br><span class="line">        factory.createPotion(PotionType.HEALING),</span><br><span class="line">        factory.createPotion(PotionType.INVISIBILITY),</span><br><span class="line">        factory.createPotion(PotionType.STRENGTH),</span><br><span class="line">        factory.createPotion(PotionType.HEALING),</span><br><span class="line">        factory.createPotion(PotionType.HEALING)</span><br><span class="line">    );</span><br><span class="line">    bottomShelf = List.of(</span><br><span class="line">        factory.createPotion(PotionType.POISON),</span><br><span class="line">        factory.createPotion(PotionType.POISON),</span><br><span class="line">        factory.createPotion(PotionType.POISON),</span><br><span class="line">        factory.createPotion(PotionType.HOLY_WATER),</span><br><span class="line">        factory.createPotion(PotionType.HOLY_WATER)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Get a read-only list of all the items on the top shelf.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> The top shelf potions</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> List&lt;Potion&gt; <span class="title">getTopShelf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> List.copyOf(<span class="keyword">this</span>.topShelf);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Get a read-only list of all the items on the bottom shelf.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> The bottom shelf potions</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> List&lt;Potion&gt; <span class="title">getBottomShelf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> List.copyOf(<span class="keyword">this</span>.bottomShelf);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Enumerate potions.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enumerate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"Enumerating top shelf potions\n"</span>);</span><br><span class="line">    topShelf.forEach(Potion::drink);</span><br><span class="line">    LOGGER.info(<span class="string">"Enumerating bottom shelf potions\n"</span>);</span><br><span class="line">    bottomShelf.forEach(Potion::drink);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Flyweight pattern is useful when the program needs a huge amount of objects. It provides means to</span></span><br><span class="line"><span class="comment"> * decrease resource usage by sharing object instances.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;In this example &#123;<span class="doctag">@link</span> AlchemistShop&#125; has great amount of potions on its shelves. To fill the</span></span><br><span class="line"><span class="comment"> * shelves &#123;<span class="doctag">@link</span> AlchemistShop&#125; uses &#123;<span class="doctag">@link</span> PotionFactory&#125; (which represents the Flyweight in this</span></span><br><span class="line"><span class="comment"> * example). Internally &#123;<span class="doctag">@link</span> PotionFactory&#125; holds a map of the potions and lazily creates new ones</span></span><br><span class="line"><span class="comment"> * when requested.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;To enable safe sharing, between clients and threads, Flyweight objects must be immutable.</span></span><br><span class="line"><span class="comment"> * Flyweight objects are by definition value objects.</span></span><br><span class="line"><span class="comment"> 当程序需要大量对象时，Flyweight模式非常有用。 它提供了通过共享对象实例来减少资源使用的方法。</span></span><br><span class="line"><span class="comment">&lt;p&gt;在此示例中，&#123;@ link AlchemistShop&#125;的货架上有大量药水。 为了填充货架，&#123;@ link AlchemistShop&#125;使用了&#123;<span class="doctag">@link</span> PotionFactory&#125;（在此代表着Flyweight</span></span><br><span class="line"><span class="comment">例）。 内部&#123;<span class="doctag">@link</span> PotionFactory&#125;拥有一张药水地图，并在需要时懒惰地创建新药水。</span></span><br><span class="line"><span class="comment">&lt;p&gt;要在客户端和线程之间实现安全共享，Flyweight对象必须是不可变的。 Flyweight对象是定义值对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Program entry point.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> args command line args</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> alchemistShop = <span class="keyword">new</span> AlchemistShop();</span><br><span class="line">    alchemistShop.enumerate();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><h2 id="String中的享元模式"><a href="#String中的享元模式" class="headerlink" title="String中的享元模式"></a>String中的享元模式</h2><p>Java中将String类定义为final（不可改变的），JVM中字符串一般保存在字符串常量池中，java会确保一个字符串在常量池中只有一个拷贝，这个字符串常量池在JDK6.0以前是位于常量池中，位于永久代，而在JDK7.0中，JVM将其从永久代拿出来放置于堆中。<br>我们做一个测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">"hello"</span>;</span><br><span class="line">        String s2 = <span class="string">"hello"</span>;</span><br><span class="line">        String s3 = <span class="string">"he"</span> + <span class="string">"llo"</span>;</span><br><span class="line">        String s4 = <span class="string">"hel"</span> + <span class="keyword">new</span> String(<span class="string">"lo"</span>);</span><br><span class="line">        String s5 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">        String s6 = s5.intern();</span><br><span class="line">        String s7 = <span class="string">"h"</span>;</span><br><span class="line">        String s8 = <span class="string">"ello"</span>;</span><br><span class="line">        String s9 = s7 + s8;</span><br><span class="line">        System.out.println(s1==s2);<span class="comment">//true</span></span><br><span class="line">        System.out.println(s1==s3);<span class="comment">//true</span></span><br><span class="line">        System.out.println(s1==s4);<span class="comment">//false</span></span><br><span class="line">        System.out.println(s1==s9);<span class="comment">//false</span></span><br><span class="line">        System.out.println(s4==s5);<span class="comment">//false</span></span><br><span class="line">        System.out.println(s1==s6);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>String类的final修饰的，以字面量的形式创建String变量时，jvm会在编译期间就把该字面量hello放到字符串常量池中，由Java程序启动的时候就已经加载到内存中了。这个字符串常量池的特点就是有且只有一份相同的字面量，如果有其它相同的字面量，jvm则返回这个字面量的引用，如果没有相同的字面量，则在字符串常量池创建这个字面量并返回它的引用。</p>
<p>由于s2指向的字面量hello在常量池中已经存在了（s1先于s2），于是jvm就返回这个字面量绑定的引用，所以s1==s2。</p>
<p>s3中字面量的拼接其实就是hello，jvm在编译期间就已经对它进行优化，所以s1和s3也是相等的。</p>
<p>s4中的new String(“lo”)生成了两个对象，lo，new String(“lo”)，lo存在字符串常量池，new String(“lo”)存在堆中，String s4 = “hel” + new String(“lo”)实质上是两个对象的相加，编译器不会进行优化，相加的结果存在堆中，而s1存在字符串常量池中，当然不相等。s1==s9的原理一样。</p>
<p>s4==s5两个相加的结果都在堆中，不用说，肯定不相等。</p>
<p>s1==s6中，s5.intern()方法能使一个位于堆中的字符串在运行期间动态地加入到字符串常量池中（字符串常量池的内容是程序启动的时候就已经加载好了），如果字符串常量池中有该对象对应的字面量，则返回该字面量在字符串常量池中的引用，否则，创建复制一份该字面量到字符串常量池并返回它的引用。因此s1==s6输出true。</p>
<h2 id="Integer-中的享元模式"><a href="#Integer-中的享元模式" class="headerlink" title="Integer 中的享元模式"></a>Integer 中的享元模式</h2><p>使用例子如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer i1 = <span class="number">12</span> ;</span><br><span class="line">        Integer i2 = <span class="number">12</span> ;</span><br><span class="line">        System.out.println(i1 == i2);</span><br><span class="line"></span><br><span class="line">        Integer b1 = <span class="number">128</span> ;</span><br><span class="line">        Integer b2 = <span class="number">128</span> ;</span><br><span class="line">        System.out.println(b1 == b2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>输出是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure>
<p>为什么第一个是true，第二个是false？<br>反编译后可以发现 Integer b1 = 128; 实际变成了 Integer b1 = Integer.valueOf(128);，所以我们来看 Integer 中的 valueOf 方法的实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Integer</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> var0)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> var0 &gt;= -<span class="number">128</span> &amp;&amp; var0 &lt;= Integer.IntegerCache.high ? Integer.IntegerCache.cache[var0 + <span class="number">128</span>] : <span class="keyword">new</span> Integer(var0);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>IntegerCache 缓存类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//是Integer内部的私有静态类,里面的cache[]就是jdk事先缓存的Integer。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;<span class="comment">//区间的最低值</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;<span class="comment">//区间的最高值，后面默认赋值为127，也可以用户手动设置虚拟机参数</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[]; <span class="comment">//缓存数组</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="comment">// high value may be configured by property</span></span><br><span class="line">            <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">            <span class="comment">//这里可以在运行时设置虚拟机参数来确定h  :-Djava.lang.Integer.IntegerCache.high=250</span></span><br><span class="line">            String integerCacheHighPropValue =</span><br><span class="line">                sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</span><br><span class="line">            <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;<span class="comment">//用户设置了</span></span><br><span class="line">                <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">                i = Math.max(i, <span class="number">127</span>);<span class="comment">//虽然设置了但是还是不能小于127</span></span><br><span class="line">                <span class="comment">// 也不能超过最大值</span></span><br><span class="line">                h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            high = h;</span><br><span class="line"></span><br><span class="line">            cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> j = low;</span><br><span class="line">            <span class="comment">//循环将区间的数赋值给cache[]数组</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">                cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>可以看到 Integer 默认先创建并缓存 -128 ~ 127 之间数的 Integer 对象，当调用 valueOf 时如果参数在 -128 ~ 127 之间则计算下标并从缓存中返回，否则创建一个新的 Integer 对象</p>
<h2 id="Long中的享元模式"><a href="#Long中的享元模式" class="headerlink" title="Long中的享元模式"></a>Long中的享元模式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Long</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title">valueOf</span><span class="params">(<span class="keyword">long</span> var0)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> var0 &gt;= -<span class="number">128L</span> &amp;&amp; var0 &lt;= <span class="number">127L</span> ? Long.LongCache.cache[(<span class="keyword">int</span>)var0 + <span class="number">128</span>] : <span class="keyword">new</span> Long(var0);</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LongCache</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">LongCache</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Long cache[] = <span class="keyword">new</span> Long[-(-<span class="number">128</span>) + <span class="number">127</span> + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cache.length; i++)</span><br><span class="line">                cache[i] = <span class="keyword">new</span> Long(i - <span class="number">128</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同理，Long 中也有缓存，不过不能指定缓存最大值</p>
<h2 id="Apache-Commons-Pool2中的享元模式"><a href="#Apache-Commons-Pool2中的享元模式" class="headerlink" title="Apache Commons Pool2中的享元模式"></a>Apache Commons Pool2中的享元模式</h2><p>对象池化的基本思路是：将用过的对象保存起来，等下一次需要这种对象的时候，再拿出来重复使用，从而在一定程度上减少频繁创建对象所造成的开销。用于充当保存对象的“容器”的对象，被称为“对象池”（Object Pool，或简称Pool）</p>
<p>Apache Commons Pool实现了对象池的功能。定义了对象的生成、销毁、激活、钝化等操作及其状态转换，并提供几个默认的对象池实现。</p>
<p>有几个重要的对象：</p>
<p>PooledObject（池对象）：用于封装对象（如：线程、数据库连接、TCP连接），将其包裹成可被池管理的对象。<br>PooledObjectFactory（池对象工厂）：定义了操作PooledObject实例生命周期的一些方法，PooledObjectFactory必须实现线程安全。<br>Object Pool （对象池）：Object Pool负责管理PooledObject，如：借出对象，返回对象，校验对象，有多少激活对象，有多少空闲对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对象池</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;S, PooledObject&lt;S&gt;&gt; allObjects = <span class="keyword">new</span> ConcurrentHashMap&lt;S, PooledObject&lt;S&gt;&gt;();</span><br></pre></td></tr></table></figure>
<p>重要方法：<br>borrowObject：从池中借出一个对象。<br>returnObject：将一个对象返还给池。</p>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>结构型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>迭代子模式</title>
    <url>/design-pattern/iterator/</url>
    <content><![CDATA[<h1 id="迭代子模式UML类图"><a href="#迭代子模式UML类图" class="headerlink" title="迭代子模式UML类图"></a>迭代子模式UML类图</h1><p><img src="../../images/plantuml/iterator.urm.png" alt="迭代子模式UML类图"></p>
<a id="more"></a>
<h1 id="迭代子模式java实现"><a href="#迭代子模式java实现" class="headerlink" title="迭代子模式java实现"></a>迭代子模式java实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ItemType enumeration.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ItemType &#123;</span><br><span class="line">  <span class="comment">//任何，武器，戒指，药水</span></span><br><span class="line">  ANY, WEAPON, RING, POTION</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Iterator interface to be implemented by iterators over various data structures.</span></span><br><span class="line"><span class="comment"> 迭代器接口，由迭代器在各种数据结构上实现。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; generically typed for various objects</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Item.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ItemType type;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Item</span><span class="params">(ItemType type, String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setType(type);</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ItemType <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> type;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(ItemType type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.type = type;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TreasureChest, the collection class.</span></span><br><span class="line"><span class="comment"> 百宝箱，集合类。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreasureChest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> List&lt;Item&gt; items;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Constructor.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TreasureChest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    items = List.of(</span><br><span class="line">        <span class="keyword">new</span> Item(ItemType.POTION, <span class="string">"Potion of courage"</span>),</span><br><span class="line">        <span class="keyword">new</span> Item(ItemType.RING, <span class="string">"Ring of shadows"</span>),</span><br><span class="line">        <span class="keyword">new</span> Item(ItemType.POTION, <span class="string">"Potion of wisdom"</span>),</span><br><span class="line">        <span class="keyword">new</span> Item(ItemType.POTION, <span class="string">"Potion of blood"</span>),</span><br><span class="line">        <span class="keyword">new</span> Item(ItemType.WEAPON, <span class="string">"Sword of silver +1"</span>),</span><br><span class="line">        <span class="keyword">new</span> Item(ItemType.POTION, <span class="string">"Potion of rust"</span>),</span><br><span class="line">        <span class="keyword">new</span> Item(ItemType.POTION, <span class="string">"Potion of healing"</span>),</span><br><span class="line">        <span class="keyword">new</span> Item(ItemType.RING, <span class="string">"Ring of armor"</span>),</span><br><span class="line">        <span class="keyword">new</span> Item(ItemType.WEAPON, <span class="string">"Steel halberd"</span>),</span><br><span class="line">        <span class="keyword">new</span> Item(ItemType.WEAPON, <span class="string">"Dagger of poison"</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">(ItemType itemType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TreasureChestItemIterator(<span class="keyword">this</span>, itemType);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Get all items.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Item&gt; <span class="title">getItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(items);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TreasureChestItemIterator.</span></span><br><span class="line"><span class="comment"> 百宝箱物品迭代器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreasureChestItemIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> TreasureChest chest;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> idx;</span><br><span class="line">  <span class="keyword">private</span> ItemType type;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Constructor.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TreasureChestItemIterator</span><span class="params">(TreasureChest chest, ItemType type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.chest = chest;</span><br><span class="line">    <span class="keyword">this</span>.type = type;</span><br><span class="line">    <span class="keyword">this</span>.idx = -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> findNextIdx() != -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Item <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    idx = findNextIdx();</span><br><span class="line">    <span class="keyword">if</span> (idx != -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> chest.getItems().get(idx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">findNextIdx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> items = chest.getItems();</span><br><span class="line">    <span class="keyword">var</span> tempIdx = idx;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      tempIdx++;</span><br><span class="line">      <span class="keyword">if</span> (tempIdx &gt;= items.size()) &#123;</span><br><span class="line">        tempIdx = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (type.equals(ItemType.ANY) || items.get(tempIdx).getType().equals(type)) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tempIdx;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Iterator pattern is a design pattern in which an iterator is used to traverse a container and</span></span><br><span class="line"><span class="comment"> * access the container's elements. The Iterator pattern decouples algorithms from containers.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;In this example the Iterator (&#123;<span class="doctag">@link</span> Iterator&#125;) adds abstraction layer on top of a collection</span></span><br><span class="line"><span class="comment"> * (&#123;<span class="doctag">@link</span> TreasureChest&#125;). This way the collection can change its internal implementation without</span></span><br><span class="line"><span class="comment"> * affecting its clients.</span></span><br><span class="line"><span class="comment"> 迭代器模式是一种设计模式，其中迭代器用于遍历容器并访问容器的元素。 迭代器模式将算法与容器解耦。</span></span><br><span class="line"><span class="comment">&lt;p&gt;在此示例中，迭代器（&#123;<span class="doctag">@link</span> Iterator&#125;）在集合（&#123;<span class="doctag">@link</span> TreasureChest&#125;）的顶部添加了抽象层。 这样，集合可以更改其内部实现，而不会影响其客户端。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(App<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> TreasureChest TREASURE_CHEST = <span class="keyword">new</span> TreasureChest();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demonstrateTreasureChestIteratorForType</span><span class="params">(ItemType itemType)</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"------------------------"</span>);</span><br><span class="line">    LOGGER.info(<span class="string">"Item Iterator for ItemType "</span> + itemType + <span class="string">": "</span>);</span><br><span class="line">    <span class="keyword">var</span> itemIterator = TREASURE_CHEST.iterator(itemType);</span><br><span class="line">    <span class="keyword">while</span> (itemIterator.hasNext()) &#123;</span><br><span class="line">      LOGGER.info(itemIterator.next().toString());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demonstrateBstIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"------------------------"</span>);</span><br><span class="line">    LOGGER.info(<span class="string">"BST Iterator: "</span>);</span><br><span class="line">    <span class="keyword">var</span> root = buildIntegerBst();</span><br><span class="line">    <span class="keyword">var</span> bstIterator = <span class="keyword">new</span> BstIterator&lt;Integer&gt;(root);</span><br><span class="line">    <span class="keyword">while</span> (bstIterator.hasNext()) &#123;</span><br><span class="line">      LOGGER.info(<span class="string">"Next node: "</span> + bstIterator.next().getVal());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> TreeNode&lt;Integer&gt; <span class="title">buildIntegerBst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> root = <span class="keyword">new</span> TreeNode&lt;&gt;(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    root.insert(<span class="number">3</span>);</span><br><span class="line">    root.insert(<span class="number">10</span>);</span><br><span class="line">    root.insert(<span class="number">1</span>);</span><br><span class="line">    root.insert(<span class="number">6</span>);</span><br><span class="line">    root.insert(<span class="number">14</span>);</span><br><span class="line">    root.insert(<span class="number">4</span>);</span><br><span class="line">    root.insert(<span class="number">7</span>);</span><br><span class="line">    root.insert(<span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Program entry point.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> args command line args</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    demonstrateTreasureChestIteratorForType(RING);</span><br><span class="line">    demonstrateTreasureChestIteratorForType(POTION);</span><br><span class="line">    demonstrateTreasureChestIteratorForType(WEAPON);</span><br><span class="line">    demonstrateTreasureChestIteratorForType(ANY);</span><br><span class="line"></span><br><span class="line">    demonstrateBstIterator();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
        <category>行为型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>中介者模式</title>
    <url>/design-pattern/mediator/</url>
    <content><![CDATA[<h1 id="中介者模式UML类图"><a href="#中介者模式UML类图" class="headerlink" title="中介者模式UML类图"></a>中介者模式UML类图</h1><p><img src="../../images/plantuml/mediator.urm.png" alt="中介者模式UML类图"></p>
<a id="more"></a>
<h1 id="中介者模式java实现"><a href="#中介者模式java实现" class="headerlink" title="中介者模式java实现"></a>中介者模式java实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Action enumeration.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Action &#123;</span><br><span class="line"></span><br><span class="line">  HUNT(<span class="string">"hunted a rabbit"</span>, <span class="string">"arrives for dinner"</span>),</span><br><span class="line">  TALE(<span class="string">"tells a tale"</span>, <span class="string">"comes to listen"</span>),</span><br><span class="line">  GOLD(<span class="string">"found gold"</span>, <span class="string">"takes his share of the gold"</span>),</span><br><span class="line">  ENEMY(<span class="string">"spotted enemies"</span>, <span class="string">"runs for cover"</span>),</span><br><span class="line">  NONE(<span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String title;</span><br><span class="line">  <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">  Action(String title, String description) &#123;</span><br><span class="line">    <span class="keyword">this</span>.title = title;</span><br><span class="line">    <span class="keyword">this</span>.description = description;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> description;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> title;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Party interface.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Party</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addMember</span><span class="params">(PartyMember member)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">act</span><span class="params">(PartyMember actor, Action action)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface for party members interacting with &#123;<span class="doctag">@link</span> Party&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PartyMember</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">joinedParty</span><span class="params">(Party party)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">partyAction</span><span class="params">(Action action)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">act</span><span class="params">(Action action)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Party implementation.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PartyImpl</span> <span class="keyword">implements</span> <span class="title">Party</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> List&lt;PartyMember&gt; members;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">PartyImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    members = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">act</span><span class="params">(PartyMember actor, Action action)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (PartyMember member : members) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!member.equals(actor)) &#123;</span><br><span class="line">        member.partyAction(action);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMember</span><span class="params">(PartyMember member)</span> </span>&#123;</span><br><span class="line">    members.add(member);</span><br><span class="line">    member.joinedParty(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Abstract base class for party members.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PartyMemberBase</span> <span class="keyword">implements</span> <span class="title">PartyMember</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(PartyMemberBase<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> Party party;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">joinedParty</span><span class="params">(Party party)</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"&#123;&#125; joins the party"</span>, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.party = party;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">partyAction</span><span class="params">(Action action)</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"&#123;&#125; &#123;&#125;"</span>, <span class="keyword">this</span>, action.getDescription());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">act</span><span class="params">(Action action)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (party != <span class="keyword">null</span>) &#123;</span><br><span class="line">      LOGGER.info(<span class="string">"&#123;&#125; &#123;&#125;"</span>, <span class="keyword">this</span>, action);</span><br><span class="line">      party.act(<span class="keyword">this</span>, action);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hobbit party member.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hobbit</span> <span class="keyword">extends</span> <span class="title">PartyMemberBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hobbit"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hunter party member.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hunter</span> <span class="keyword">extends</span> <span class="title">PartyMemberBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hunter"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Rogue party member.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rogue</span> <span class="keyword">extends</span> <span class="title">PartyMemberBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Rogue"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Wizard party member.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wizard</span> <span class="keyword">extends</span> <span class="title">PartyMemberBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Wizard"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Mediator pattern defines an object that encapsulates how a set of objects interact. This</span></span><br><span class="line"><span class="comment"> * pattern is considered to be a behavioral pattern due to the way it can alter the program's</span></span><br><span class="line"><span class="comment"> * running behavior.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Usually a program is made up of a large number of classes. So the logic and computation is</span></span><br><span class="line"><span class="comment"> * distributed among these classes. However, as more classes are developed in a program, especially</span></span><br><span class="line"><span class="comment"> * during maintenance and/or refactoring, the problem of communication between these classes may</span></span><br><span class="line"><span class="comment"> * become more complex. This makes the program harder to read and maintain. Furthermore, it can</span></span><br><span class="line"><span class="comment"> * become difficult to change the program, since any change may affect code in several other</span></span><br><span class="line"><span class="comment"> * classes.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;With the Mediator pattern, communication between objects is encapsulated with a mediator</span></span><br><span class="line"><span class="comment"> * object. Objects no longer communicate directly with each other, but instead communicate through</span></span><br><span class="line"><span class="comment"> * the mediator. This reduces the dependencies between communicating objects, thereby lowering the</span></span><br><span class="line"><span class="comment"> * coupling.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;In this example the mediator encapsulates how a set of objects (&#123;<span class="doctag">@link</span> PartyMember&#125;)</span></span><br><span class="line"><span class="comment"> * interact. Instead of referring to each other directly they use the mediator (&#123;<span class="doctag">@link</span> Party&#125;)</span></span><br><span class="line"><span class="comment"> * interface.</span></span><br><span class="line"><span class="comment"> 介体模式定义了一个对象，该对象封装了一组对象之间的交互方式。由于该模式可以更改程序的运行行为，因此该模式被视为行为模式。</span></span><br><span class="line"><span class="comment">&lt;p&gt;通常，一个程序由许多类组成。因此，逻辑和计算分布在这些类之间。但是，随着程序中开发出更多的类，尤其是在维护和/或重构期间，这些类之间的通信问题可能会变得更加复杂。这使得程序难以阅读和维护。此外，更改程序可能变得困难，因为任何更改都可能影响其他几个类中的代码。</span></span><br><span class="line"><span class="comment">&lt;p&gt;在Mediator模式下，对象之间的通信被Mediator对象封装。对象不再彼此直接通信，而是通过调解器进行通信。这减少了通信对象之间的依赖性，从而降低了耦合。</span></span><br><span class="line"><span class="comment">&lt;p&gt;在此示例中，中介者封装了一组对象（&#123;<span class="doctag">@link</span> PartyMember&#125;）如何交互。他们使用中介器（&#123;<span class="doctag">@link</span> Party&#125;）界面而不是直接相互引用。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Program entry point.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> args command line args</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create party and members</span></span><br><span class="line">    Party party = <span class="keyword">new</span> PartyImpl();</span><br><span class="line">    Hobbit hobbit = <span class="keyword">new</span> Hobbit();</span><br><span class="line">    Wizard wizard = <span class="keyword">new</span> Wizard();</span><br><span class="line">    Rogue rogue = <span class="keyword">new</span> Rogue();</span><br><span class="line">    Hunter hunter = <span class="keyword">new</span> Hunter();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add party members</span></span><br><span class="line">    party.addMember(hobbit);</span><br><span class="line">    party.addMember(wizard);</span><br><span class="line">    party.addMember(rogue);</span><br><span class="line">    party.addMember(hunter);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// perform actions -&gt; the other party members</span></span><br><span class="line">    <span class="comment">// are notified by the party</span></span><br><span class="line">    hobbit.act(Action.ENEMY);</span><br><span class="line">    wizard.act(Action.TALE);</span><br><span class="line">    rogue.act(Action.GOLD);</span><br><span class="line">    hunter.act(Action.HUNT);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
        <category>行为型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>解释器模式</title>
    <url>/design-pattern/interpreter/</url>
    <content><![CDATA[<h1 id="解释器模式UML类图"><a href="#解释器模式UML类图" class="headerlink" title="解释器模式UML类图"></a>解释器模式UML类图</h1><p><img src="../../images/plantuml/interpreter.urm.png" alt="解释器模式UML类图"></p>
<a id="more"></a>
<h1 id="解释器模式java实现"><a href="#解释器模式java实现" class="headerlink" title="解释器模式java实现"></a>解释器模式java实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Expression.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PlusExpression.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlusExpression</span> <span class="keyword">extends</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Expression leftExpression;</span><br><span class="line">  <span class="keyword">private</span> Expression rightExpression;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">PlusExpression</span><span class="params">(Expression leftExpression, Expression rightExpression)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.leftExpression = leftExpression;</span><br><span class="line">    <span class="keyword">this</span>.rightExpression = rightExpression;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> leftExpression.interpret() + rightExpression.interpret();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"+"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MinusExpression.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinusExpression</span> <span class="keyword">extends</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Expression leftExpression;</span><br><span class="line">  <span class="keyword">private</span> Expression rightExpression;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MinusExpression</span><span class="params">(Expression leftExpression, Expression rightExpression)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.leftExpression = leftExpression;</span><br><span class="line">    <span class="keyword">this</span>.rightExpression = rightExpression;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> leftExpression.interpret() - rightExpression.interpret();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"-"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MultiplyExpression.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiplyExpression</span> <span class="keyword">extends</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Expression leftExpression;</span><br><span class="line">  <span class="keyword">private</span> Expression rightExpression;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MultiplyExpression</span><span class="params">(Expression leftExpression, Expression rightExpression)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.leftExpression = leftExpression;</span><br><span class="line">    <span class="keyword">this</span>.rightExpression = rightExpression;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> leftExpression.interpret() * rightExpression.interpret();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"*"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * NumberExpression.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberExpression</span> <span class="keyword">extends</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">NumberExpression</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.number = number;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">NumberExpression</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.number = Integer.parseInt(s);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> number;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"number"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Interpreter pattern is a design pattern that specifies how to evaluate sentences in a</span></span><br><span class="line"><span class="comment"> * language. The basic idea is to have a class for each symbol (terminal or nonterminal) in a</span></span><br><span class="line"><span class="comment"> * specialized computer language. The syntax tree of a sentence in the language is an instance of</span></span><br><span class="line"><span class="comment"> * the composite pattern and is used to evaluate (interpret) the sentence for a client.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;In this example we use the Interpreter pattern to break sentences into expressions (&#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * Expression&#125;) that can be evaluated and as a whole form the result.</span></span><br><span class="line"><span class="comment"> 口译员模式是一种设计模式，用于指定如何评估语言中的句子。 基本思想是为使用专用计算机语言的每个符号（终端或非终端）提供一个类。 该语言中句子的语法树是复合模式的一个实例，用于为客户评估（解释）该句子。</span></span><br><span class="line"><span class="comment">&lt;p&gt;在此示例中，我们使用“解释器”模式将句子分解为可求值的表达式（&#123;<span class="doctag">@link</span> Expression&#125;），并从整体上形成结果。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(App<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Program entry point.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * &lt;p&gt;Expressions can be evaluated using prefix, infix or postfix notations This sample uses</span></span><br><span class="line"><span class="comment">   * postfix, where operator comes after the operands.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> args command line args</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tokenString = <span class="string">"4 3 2 - 1 + *"</span>;</span><br><span class="line">    <span class="keyword">var</span> stack = <span class="keyword">new</span> Stack&lt;Expression&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> tokenList = tokenString.split(<span class="string">" "</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> s : tokenList) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isOperator(s)) &#123;</span><br><span class="line">        <span class="keyword">var</span> rightExpression = stack.pop();</span><br><span class="line">        <span class="keyword">var</span> leftExpression = stack.pop();</span><br><span class="line">        LOGGER.info(<span class="string">"popped from stack left: &#123;&#125; right: &#123;&#125;"</span>,</span><br><span class="line">            leftExpression.interpret(), rightExpression.interpret());</span><br><span class="line">        <span class="keyword">var</span> operator = getOperatorInstance(s, leftExpression, rightExpression);</span><br><span class="line">        LOGGER.info(<span class="string">"operator: &#123;&#125;"</span>, operator);</span><br><span class="line">        <span class="keyword">var</span> result = operator.interpret();</span><br><span class="line">        <span class="keyword">var</span> resultExpression = <span class="keyword">new</span> NumberExpression(result);</span><br><span class="line">        stack.push(resultExpression);</span><br><span class="line">        LOGGER.info(<span class="string">"push result to stack: &#123;&#125;"</span>, resultExpression.interpret());</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="keyword">new</span> NumberExpression(s);</span><br><span class="line">        stack.push(i);</span><br><span class="line">        LOGGER.info(<span class="string">"push to stack: &#123;&#125;"</span>, i.interpret());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    LOGGER.info(<span class="string">"result: &#123;&#125;"</span>, stack.pop().interpret());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isOperator</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.equals(<span class="string">"+"</span>) || s.equals(<span class="string">"-"</span>) || s.equals(<span class="string">"*"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Get expression for string.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Expression <span class="title">getOperatorInstance</span><span class="params">(String s, Expression left, Expression right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (s) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PlusExpression(left, right);</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MinusExpression(left, right);</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MultiplyExpression(left, right);</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MultiplyExpression(left, right);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
        <category>行为型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>观察者模式</title>
    <url>/design-pattern/observer/</url>
    <content><![CDATA[<h1 id="观察者设计模式UML类图"><a href="#观察者设计模式UML类图" class="headerlink" title="观察者设计模式UML类图"></a>观察者设计模式UML类图</h1><p><img src="../../images/plantuml/observer.urm.png" alt="观察者UML类图"></p>
<a id="more"></a>
<h1 id="观察者设计模式java实现"><a href="#观察者设计模式java实现" class="headerlink" title="观察者设计模式java实现"></a>观察者设计模式java实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WeatherType enumeration.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> WeatherType &#123;</span><br><span class="line"></span><br><span class="line">  SUNNY, RAINY, WINDY, COLD;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name().toLowerCase();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Observer interface.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WeatherObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(WeatherType currentWeather)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Orcs.兽人</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orcs</span> <span class="keyword">implements</span> <span class="title">WeatherObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Orcs<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(WeatherType currentWeather)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (currentWeather) &#123;</span><br><span class="line">      <span class="keyword">case</span> COLD:</span><br><span class="line">        <span class="comment">//兽人是冰冷的。</span></span><br><span class="line">        LOGGER.info(<span class="string">"The orcs are freezing cold."</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> RAINY:</span><br><span class="line">        <span class="comment">//兽人湿淋淋的。</span></span><br><span class="line">        LOGGER.info(<span class="string">"The orcs are dripping wet."</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> SUNNY:</span><br><span class="line">        <span class="comment">//太阳伤害了兽人的眼睛。</span></span><br><span class="line">        LOGGER.info(<span class="string">"The sun hurts the orcs' eyes."</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> WINDY:</span><br><span class="line">        <span class="comment">//兽人的气味在风中几乎消失了。</span></span><br><span class="line">        LOGGER.info(<span class="string">"The orc smell almost vanishes in the wind."</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hobbits.霍比特人</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hobbits</span> <span class="keyword">implements</span> <span class="title">WeatherObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Hobbits<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(WeatherType currentWeather)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (currentWeather) &#123;</span><br><span class="line">      <span class="keyword">case</span> COLD:</span><br><span class="line">        <span class="comment">//霍比特人在寒冷的天气中发抖。</span></span><br><span class="line">        LOGGER.info(<span class="string">"The hobbits are shivering in the cold weather."</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> RAINY:</span><br><span class="line">        <span class="comment">//霍比特人从雨中寻找掩饰。</span></span><br><span class="line">        LOGGER.info(<span class="string">"The hobbits look for cover from the rain."</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> SUNNY:</span><br><span class="line">        <span class="comment">//快乐的霍比特人在温暖的阳光下歌唱。</span></span><br><span class="line">        LOGGER.info(<span class="string">"The happy hobbits bade in the warm sun."</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> WINDY:</span><br><span class="line">        <span class="comment">//霍比特人在大风天紧紧地戴上帽子。</span></span><br><span class="line">        LOGGER.info(<span class="string">"The hobbits hold their hats tightly in the windy weather."</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Weather can be observed by implementing &#123;<span class="doctag">@link</span> WeatherObserver&#125; interface and registering as</span></span><br><span class="line"><span class="comment"> * listener.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Weather<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> WeatherType currentWeather;</span><br><span class="line">  <span class="keyword">private</span> List&lt;WeatherObserver&gt; observers;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Weather</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    currentWeather = WeatherType.SUNNY;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(WeatherObserver obs)</span> </span>&#123;</span><br><span class="line">    observers.add(obs);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(WeatherObserver obs)</span> </span>&#123;</span><br><span class="line">    observers.remove(obs);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Makes time pass for weather.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timePasses</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    WeatherType[] enumValues = WeatherType.values();</span><br><span class="line">    currentWeather = enumValues[(currentWeather.ordinal() + <span class="number">1</span>) % enumValues.length];</span><br><span class="line">    LOGGER.info(<span class="string">"The weather changed to &#123;&#125;."</span>, currentWeather);</span><br><span class="line">    notifyObservers();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (WeatherObserver obs : observers) &#123;</span><br><span class="line">      obs.update(currentWeather);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Observer pattern is a software design pattern in which an object, called the subject,</span></span><br><span class="line"><span class="comment"> * maintains a list of its dependents, called observers, and notifies them automatically of any</span></span><br><span class="line"><span class="comment"> * state changes, usually by calling one of their methods. It is mainly used to implement</span></span><br><span class="line"><span class="comment"> * distributed event handling systems. The Observer pattern is also a key part in the familiar</span></span><br><span class="line"><span class="comment"> * model–view–controller (MVC) architectural pattern. The Observer pattern is implemented in</span></span><br><span class="line"><span class="comment"> * numerous programming libraries and systems, including almost all GUI toolkits.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;In this example &#123;<span class="doctag">@link</span> Weather&#125; has a state that can be observed. The &#123;<span class="doctag">@link</span> Orcs&#125; and &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * Hobbits&#125; register as observers and receive notifications when the &#123;<span class="doctag">@link</span> Weather&#125; changes.</span></span><br><span class="line"><span class="comment"> 观察者模式是一种软件设计模式，在该模式中，称为主题的对象会维护其依赖项的列表（称为观察者），并通常通过调用其方法之一来自动通知状态更改。 它主要用于实现分布式事件处理系统。 观察者模式也是熟悉的模型-视图-控制器（MVC）体系结构模式中的关键部分。 Observer模式在众多编程库和系统中实现，包括几乎所有的GUI工具包。</span></span><br><span class="line"><span class="comment">&lt;p&gt;在此示例中，&#123;@ link Weather&#125;的状态可以观察到。 &#123;<span class="doctag">@link</span> Orcs&#125;和&#123;<span class="doctag">@link</span> Hobbits&#125;注册为观察者，并在&#123;<span class="doctag">@link</span> Weather&#125;更改时接收通知。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(App<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Program entry point.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> args command line args</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Weather weather = <span class="keyword">new</span> Weather();</span><br><span class="line">    weather.addObserver(<span class="keyword">new</span> Orcs());</span><br><span class="line">    weather.addObserver(<span class="keyword">new</span> Hobbits());</span><br><span class="line"></span><br><span class="line">    weather.timePasses();</span><br><span class="line">    weather.timePasses();</span><br><span class="line">    weather.timePasses();</span><br><span class="line">    weather.timePasses();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generic observer inspired by Java Generics and Collection by Naftalin &amp; Wadler</span></span><br><span class="line">    LOGGER.info(<span class="string">"--Running generic version--"</span>);</span><br><span class="line">    GWeather genericWeather = <span class="keyword">new</span> GWeather();</span><br><span class="line">    genericWeather.addObserver(<span class="keyword">new</span> GOrcs());</span><br><span class="line">    genericWeather.addObserver(<span class="keyword">new</span> GHobbits());</span><br><span class="line"></span><br><span class="line">    genericWeather.timePasses();</span><br><span class="line">    genericWeather.timePasses();</span><br><span class="line">    genericWeather.timePasses();</span><br><span class="line">    genericWeather.timePasses();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="极客时间"><a href="#极客时间" class="headerlink" title="极客时间"></a>极客时间</h1><h2 id="实际应用案例"><a href="#实际应用案例" class="headerlink" title="实际应用案例"></a>实际应用案例</h2><ul>
<li>EventBus Guava 事件总线</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>行为型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>原型模式</title>
    <url>/design-pattern/prototype/</url>
    <content><![CDATA[<h1 id="原型设计模式UML类图"><a href="#原型设计模式UML类图" class="headerlink" title="原型设计模式UML类图"></a>原型设计模式UML类图</h1><p><img src="../../images/plantuml/prototype.urm.png" alt="原型设计模式UML类图"></p>
<a id="more"></a>
<h1 id="原型设计模式java实现"><a href="#原型设计模式java实现" class="headerlink" title="原型设计模式java实现"></a>原型设计模式java实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Prototype.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">Object <span class="title">copy</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Beast.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Beast</span> <span class="keyword">implements</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Beast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Beast</span><span class="params">(Beast source)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Beast <span class="title">copy</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == obj) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getClass() == obj.getClass();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OrcBeast.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrcBeast</span> <span class="keyword">extends</span> <span class="title">Beast</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String weapon;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">OrcBeast</span><span class="params">(String weapon)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.weapon = weapon;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">OrcBeast</span><span class="params">(OrcBeast orcBeast)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(orcBeast);</span><br><span class="line">    <span class="keyword">this</span>.weapon = orcBeast.weapon;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> OrcBeast <span class="title">copy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OrcBeast(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Orcish wolf attacks with "</span> + weapon;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == obj) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">super</span>.equals(obj)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (getClass() != obj.getClass()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> other = (OrcBeast) obj;</span><br><span class="line">    <span class="keyword">if</span> (weapon == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> other.weapon == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> weapon.equals(other.weapon);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ElfBeast.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElfBeast</span> <span class="keyword">extends</span> <span class="title">Beast</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String helpType;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ElfBeast</span><span class="params">(String helpType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.helpType = helpType;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ElfBeast</span><span class="params">(ElfBeast elfBeast)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(elfBeast);</span><br><span class="line">    <span class="keyword">this</span>.helpType = elfBeast.helpType;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ElfBeast <span class="title">copy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ElfBeast(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Elven eagle helps in "</span> + helpType;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == obj) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">super</span>.equals(obj)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (getClass() != obj.getClass()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> other = (ElfBeast) obj;</span><br><span class="line">    <span class="keyword">if</span> (helpType == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> other.helpType == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> helpType.equals(other.helpType);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Warlord.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Warlord</span> <span class="keyword">implements</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Warlord</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Warlord</span><span class="params">(Warlord source)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Warlord <span class="title">copy</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == obj) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getClass() == obj.getClass();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OrcWarlord.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrcWarlord</span> <span class="keyword">extends</span> <span class="title">Warlord</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String weapon;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">OrcWarlord</span><span class="params">(String weapon)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.weapon = weapon;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">OrcWarlord</span><span class="params">(OrcWarlord orcWarlord)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(orcWarlord);</span><br><span class="line">    <span class="keyword">this</span>.weapon = orcWarlord.weapon;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> OrcWarlord <span class="title">copy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OrcWarlord(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Orcish warlord attacks with "</span> + weapon;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == obj) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">super</span>.equals(obj)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (getClass() != obj.getClass()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> other = (OrcWarlord) obj;</span><br><span class="line">    <span class="keyword">if</span> (weapon == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> other.weapon == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> weapon.equals(other.weapon);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ElfWarlord.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElfWarlord</span> <span class="keyword">extends</span> <span class="title">Warlord</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String helpType;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ElfWarlord</span><span class="params">(String helpType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.helpType = helpType;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ElfWarlord</span><span class="params">(ElfWarlord elfWarlord)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(elfWarlord);</span><br><span class="line">    <span class="keyword">this</span>.helpType = elfWarlord.helpType;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ElfWarlord <span class="title">copy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ElfWarlord(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Elven warlord helps in "</span> + helpType;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == obj) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">super</span>.equals(obj)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (getClass() != obj.getClass()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> other = (ElfWarlord) obj;</span><br><span class="line">    <span class="keyword">if</span> (helpType == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> other.helpType == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> helpType.equals(other.helpType);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mage.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Mage</span> <span class="keyword">implements</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Mage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Mage</span><span class="params">(Mage source)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Mage <span class="title">copy</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == obj) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getClass() == obj.getClass();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OrcMage.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrcMage</span> <span class="keyword">extends</span> <span class="title">Mage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String weapon;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">OrcMage</span><span class="params">(String weapon)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.weapon = weapon;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">OrcMage</span><span class="params">(OrcMage orcMage)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(orcMage);</span><br><span class="line">    <span class="keyword">this</span>.weapon = orcMage.weapon;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> OrcMage <span class="title">copy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OrcMage(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Orcish mage attacks with "</span> + weapon;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == obj) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">super</span>.equals(obj)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (getClass() != obj.getClass()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> other = (OrcMage) obj;</span><br><span class="line">    <span class="keyword">if</span> (weapon == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> other.weapon == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> weapon.equals(other.weapon);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ElfMage.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElfMage</span> <span class="keyword">extends</span> <span class="title">Mage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String helpType;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ElfMage</span><span class="params">(String helpType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.helpType = helpType;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ElfMage</span><span class="params">(ElfMage elfMage)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(elfMage);</span><br><span class="line">    <span class="keyword">this</span>.helpType = elfMage.helpType;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ElfMage <span class="title">copy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ElfMage(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Elven mage helps in "</span> + helpType;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == obj) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">super</span>.equals(obj)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (getClass() != obj.getClass()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> other = (ElfMage) obj;</span><br><span class="line">    <span class="keyword">if</span> (helpType == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> other.helpType == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> helpType.equals(other.helpType);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface for the factory class.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HeroFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">Mage <span class="title">createMage</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Warlord <span class="title">createWarlord</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Beast <span class="title">createBeast</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Concrete factory class.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeroFactoryImpl</span> <span class="keyword">implements</span> <span class="title">HeroFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Mage mage;</span><br><span class="line">  <span class="keyword">private</span> Warlord warlord;</span><br><span class="line">  <span class="keyword">private</span> Beast beast;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Constructor.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HeroFactoryImpl</span><span class="params">(Mage mage, Warlord warlord, Beast beast)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.mage = mage;</span><br><span class="line">    <span class="keyword">this</span>.warlord = warlord;</span><br><span class="line">    <span class="keyword">this</span>.beast = beast;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Create mage.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Mage <span class="title">createMage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mage.copy();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Create warlord.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Warlord <span class="title">createWarlord</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> warlord.copy();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Create beast.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Beast <span class="title">createBeast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> beast.copy();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Prototype pattern is a creational design pattern in software development. It is used when the</span></span><br><span class="line"><span class="comment"> * type of objects to create is determined by a prototypical instance, which is cloned to produce</span></span><br><span class="line"><span class="comment"> * new objects. This pattern is used to: - avoid subclasses of an object creator in the client</span></span><br><span class="line"><span class="comment"> * application, like the abstract factory pattern does. - avoid the inherent cost of creating a new</span></span><br><span class="line"><span class="comment"> * object in the standard way (e.g., using the 'new' keyword)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;In this example we have a factory class (&#123;<span class="doctag">@link</span> HeroFactoryImpl&#125;) producing objects by</span></span><br><span class="line"><span class="comment"> * cloning the existing ones. The factory's prototype objects are given as constructor parameters.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(App<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Program entry point.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> args command line args</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> factory = <span class="keyword">new</span> HeroFactoryImpl(</span><br><span class="line">        <span class="keyword">new</span> ElfMage(<span class="string">"cooking"</span>),</span><br><span class="line">        <span class="keyword">new</span> ElfWarlord(<span class="string">"cleaning"</span>),</span><br><span class="line">        <span class="keyword">new</span> ElfBeast(<span class="string">"protecting"</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">var</span> mage = factory.createMage();</span><br><span class="line">    <span class="keyword">var</span> warlord = factory.createWarlord();</span><br><span class="line">    <span class="keyword">var</span> beast = factory.createBeast();</span><br><span class="line">    LOGGER.info(mage.toString());</span><br><span class="line">    LOGGER.info(warlord.toString());</span><br><span class="line">    LOGGER.info(beast.toString());</span><br><span class="line"></span><br><span class="line">    factory = <span class="keyword">new</span> HeroFactoryImpl(</span><br><span class="line">        <span class="keyword">new</span> OrcMage(<span class="string">"axe"</span>),</span><br><span class="line">        <span class="keyword">new</span> OrcWarlord(<span class="string">"sword"</span>),</span><br><span class="line">        <span class="keyword">new</span> OrcBeast(<span class="string">"laser"</span>)</span><br><span class="line">    );</span><br><span class="line">    mage = factory.createMage();</span><br><span class="line">    warlord = factory.createWarlord();</span><br><span class="line">    beast = factory.createBeast();</span><br><span class="line">    LOGGER.info(mage.toString());</span><br><span class="line">    LOGGER.info(warlord.toString());</span><br><span class="line">    LOGGER.info(beast.toString());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
        <category>创建型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>备忘录模式</title>
    <url>/design-pattern/memento/</url>
    <content><![CDATA[<h1 id="备忘录模式UML类图"><a href="#备忘录模式UML类图" class="headerlink" title="备忘录模式UML类图"></a>备忘录模式UML类图</h1><p><img src="../../images/plantuml/memento.urm.png" alt="备忘录模式UML类图"></p>
<a id="more"></a>
<h1 id="备忘录模式java实现"><a href="#备忘录模式java实现" class="headerlink" title="备忘录模式java实现"></a>备忘录模式java实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * StarType enumeration.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> StarType &#123;</span><br><span class="line"></span><br><span class="line">  SUN(<span class="string">"sun"</span>), RED_GIANT(<span class="string">"red giant"</span>), WHITE_DWARF(<span class="string">"white dwarf"</span>), SUPERNOVA(<span class="string">"supernova"</span>), DEAD(</span><br><span class="line">      <span class="string">"dead star"</span>), UNDEFINED(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">  StarType(String title) &#123;</span><br><span class="line">    <span class="keyword">this</span>.title = title;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> title;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * External interface to memento.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StarMemento</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Star uses "mementos" to store and restore state.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Star</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> StarType type;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> ageYears;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> massTons;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Constructor.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Star</span><span class="params">(StarType startType, <span class="keyword">int</span> startAge, <span class="keyword">int</span> startMass)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.type = startType;</span><br><span class="line">    <span class="keyword">this</span>.ageYears = startAge;</span><br><span class="line">    <span class="keyword">this</span>.massTons = startMass;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Makes time pass for the star.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timePasses</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ageYears *= <span class="number">2</span>;</span><br><span class="line">    massTons *= <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">      <span class="keyword">case</span> RED_GIANT:</span><br><span class="line">        type = StarType.WHITE_DWARF;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> SUN:</span><br><span class="line">        type = StarType.RED_GIANT;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> SUPERNOVA:</span><br><span class="line">        type = StarType.DEAD;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> WHITE_DWARF:</span><br><span class="line">        type = StarType.SUPERNOVA;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> DEAD:</span><br><span class="line">        ageYears *= <span class="number">2</span>;</span><br><span class="line">        massTons = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">StarMemento <span class="title">getMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    StarMementoInternal state = <span class="keyword">new</span> StarMementoInternal();</span><br><span class="line">    state.setAgeYears(ageYears);</span><br><span class="line">    state.setMassTons(massTons);</span><br><span class="line">    state.setType(type);</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(StarMemento memento)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    StarMementoInternal state = (StarMementoInternal) memento;</span><br><span class="line">    <span class="keyword">this</span>.type = state.getType();</span><br><span class="line">    <span class="keyword">this</span>.ageYears = state.getAgeYears();</span><br><span class="line">    <span class="keyword">this</span>.massTons = state.getMassTons();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> String.format(<span class="string">"%s age: %d years mass: %d tons"</span>, type.toString(), ageYears, massTons);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * StarMemento implementation.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StarMementoInternal</span> <span class="keyword">implements</span> <span class="title">StarMemento</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StarType type;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ageYears;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> massTons;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StarType <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(StarType type)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAgeYears</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> ageYears;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAgeYears</span><span class="params">(<span class="keyword">int</span> ageYears)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.ageYears = ageYears;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMassTons</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> massTons;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMassTons</span><span class="params">(<span class="keyword">int</span> massTons)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.massTons = massTons;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Memento pattern is a software design pattern that provides the ability to restore an object</span></span><br><span class="line"><span class="comment"> * to its previous state (undo via rollback).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The Memento pattern is implemented with three objects: the originator, a caretaker and a</span></span><br><span class="line"><span class="comment"> * memento. The originator is some object that has an internal state. The caretaker is going to do</span></span><br><span class="line"><span class="comment"> * something to the originator, but wants to be able to undo the change. The caretaker first asks</span></span><br><span class="line"><span class="comment"> * the originator for a memento object. Then it does whatever operation (or sequence of operations)</span></span><br><span class="line"><span class="comment"> * it was going to do. To roll back to the state before the operations, it returns the memento</span></span><br><span class="line"><span class="comment"> * object to the originator. The memento object itself is an opaque object (one which the caretaker</span></span><br><span class="line"><span class="comment"> * cannot, or should not, change). When using this pattern, care should be taken if the originator</span></span><br><span class="line"><span class="comment"> * may change other objects or resources - the memento pattern operates on a single object.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;In this example the object (&#123;<span class="doctag">@link</span> Star&#125;) gives out a "memento" (&#123;<span class="doctag">@link</span> StarMemento&#125;) that</span></span><br><span class="line"><span class="comment"> * contains the state of the object. Later on the memento can be set back to the object restoring</span></span><br><span class="line"><span class="comment"> * the state.</span></span><br><span class="line"><span class="comment"> Memento模式是一种软件设计模式，它提供了将对象恢复到其先前状态（通过回滚撤消）的能力。</span></span><br><span class="line"><span class="comment">&lt;p&gt; Memento模式由三个对象实现：发起者，看守者和memento。发起者是一些具有内部状态的对象。管理员将对发起者进行某些操作，但希望能够撤消更改。看守首先要向创建者索要纪念品。然后，它执行将要执行的任何操作（或操作序列）。要回滚到操作之前的状态，它将纪念对象返回给发起者。纪念品对象本身是不透明的对象（看守不能更改或不应该更改的对象）。使用此模式时，请注意发起者是否可以更改其他对象或资源-记忆模式可在单个对象上运行。</span></span><br><span class="line"><span class="comment">&lt;p&gt;在此示例中，对象（&#123;<span class="doctag">@link</span> Star&#125;）给出一个包含对象状态的“备忘录”（&#123;<span class="doctag">@link</span> StarMemento&#125;）。稍后，可以将备忘录设置回恢复状态的对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(App<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Program entry point.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Stack&lt;StarMemento&gt; states = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    Star star = <span class="keyword">new</span> Star(StarType.SUN, <span class="number">10000000</span>, <span class="number">500000</span>);</span><br><span class="line">    LOGGER.info(star.toString());</span><br><span class="line">    states.add(star.getMemento());</span><br><span class="line">    star.timePasses();</span><br><span class="line">    LOGGER.info(star.toString());</span><br><span class="line">    states.add(star.getMemento());</span><br><span class="line">    star.timePasses();</span><br><span class="line">    LOGGER.info(star.toString());</span><br><span class="line">    states.add(star.getMemento());</span><br><span class="line">    star.timePasses();</span><br><span class="line">    LOGGER.info(star.toString());</span><br><span class="line">    states.add(star.getMemento());</span><br><span class="line">    star.timePasses();</span><br><span class="line">    LOGGER.info(star.toString());</span><br><span class="line">    <span class="keyword">while</span> (states.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      star.setMemento(states.pop());</span><br><span class="line">      LOGGER.info(star.toString());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
        <category>行为型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/design-pattern/singleton/</url>
    <content><![CDATA[<h1 id="单例模式UML类图"><a href="#单例模式UML类图" class="headerlink" title="单例模式UML类图"></a>单例模式UML类图</h1><p><img src="../../images/plantuml/singleton.urm.png" alt="单例模式UML类图"></p>
<a id="more"></a>
<h1 id="单例模式java实现"><a href="#单例模式java实现" class="headerlink" title="单例模式java实现"></a>单例模式java实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Singleton class. Eagerly initialized static instance guarantees thread safety.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">IvoryTower</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Private constructor so nobody can instantiate the class.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">IvoryTower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Static to class instance of the class.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> IvoryTower INSTANCE = <span class="keyword">new</span> IvoryTower();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * To be called by user to obtain instance of the class.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> instance of the singleton.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IvoryTower <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> INSTANCE;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Double check locking.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Broken under Java 1.4.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mortezaadi@gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadSafeDoubleCheckLocking</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> ThreadSafeDoubleCheckLocking instance;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * private constructor to prevent client from instantiating.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">ThreadSafeDoubleCheckLocking</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// to prevent instantiating by Reflection call</span></span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">      flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Already initialized."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Public accessor.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> an instance of the class.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ThreadSafeDoubleCheckLocking <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// local variable increases performance by 25 percent</span></span><br><span class="line">    <span class="comment">// Joshua Bloch "Effective Java, Second Edition", p. 283-284</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> result = instance;</span><br><span class="line">    <span class="comment">// Check if singleton instance is initialized.</span></span><br><span class="line">    <span class="comment">// If it is initialized then we can return the instance.</span></span><br><span class="line">    <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// It is not initialized but we cannot be sure because some other thread might have</span></span><br><span class="line">      <span class="comment">// initialized it in the meanwhile.</span></span><br><span class="line">      <span class="comment">// So to make sure we need to lock on an object to get mutual exclusion.</span></span><br><span class="line">      <span class="keyword">synchronized</span> (ThreadSafeDoubleCheckLocking<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Again assign the instance to local variable to check if it was initialized by some</span></span><br><span class="line">        <span class="comment">// other thread while current thread was blocked to enter the locked zone.</span></span><br><span class="line">        <span class="comment">// If it was initialized then we can return the previously created instance</span></span><br><span class="line">        <span class="comment">// just like the previous null check.</span></span><br><span class="line">        result = instance;</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="comment">// The instance is still not initialized so we can safely</span></span><br><span class="line">          <span class="comment">// (no other thread can enter this zone)</span></span><br><span class="line">          <span class="comment">// create an instance and make it our singleton instance.</span></span><br><span class="line">          instance = result = <span class="keyword">new</span> ThreadSafeDoubleCheckLocking();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Thread-safe Singleton class. The instance is lazily initialized and thus needs synchronization</span></span><br><span class="line"><span class="comment"> * mechanism.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Note: if created by reflection then a singleton will not be created but multiple options</span></span><br><span class="line"><span class="comment"> * in the same classloader&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadSafeLazyLoadedIvoryTower</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> ThreadSafeLazyLoadedIvoryTower instance;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">ThreadSafeLazyLoadedIvoryTower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// protect against instantiation via reflection</span></span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">      instance = <span class="keyword">this</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Already initialized."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The instance gets created only when it is called for first time. Lazy-loading</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> ThreadSafeLazyLoadedIvoryTower <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">      instance = <span class="keyword">new</span> ThreadSafeLazyLoadedIvoryTower();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Enum based singleton implementation. Effective Java 2nd Edition (Joshua Bloch) p. 18&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This implementation is thread safe, however adding any other method and its thread safety</span></span><br><span class="line"><span class="comment"> * is developers responsibility.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EnumIvoryTower &#123;</span><br><span class="line"></span><br><span class="line">  INSTANCE;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getDeclaringClass().getCanonicalName() + <span class="string">"@"</span> + hashCode();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The Initialize-on-demand-holder idiom is a secure way of creating a lazy initialized singleton</span></span><br><span class="line"><span class="comment"> * object in Java.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The technique is as lazy as possible and works in all known versions of Java. It takes</span></span><br><span class="line"><span class="comment"> * advantage of language guarantees about class initialization, and will therefore work correctly</span></span><br><span class="line"><span class="comment"> * in all Java-compliant compilers and virtual machines.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The inner class is referenced no earlier (and therefore loaded no earlier by the class loader)</span></span><br><span class="line"><span class="comment"> * than the moment that getInstance() is called. Thus, this solution is thread-safe without</span></span><br><span class="line"><span class="comment"> * requiring special language constructs (i.e. volatile or synchronized).&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">InitializingOnDemandHolderIdiom</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Private constructor.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">InitializingOnDemandHolderIdiom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Sigleton instance.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> Singleton instance</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InitializingOnDemandHolderIdiom <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> HelperHolder.INSTANCE;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Provides the lazy-loaded Singleton instance.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HelperHolder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> InitializingOnDemandHolderIdiom INSTANCE =</span><br><span class="line">        <span class="keyword">new</span> InitializingOnDemandHolderIdiom();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Singleton pattern ensures that the class can have only one existing instance per Java</span></span><br><span class="line"><span class="comment"> * classloader instance and provides global access to it.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;One of the risks of this pattern is that bugs resulting from setting a singleton up in a</span></span><br><span class="line"><span class="comment"> * distributed environment can be tricky to debug, since it will work fine if you debug with a</span></span><br><span class="line"><span class="comment"> * single classloader. Additionally, these problems can crop up a while after the implementation of</span></span><br><span class="line"><span class="comment"> * a singleton, since they may start out synchronous and only become async with time, so you it may</span></span><br><span class="line"><span class="comment"> * not be clear why you are seeing certain changes in behaviour.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;There are many ways to implement the Singleton. The first one is the eagerly initialized</span></span><br><span class="line"><span class="comment"> * instance in &#123;<span class="doctag">@link</span> IvoryTower&#125;. Eager initialization implies that the implementation is thread</span></span><br><span class="line"><span class="comment"> * safe. If you can afford giving up control of the instantiation moment, then this implementation</span></span><br><span class="line"><span class="comment"> * will suit you fine.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The other option to implement eagerly initialized Singleton is enum based Singleton. The</span></span><br><span class="line"><span class="comment"> * example is found in &#123;<span class="doctag">@link</span> EnumIvoryTower&#125;. At first glance the code looks short and simple.</span></span><br><span class="line"><span class="comment"> * However, you should be aware of the downsides including committing to implementation strategy,</span></span><br><span class="line"><span class="comment"> * extending the enum class, serializability and restrictions to coding. These are extensively</span></span><br><span class="line"><span class="comment"> * discussed in Stack Overflow: http://programmers.stackexchange.com/questions/179386/what-are-the-downsides-of-implementing</span></span><br><span class="line"><span class="comment"> * -a-singleton-with-javas-enum&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&#123;<span class="doctag">@link</span> ThreadSafeLazyLoadedIvoryTower&#125; is a Singleton implementation that is initialized on</span></span><br><span class="line"><span class="comment"> * demand. The downside is that it is very slow to access since the whole access method is</span></span><br><span class="line"><span class="comment"> * synchronized.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Another Singleton implementation that is initialized on demand is found in</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ThreadSafeDoubleCheckLocking&#125;. It is somewhat faster than &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * ThreadSafeLazyLoadedIvoryTower&#125; since it doesn't synchronize the whole access method but only the</span></span><br><span class="line"><span class="comment"> * method internals on specific conditions.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Yet another way to implement thread safe lazily initialized Singleton can be found in</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> InitializingOnDemandHolderIdiom&#125;. However, this implementation requires at least Java 8</span></span><br><span class="line"><span class="comment"> * API level to work.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(App<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Program entry point.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> args command line args</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// eagerly initialized singleton</span></span><br><span class="line">    <span class="keyword">var</span> ivoryTower1 = IvoryTower.getInstance();</span><br><span class="line">    <span class="keyword">var</span> ivoryTower2 = IvoryTower.getInstance();</span><br><span class="line">    LOGGER.info(<span class="string">"ivoryTower1=&#123;&#125;"</span>, ivoryTower1);</span><br><span class="line">    LOGGER.info(<span class="string">"ivoryTower2=&#123;&#125;"</span>, ivoryTower2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// lazily initialized singleton</span></span><br><span class="line">    <span class="keyword">var</span> threadSafeIvoryTower1 = ThreadSafeLazyLoadedIvoryTower.getInstance();</span><br><span class="line">    <span class="keyword">var</span> threadSafeIvoryTower2 = ThreadSafeLazyLoadedIvoryTower.getInstance();</span><br><span class="line">    LOGGER.info(<span class="string">"threadSafeIvoryTower1=&#123;&#125;"</span>, threadSafeIvoryTower1);</span><br><span class="line">    LOGGER.info(<span class="string">"threadSafeIvoryTower2=&#123;&#125;"</span>, threadSafeIvoryTower2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// enum singleton</span></span><br><span class="line">    <span class="keyword">var</span> enumIvoryTower1 = EnumIvoryTower.INSTANCE;</span><br><span class="line">    <span class="keyword">var</span> enumIvoryTower2 = EnumIvoryTower.INSTANCE;</span><br><span class="line">    LOGGER.info(<span class="string">"enumIvoryTower1=&#123;&#125;"</span>, enumIvoryTower1);</span><br><span class="line">    LOGGER.info(<span class="string">"enumIvoryTower2=&#123;&#125;"</span>, enumIvoryTower2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// double checked locking</span></span><br><span class="line">    <span class="keyword">var</span> dcl1 = ThreadSafeDoubleCheckLocking.getInstance();</span><br><span class="line">    LOGGER.info(dcl1.toString());</span><br><span class="line">    <span class="keyword">var</span> dcl2 = ThreadSafeDoubleCheckLocking.getInstance();</span><br><span class="line">    LOGGER.info(dcl2.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// initialize on demand holder idiom</span></span><br><span class="line">    <span class="keyword">var</span> demandHolderIdiom = InitializingOnDemandHolderIdiom.getInstance();</span><br><span class="line">    LOGGER.info(demandHolderIdiom.toString());</span><br><span class="line">    <span class="keyword">var</span> demandHolderIdiom2 = InitializingOnDemandHolderIdiom.getInstance();</span><br><span class="line">    LOGGER.info(demandHolderIdiom2.toString());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
        <category>创建型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>状态模式</title>
    <url>/design-pattern/state/</url>
    <content><![CDATA[<h1 id="状态模式UML类图"><a href="#状态模式UML类图" class="headerlink" title="状态模式UML类图"></a>状态模式UML类图</h1><p><img src="../../images/plantuml/state.urm.png" alt="状态模式UML类图"></p>
<a id="more"></a>
<h1 id="状态模式java实现"><a href="#状态模式java实现" class="headerlink" title="状态模式java实现"></a>状态模式java实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * State interface.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onEnterState</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">observe</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Peaceful state.</span></span><br><span class="line"><span class="comment"> 和平状态。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeacefulState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(PeacefulState<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Mammoth mammoth;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">PeacefulState</span><span class="params">(Mammoth mammoth)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.mammoth = mammoth;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">observe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//平静与和平的。</span></span><br><span class="line">    LOGGER.info(<span class="string">"&#123;&#125; is calm and peaceful."</span>, mammoth);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEnterState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//冷静下来</span></span><br><span class="line">    LOGGER.info(<span class="string">"&#123;&#125; calms down."</span>, mammoth);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Angry state.</span></span><br><span class="line"><span class="comment"> 愤怒的状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AngryState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(AngryState<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Mammoth mammoth;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">AngryState</span><span class="params">(Mammoth mammoth)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.mammoth = mammoth;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">observe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//很生气</span></span><br><span class="line">    LOGGER.info(<span class="string">"&#123;&#125; is furious!"</span>, mammoth);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEnterState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//生气了！</span></span><br><span class="line">    LOGGER.info(<span class="string">"&#123;&#125; gets angry!"</span>, mammoth);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mammoth has internal state that defines its behavior.</span></span><br><span class="line"><span class="comment"> 长毛象具有定义其行为的内部状态。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mammoth</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> State state;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Mammoth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    state = <span class="keyword">new</span> PeacefulState(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Makes time pass for the mammoth.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timePasses</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (state.getClass().equals(PeacefulState<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">      changeStateTo(<span class="keyword">new</span> AngryState(<span class="keyword">this</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      changeStateTo(<span class="keyword">new</span> PeacefulState(<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">changeStateTo</span><span class="params">(State newState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.state = newState;</span><br><span class="line">    <span class="keyword">this</span>.state.onEnterState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"The mammoth"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">observe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.state.observe();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * In State pattern the container object has an internal state object that defines the current</span></span><br><span class="line"><span class="comment"> * behavior. The state object can be changed to alter the behavior.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This can be a cleaner way for an object to change its behavior at runtime without resorting</span></span><br><span class="line"><span class="comment"> * to large monolithic conditional statements and thus improves maintainability.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;In this example the &#123;<span class="doctag">@link</span> Mammoth&#125; changes its behavior as time passes by.</span></span><br><span class="line"><span class="comment"> 在“状态”模式中，容器对象具有定义当前行为的内部状态对象。 可以更改状态对象以更改行为。</span></span><br><span class="line"><span class="comment">&lt;p&gt;这可能是对象在运行时更改其行为的更干净的方法，而无需诉诸大型整体式条件语句，从而提高了可维护性。</span></span><br><span class="line"><span class="comment">&lt;p&gt;在此示例中，&#123;@ link Mammoth&#125;随着时间的流逝而改变其行为。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Program entry point.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mammoth = <span class="keyword">new</span> Mammoth();</span><br><span class="line">    mammoth.observe();</span><br><span class="line">    mammoth.timePasses();</span><br><span class="line">    mammoth.observe();</span><br><span class="line">    mammoth.timePasses();</span><br><span class="line">    mammoth.observe();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="极客时间"><a href="#极客时间" class="headerlink" title="极客时间"></a>极客时间</h1><p><img src="../../images/mario.png" alt="马里奥"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//所有状态的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMario</span> </span>&#123;</span><br><span class="line">  <span class="function">State <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">//以下是定义的事件</span></span><br><span class="line">  <span class="comment">//获得蘑菇</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">obtainMushRoom</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">//获得斗篷</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">obtainCape</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">//获得火花</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">obtainFireFlower</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">//遇见怪物</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">meetMonster</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//小马里奥</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmallMario</span> <span class="keyword">implements</span> <span class="title">IMario</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> MarioStateMachine stateMachine;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SmallMario</span><span class="params">(MarioStateMachine stateMachine)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.stateMachine = stateMachine;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> State <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> State.SMALL;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">obtainMushRoom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stateMachine.setCurrentState(<span class="keyword">new</span> SuperMario(stateMachine));</span><br><span class="line">    stateMachine.setScore(stateMachine.getScore()+<span class="number">100</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">obtainCape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stateMachine.setCurrentState(<span class="keyword">new</span> CapeMario(stateMachine));</span><br><span class="line">    stateMachine.setScore(stateMachine.getScore()+<span class="number">200</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">obtainFireFlower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stateMachine.setCurrentState(<span class="keyword">new</span> FireMario(stateMachine));</span><br><span class="line">    stateMachine.setScore(stateMachine.getScore()+<span class="number">300</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">meetMonster</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//do nothing...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//超级马里奥</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperMario</span> <span class="keyword">implements</span> <span class="title">IMario</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> MarioStateMachine stateMachine;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SuperMario</span><span class="params">(MarioStateMachine stateMachine)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.stateMachine = stateMachine;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> State <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> State.SUPER;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">obtainMushRoom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//do nothing...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">obtainCape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stateMachine.setCurrentState(<span class="keyword">new</span> CapeMario(stateMachine));</span><br><span class="line">    stateMachine.setScore(stateMachine.getScore() + <span class="number">200</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">obtainFireFlower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stateMachine.setCurrentState(<span class="keyword">new</span> FireMario(stateMachine));</span><br><span class="line">    stateMachine.setScore(stateMachine.getScore() + <span class="number">300</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">meetMonster</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stateMachine.setCurrentState(<span class="keyword">new</span> SmallMario(stateMachine));</span><br><span class="line">    stateMachine.setScore(stateMachine.getScore() - <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//火焰马里奥</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FireFlowerMario</span> <span class="keyword">implements</span> <span class="title">IMario</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> MarioStateMachine stateMachine;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">FireFlowerMario</span><span class="params">(MarioStateMachine stateMachine)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.stateMachine = stateMachine;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> State <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> State.FireFlower;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">obtainMushRoom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//do nothing...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">obtainCape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//do nothing...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">obtainFireFlower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//do nothing...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">meetMonster</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stateMachine.setCurrentState(<span class="keyword">new</span> SmallMario(stateMachine));</span><br><span class="line">    stateMachine.setScore(stateMachine.getScore() - <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//斗篷马里奥</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CapeMario</span> <span class="keyword">implements</span> <span class="title">IMario</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> MarioStateMachine stateMachine;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CapeMario</span><span class="params">(MarioStateMachine stateMachine)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.stateMachine = stateMachine;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> State <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> State.Cape;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">obtainMushRoom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//do nothing...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">obtainCape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//do nothing...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">obtainFireFlower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//do nothing...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">meetMonster</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stateMachine.setCurrentState(<span class="keyword">new</span> SmallMario(stateMachine));</span><br><span class="line">    stateMachine.setScore(stateMachine.getScore() - <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarioStateMachine</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> score;</span><br><span class="line">  <span class="keyword">private</span> IMario currentState;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MarioStateMachine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.score = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.currentState = <span class="keyword">new</span> SmallMario(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">obtainMushRoom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.currentState.obtainMushRoom();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">obtainCape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.currentState.obtainCape();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">obtainFireFlower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.currentState.obtainFireFlower();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">meetMonster</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.currentState.meetMonster();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.score;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> State <span class="title">getCurrentState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.currentState.getName();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.score = score;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCurrentState</span><span class="params">(IMario currentState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.currentState = currentState;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h1><p>订单状态</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单状态 //待付款 //待收货 //已完成 //已取消</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支付状态  //待支付 //已支付 //待退款 //已退款</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderStatus</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 支付</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">payOrder</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 取消订单</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">cancelOrder</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 确认完成</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">completeOrder</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 申请售后</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">applyForAfterSales</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 再次购买</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">buyAgain</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 待付款</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToBePaidStatus</span> <span class="keyword">implements</span> <span class="title">OrderStatus</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  Order order;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">payOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    order.setStatus(<span class="keyword">new</span> ToBeReceivedStatus(order));</span><br><span class="line">    System.out.println(<span class="string">"======调用支付宝支付接口======"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancelOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    order.setStatus(<span class="keyword">new</span> CancelStatus(order));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completeOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"你还未付款，请去支付页面"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applyForAfterSales</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"你还未付款，请去支付页面"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyAgain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"你还未付款，请去支付页面"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"待付款状态"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 待收货</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToBeReceivedStatus</span> <span class="keyword">implements</span> <span class="title">OrderStatus</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  Order order;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">payOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"您已经支付过了"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancelOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    order.setStatus(<span class="keyword">new</span> CancelStatus(order));</span><br><span class="line">    <span class="comment">//发起退款逻辑</span></span><br><span class="line">    System.out.println(<span class="string">"======触发退款逻辑======"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completeOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//触发订单完成逻辑</span></span><br><span class="line">    System.out.println(<span class="string">"======触发订单完成逻辑======"</span>);</span><br><span class="line">    order.setStatus(<span class="keyword">new</span> CompleteStatus(order));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applyForAfterSales</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"你还未收货"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyAgain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"你还未收货"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"待收货状态"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 已完成</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompleteStatus</span> <span class="keyword">implements</span> <span class="title">OrderStatus</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  Order order;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">payOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"您已经确认完成过了"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancelOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"您已经确认完成过了"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completeOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"您已经确认完成过了"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applyForAfterSales</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//触发申请售后逻辑</span></span><br><span class="line">    System.out.println(<span class="string">"======触发申请售后逻辑======"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyAgain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//再次购买逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"已完成状态"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 已取消</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CancelStatus</span> <span class="keyword">implements</span> <span class="title">OrderStatus</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  Order order;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">payOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"您已经取消过了"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancelOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"您已经取消过了"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completeOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"您已经取消过了"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applyForAfterSales</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"您已经取消过了"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyAgain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//再次购买逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"已取消状态"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line">  <span class="comment">//订单状态</span></span><br><span class="line">  <span class="keyword">private</span> OrderStatus status;</span><br><span class="line">  <span class="comment">//支付状态</span></span><br><span class="line"><span class="comment">//  private PayType payType;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化订单状态和支付状态</span></span><br><span class="line">    status = <span class="keyword">new</span> ToBePaidStatus(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> OrderStatus <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(OrderStatus status)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.status = status;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">payOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    status.payOrder();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completeOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    status.completeOrder();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancelOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    status.cancelOrder();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applyForAfterSales</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    status.applyForAfterSales();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyAgain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    status.buyAgain();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下单</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Order order = <span class="keyword">new</span> Order();</span><br><span class="line">    System.out.println(order.getStatus());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支付</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    order.payOrder();</span><br><span class="line">    System.out.println(order.getStatus());</span><br><span class="line"><span class="comment">//    /**</span></span><br><span class="line"><span class="comment">//     * 取消</span></span><br><span class="line"><span class="comment">//     */</span></span><br><span class="line"><span class="comment">//    order.cancelOrder();</span></span><br><span class="line"><span class="comment">//    System.out.println(order.getStatus());</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    order.completeOrder();</span><br><span class="line">    System.out.println(order.getStatus());</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 申请售后</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    order.applyForAfterSales();</span><br><span class="line">    System.out.println(order.getStatus());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
        <category>行为型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>代理模式</title>
    <url>/design-pattern/proxy/</url>
    <content><![CDATA[<h1 id="代理设计模式UML类图"><a href="#代理设计模式UML类图" class="headerlink" title="代理设计模式UML类图"></a>代理设计模式UML类图</h1><p><img src="../../images/plantuml/proxy.urm.png" alt="代理设计模式UML类图"></p>
<a id="more"></a>
<h1 id="代理设计模式java代码实现"><a href="#代理设计模式java代码实现" class="headerlink" title="代理设计模式java代码实现"></a>代理设计模式java代码实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WizardTower interface.</span></span><br><span class="line"><span class="comment"> 精灵塔</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WizardTower</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">enter</span><span class="params">(Wizard wizard)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Wizard.</span></span><br><span class="line"><span class="comment"> 巫师</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wizard</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Wizard</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The object to be proxyed.</span></span><br><span class="line"><span class="comment"> IvoryTower象牙塔</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IvoryTower</span> <span class="keyword">implements</span> <span class="title">WizardTower</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(IvoryTower<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enter</span><span class="params">(Wizard wizard)</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"&#123;&#125; enters the tower."</span>, wizard);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The proxy controlling access to the &#123;<span class="doctag">@link</span> IvoryTower&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WizardTowerProxy</span> <span class="keyword">implements</span> <span class="title">WizardTower</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(WizardTowerProxy<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM_WIZARDS_ALLOWED = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> numWizards;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> WizardTower tower;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">WizardTowerProxy</span><span class="params">(WizardTower tower)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.tower = tower;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enter</span><span class="params">(Wizard wizard)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (numWizards &lt; NUM_WIZARDS_ALLOWED) &#123;</span><br><span class="line">      tower.enter(wizard);</span><br><span class="line">      numWizards++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      LOGGER.info(<span class="string">"&#123;&#125; is not allowed to enter!"</span>, wizard);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A proxy, in its most general form, is a class functioning as an interface to something else. The</span></span><br><span class="line"><span class="comment"> * proxy could interface to anything: a network connection, a large object in memory, a file, or</span></span><br><span class="line"><span class="comment"> * some other resource that is expensive or impossible to duplicate. In short, a proxy is a wrapper</span></span><br><span class="line"><span class="comment"> * or agent object that is being called by the client to access the real serving object behind the</span></span><br><span class="line"><span class="comment"> * scenes.</span></span><br><span class="line"><span class="comment"> 在最一般的形式上，代理是一个类，充当与其他对象的接口。 代理可以与任何接口：网络连接，内存中的大对象，文件或其他昂贵或无法复制的其他资源。 简而言之，代理是客户端调用的包装器或代理对象，以访问幕后的真实服务对象。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The Proxy design pattern allows you to provide an interface to other objects by creating a</span></span><br><span class="line"><span class="comment"> * wrapper class as the proxy. The wrapper class, which is the proxy, can add additional</span></span><br><span class="line"><span class="comment"> * functionality to the object of interest without changing the object's code.</span></span><br><span class="line"><span class="comment"> *&lt;p&gt;通过代理设计模式，您可以通过创建包装器类作为代理来为其他对象提供接口。 包装类（它是代理）可以在不更改对象代码的情况下向目标对象添加其他功能。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;In this example the proxy (&#123;<span class="doctag">@link</span> WizardTowerProxy&#125;) controls access to the actual object (</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> IvoryTower&#125;).</span></span><br><span class="line"><span class="comment"> &lt;p&gt;在此示例中，代理（&#123;<span class="doctag">@link</span> WizardTowerProxy&#125;）控制对实际对象（&#123;<span class="doctag">@link</span> IvoryTower&#125;）的访问。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Program entry point.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> proxy = <span class="keyword">new</span> WizardTowerProxy(<span class="keyword">new</span> IvoryTower());</span><br><span class="line">    proxy.enter(<span class="keyword">new</span> Wizard(<span class="string">"Red wizard"</span>));</span><br><span class="line">    proxy.enter(<span class="keyword">new</span> Wizard(<span class="string">"White wizard"</span>));</span><br><span class="line">    proxy.enter(<span class="keyword">new</span> Wizard(<span class="string">"Black wizard"</span>));</span><br><span class="line">    proxy.enter(<span class="keyword">new</span> Wizard(<span class="string">"Green wizard"</span>));</span><br><span class="line">    proxy.enter(<span class="keyword">new</span> Wizard(<span class="string">"Brown wizard"</span>));</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><h2 id="spring动态代理生成对象"><a href="#spring动态代理生成对象" class="headerlink" title="spring动态代理生成对象"></a>spring动态代理生成对象</h2><p><img src="../../images/SpringProxy.png" alt="spring动态代理生成对象"></p>
<h2 id="Mybatis中Mapper动态代理机制"><a href="#Mybatis中Mapper动态代理机制" class="headerlink" title="Mybatis中Mapper动态代理机制"></a>Mybatis中Mapper动态代理机制</h2><h2 id="dubbo动态代理模式生成proxy过程"><a href="#dubbo动态代理模式生成proxy过程" class="headerlink" title="dubbo动态代理模式生成proxy过程"></a>dubbo动态代理模式生成proxy过程</h2><p><img src="../../images/send-request-process.jpg" alt="dubbo动态代理模式生成proxy过程"></p>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>结构型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>策略模式</title>
    <url>/design-pattern/strategy/</url>
    <content><![CDATA[<h1 id="策略模式UML类图"><a href="#策略模式UML类图" class="headerlink" title="策略模式UML类图"></a>策略模式UML类图</h1><p><img src="../../images/plantuml/strategy.urm.png" alt="策略模式UML类图"></p>
<a id="more"></a>
<h1 id="策略模式java实现"><a href="#策略模式java实现" class="headerlink" title="策略模式java实现"></a>策略模式java实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Strategy interface.</span></span><br><span class="line"><span class="comment"> 屠龙策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DragonSlayingStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spell strategy.</span></span><br><span class="line"><span class="comment"> 法术策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpellStrategy</span> <span class="keyword">implements</span> <span class="title">DragonSlayingStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(SpellStrategy<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//你投下了瓦解的魔咒，龙在一堆尘土中蒸发了！</span></span><br><span class="line">    LOGGER.info(<span class="string">"You cast the spell of disintegration and the dragon vaporizes in a pile of dust!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Projectile strategy.</span></span><br><span class="line"><span class="comment"> 弹丸策略。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProjectileStrategy</span> <span class="keyword">implements</span> <span class="title">DragonSlayingStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ProjectileStrategy<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//您用神奇的弓箭射击了龙，它掉在了地上！</span></span><br><span class="line">    LOGGER.info(<span class="string">"You shoot the dragon with the magical crossbow and it falls dead on the ground!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Melee strategy.</span></span><br><span class="line"><span class="comment"> 近战策略。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MeleeStrategy</span> <span class="keyword">implements</span> <span class="title">DragonSlayingStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(MeleeStrategy<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//用您的神剑切断龙的头！</span></span><br><span class="line">    LOGGER.info(<span class="string">"With your Excalibur you sever the dragon's head!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DragonSlayer uses different strategies to slay the dragon.</span></span><br><span class="line"><span class="comment"> DragonSlayer使用不同的策略来杀死龙。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DragonSlayer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> DragonSlayingStrategy strategy;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DragonSlayer</span><span class="params">(DragonSlayingStrategy strategy)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeStrategy</span><span class="params">(DragonSlayingStrategy strategy)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goToBattle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    strategy.execute();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The Strategy pattern (also known as the policy pattern) is a software design pattern that</span></span><br><span class="line"><span class="comment"> * enables an algorithm's behavior to be selected at runtime.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Before Java 8 the Strategies needed to be separate classes forcing the developer</span></span><br><span class="line"><span class="comment"> * to write lots of boilerplate code. With modern Java it is easy to pass behavior</span></span><br><span class="line"><span class="comment"> * with method references and lambdas making the code shorter and more readable.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;In this example (&#123;<span class="doctag">@link</span> DragonSlayingStrategy&#125;) encapsulates an algorithm. The containing</span></span><br><span class="line"><span class="comment"> * object (&#123;<span class="doctag">@link</span> DragonSlayer&#125;) can alter its behavior by changing its strategy.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> &lt;p&gt;策略模式（也称为策略模式）是一种软件设计模式，可以在运行时选择算法的行为。&lt;/ p&gt;</span></span><br><span class="line"><span class="comment">&lt;p&gt;在Java 8之前，策略必须是单独的类，从而迫使开发人员编写大量样板代码。 使用现代Java，可以轻松地通过方法引用和lambda传递行为，从而使代码更短，更易读。&lt;/ p&gt;</span></span><br><span class="line"><span class="comment">&lt;p&gt;在此示例（&#123;<span class="doctag">@link</span> DragonSlayingStrategy&#125;）中封装了一种算法。 包含对象（&#123;<span class="doctag">@link</span> DragonSlayer&#125;）可以通过更改其策略来更改其行为。&lt;/ p&gt;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(App<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Program entry point.</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> args command line args</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// GoF Strategy pattern</span></span><br><span class="line">    LOGGER.info(<span class="string">"Green dragon spotted ahead!"</span>);</span><br><span class="line">    <span class="keyword">var</span> dragonSlayer = <span class="keyword">new</span> DragonSlayer(<span class="keyword">new</span> MeleeStrategy());</span><br><span class="line">    dragonSlayer.goToBattle();</span><br><span class="line">    LOGGER.info(<span class="string">"Red dragon emerges."</span>);</span><br><span class="line">    dragonSlayer.changeStrategy(<span class="keyword">new</span> ProjectileStrategy());</span><br><span class="line">    dragonSlayer.goToBattle();</span><br><span class="line">    LOGGER.info(<span class="string">"Black dragon lands before you."</span>);</span><br><span class="line">    dragonSlayer.changeStrategy(<span class="keyword">new</span> SpellStrategy());</span><br><span class="line">    dragonSlayer.goToBattle();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Java 8 Strategy pattern</span></span><br><span class="line">    LOGGER.info(<span class="string">"Green dragon spotted ahead!"</span>);</span><br><span class="line">    dragonSlayer = <span class="keyword">new</span> DragonSlayer(</span><br><span class="line">        () -&gt; LOGGER.info(<span class="string">"With your Excalibur you severe the dragon's head!"</span>));</span><br><span class="line">    dragonSlayer.goToBattle();</span><br><span class="line">    LOGGER.info(<span class="string">"Red dragon emerges."</span>);</span><br><span class="line">    dragonSlayer.changeStrategy(() -&gt; LOGGER.info(</span><br><span class="line">        <span class="string">"You shoot the dragon with the magical crossbow and it falls dead on the ground!"</span>));</span><br><span class="line">    dragonSlayer.goToBattle();</span><br><span class="line">    LOGGER.info(<span class="string">"Black dragon lands before you."</span>);</span><br><span class="line">    dragonSlayer.changeStrategy(() -&gt; LOGGER.info(</span><br><span class="line">        <span class="string">"You cast the spell of disintegration and the dragon vaporizes in a pile of dust!"</span>));</span><br><span class="line">    dragonSlayer.goToBattle();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><h2 id="Java-Comparator-中的策略模式"><a href="#Java-Comparator-中的策略模式" class="headerlink" title="Java Comparator 中的策略模式"></a>Java Comparator 中的策略模式</h2><p>java.util.Comparator 接口是比较器接口，可以通过 Collections.sort(List,Comparator) 和 Arrays.sort(Object[],Comparator) 对集合和数据进行排序，下面为示例程序<br>一个学生类，有两个属性 id 和 name</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&#123;id="</span> + id + <span class="string">", name='"</span> + name + <span class="string">"'&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现两个比较器，比较器实现了 Comparator 接口，一个升序，一个降序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 降序</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DescSortor</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o2.getId() - o1.getId();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 升序</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AscSortor</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.getId() - o2.getId();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过 Arrays.sort() 对数组进行排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student[] students = &#123;</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="number">3</span>, <span class="string">"张三"</span>),</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="number">1</span>, <span class="string">"李四"</span>),</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="number">4</span>, <span class="string">"王五"</span>),</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="number">2</span>, <span class="string">"赵六"</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        toString(students, <span class="string">"排序前"</span>);</span><br><span class="line"></span><br><span class="line">        Arrays.sort(students, <span class="keyword">new</span> AscSortor());</span><br><span class="line">        toString(students, <span class="string">"升序后"</span>);</span><br><span class="line"></span><br><span class="line">        Arrays.sort(students, <span class="keyword">new</span> DescSortor());</span><br><span class="line">        toString(students, <span class="string">"降序后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">toString</span><span class="params">(Student[] students, String desc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; students.length; i++) &#123;</span><br><span class="line">            System.out.print(desc + <span class="string">": "</span> +students[i].toString() + <span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">排序前: &#123;id=<span class="number">3</span>, name=<span class="string">'张三'</span>&#125;, 排序前: &#123;id=<span class="number">1</span>, name=<span class="string">'李四'</span>&#125;, 排序前: &#123;id=<span class="number">4</span>, name=<span class="string">'王五'</span>&#125;, 排序前: &#123;id=<span class="number">2</span>, name=<span class="string">'赵六'</span>&#125;, </span><br><span class="line">升序后: &#123;id=<span class="number">1</span>, name=<span class="string">'李四'</span>&#125;, 升序后: &#123;id=<span class="number">2</span>, name=<span class="string">'赵六'</span>&#125;, 升序后: &#123;id=<span class="number">3</span>, name=<span class="string">'张三'</span>&#125;, 升序后: &#123;id=<span class="number">4</span>, name=<span class="string">'王五'</span>&#125;, </span><br><span class="line">降序后: &#123;id=<span class="number">4</span>, name=<span class="string">'王五'</span>&#125;, 降序后: &#123;id=<span class="number">3</span>, name=<span class="string">'张三'</span>&#125;, 降序后: &#123;id=<span class="number">2</span>, name=<span class="string">'赵六'</span>&#125;, 降序后: &#123;id=<span class="number">1</span>, name=<span class="string">'李四'</span>&#125;,</span><br></pre></td></tr></table></figure>
<p>通过 Collections.sort() 对集合List进行排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Student&gt; students = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="number">3</span>, <span class="string">"张三"</span>),</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="number">1</span>, <span class="string">"李四"</span>),</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="number">4</span>, <span class="string">"王五"</span>),</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="number">2</span>, <span class="string">"赵六"</span>)</span><br><span class="line">        );</span><br><span class="line">        toString(students, <span class="string">"排序前"</span>);</span><br><span class="line"></span><br><span class="line">        Collections.sort(students, <span class="keyword">new</span> AscSortor());</span><br><span class="line">        toString(students, <span class="string">"升序后"</span>);</span><br><span class="line"></span><br><span class="line">        Collections.sort(students, <span class="keyword">new</span> DescSortor());</span><br><span class="line">        toString(students, <span class="string">"降序后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">toString</span><span class="params">(List&lt;Student&gt; students, String desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">            System.out.print(desc + <span class="string">": "</span> + student.toString() + <span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">排序前: &#123;id=<span class="number">3</span>, name=<span class="string">'张三'</span>&#125;, 排序前: &#123;id=<span class="number">1</span>, name=<span class="string">'李四'</span>&#125;, 排序前: &#123;id=<span class="number">4</span>, name=<span class="string">'王五'</span>&#125;, 排序前: &#123;id=<span class="number">2</span>, name=<span class="string">'赵六'</span>&#125;, </span><br><span class="line">升序后: &#123;id=<span class="number">1</span>, name=<span class="string">'李四'</span>&#125;, 升序后: &#123;id=<span class="number">2</span>, name=<span class="string">'赵六'</span>&#125;, 升序后: &#123;id=<span class="number">3</span>, name=<span class="string">'张三'</span>&#125;, 升序后: &#123;id=<span class="number">4</span>, name=<span class="string">'王五'</span>&#125;, </span><br><span class="line">降序后: &#123;id=<span class="number">4</span>, name=<span class="string">'王五'</span>&#125;, 降序后: &#123;id=<span class="number">3</span>, name=<span class="string">'张三'</span>&#125;, 降序后: &#123;id=<span class="number">2</span>, name=<span class="string">'赵六'</span>&#125;, 降序后: &#123;id=<span class="number">1</span>, name=<span class="string">'李四'</span>&#125;,</span><br></pre></td></tr></table></figure>
<p>我们向 Collections.sort() 和 Arrays.sort() 分别传入不同的比较器即可实现不同的排序效果（升序或降序）<br>这里 Comparator 接口充当了抽象策略角色，两个比较器 DescSortor 和 AscSortor 则充当了具体策略角色，Collections 和 Arrays 则是环境角色</p>
<h2 id="Spring-Resource-中的策略模式"><a href="#Spring-Resource-中的策略模式" class="headerlink" title="Spring Resource 中的策略模式"></a>Spring Resource 中的策略模式</h2><p>Spring 把所有能记录信息的载体，如各种类型的文件、二进制流等都称为资源，譬如最常用的Spring配置文件。<br>在 Sun 所提供的标准 API 里，资源访问通常由 java.NET.URL 和文件 IO 来完成，尤其是当我们需要访问来自网络的资源时，通常会选择 URL 类。<br>URL 类可以处理一些常规的资源访问问题，但依然不能很好地满足所有底层资源访问的需要，比如，暂时还无法从类加载路径、或相对于 ServletContext 的路径来访问资源，虽然 Java 允许使用特定的 URL 前缀注册新的处理类（例如已有的 http: 前缀的处理类），但是这样做通常比较复杂，而且 URL 接口还缺少一些有用的功能，比如检查所指向的资源是否存在等。<br>Spring 改进了 Java 资源访问的策略，Spring 为资源访问提供了一个 Resource 接口，该接口提供了更强的资源访问能力，Spring 框架本身大量使用了 Resource 接口来访问底层资源。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Resource</span> <span class="keyword">extends</span> <span class="title">InputStreamSource</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span></span>;    <span class="comment">// 返回 Resource 所指向的资源是否存在</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isReadable</span><span class="params">()</span></span>;   <span class="comment">// 资源内容是否可读</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isOpen</span><span class="params">()</span></span>;   <span class="comment">// 返回资源文件是否打开</span></span><br><span class="line">    <span class="function">URL <span class="title">getURL</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    <span class="function">URI <span class="title">getURI</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    <span class="function">File <span class="title">getFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;  <span class="comment">// 返回资源对应的 File 对象</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">contentLength</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">lastModified</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    <span class="function">Resource <span class="title">createRelative</span><span class="params">(String var1)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    <span class="function">String <span class="title">getFilename</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getDescription</span><span class="params">()</span></span>;    <span class="comment">// 返回资源的描述信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Resource 接口是 Spring 资源访问策略的抽象，它本身并不提供任何资源访问实现，具体的资源访问由该接口的实现类完成——每个实现类代表一种资源访问策略。<br>Spring 为 Resource 接口提供的部分实现类如下：<br>UrlResource：访问网络资源的实现类。<br>ClassPathResource：访问类加载路径里资源的实现类。<br>FileSystemResource：访问文件系统里资源的实现类。<br>ServletContextResource：访问相对于 ServletContext 路径里的资源的实现类：<br>InputStreamResource：访问输入流资源的实现类。<br>ByteArrayResource：访问字节数组资源的实现类。<br>WritableResource：写资源文件<br>这些 Resource 实现类，针对不同的的底层资源，提供了相应的资源访问逻辑，并提供便捷的包装，以利于客户端程序的资源访问。<br>它们之间的类关系如下所示：<br><img src="../../images/spring-resource.png" alt="spring-resource"><br>可以看到 AbstractResource 资源抽象类实现了 Resource 接口，为子类通用的操作提供了具体实现，非通用的操作留给子类实现，所以这里也应用了模板方法模式。（只不过缺少了模板方法）<br>Resource 不仅可在 Spring 的项目中使用，也可直接作为资源访问的工具类使用。意思是说：即使不使用 Spring 框架，也可以使用 Resource 作为工具类，用来代替 URL。<br>譬如我们可以使用 UrlResource 访问网络资源。<br>也可以通过其它协议访问资源，file: 用于访问文件系统；http: 用于通过 HTTP 协议访问资源；ftp: 用于通过 FTP 协议访问资源等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        UrlResource ur = <span class="keyword">new</span> UrlResource(<span class="string">"http://image.laijianfeng.org/hello.txt"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"文件名："</span> + ur.getFilename());</span><br><span class="line">        System.out.println(<span class="string">"网络文件URL："</span> + ur.getURL());</span><br><span class="line">        System.out.println(<span class="string">"是否存在："</span> + ur.exists());</span><br><span class="line">        System.out.println(<span class="string">"是否可读："</span> + ur.isReadable());</span><br><span class="line">        System.out.println(<span class="string">"文件长度："</span> + ur.contentLength());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"\n--------文件内容----------\n"</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">47</span>];</span><br><span class="line">        ur.getInputStream().read(bytes);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bytes));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出的内容如下，符合预期</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">文件名：hello.txt</span><br><span class="line">网络文件URL：http:<span class="comment">//image.laijianfeng.org/hello.txt</span></span><br><span class="line">是否存在：<span class="keyword">true</span></span><br><span class="line">是否可读：<span class="keyword">true</span></span><br><span class="line">文件长度：<span class="number">47</span></span><br><span class="line"></span><br><span class="line">--------文件内容----------</span><br><span class="line"></span><br><span class="line">hello world!</span><br><span class="line">welcome to http:<span class="comment">//laijianfeng.org</span></span><br></pre></td></tr></table></figure>
<h2 id="Spring-Bean-实例化中的策略模式"><a href="#Spring-Bean-实例化中的策略模式" class="headerlink" title="Spring Bean 实例化中的策略模式"></a>Spring Bean 实例化中的策略模式</h2><p>Spring实例化Bean有三种方式：构造器实例化、静态工厂实例化、实例工厂实例化<br>譬如通过构造器实例化bean的XML示例如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.demo.Person"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"personWithParam"</span> <span class="attr">class</span>=<span class="string">"com.demo.Person"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"小旋锋"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"personWirhParams"</span> <span class="attr">class</span>=<span class="string">"com.demo.Person"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"小旋锋"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"22"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>具体实例化Bean的过程中，Spring中角色分工很明确，创建对象的时候先通过 ConstructorResolver 找到对应的实例化方法和参数，再通过实例化策略 InstantiationStrategy 进行实例化，根据创建对象的三个分支( 工厂方法、有参构造方法、无参构造方法 ), InstantiationStrategy 提供了三个接口方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InstantiationStrategy</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 默认构造方法</span></span><br><span class="line">    <span class="function">Object <span class="title">instantiate</span><span class="params">(RootBeanDefinition beanDefinition, String beanName, BeanFactory owner)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定构造方法</span></span><br><span class="line">    <span class="function">Object <span class="title">instantiate</span><span class="params">(RootBeanDefinition beanDefinition, String beanName, BeanFactory owner, Constructor&lt;?&gt; ctor,</span></span></span><br><span class="line"><span class="function"><span class="params">            Object[] args)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定工厂方法</span></span><br><span class="line">    <span class="function">Object <span class="title">instantiate</span><span class="params">(RootBeanDefinition beanDefinition, String beanName, BeanFactory owner, Object factoryBean,</span></span></span><br><span class="line"><span class="function"><span class="params">            Method factoryMethod, Object[] args)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>InstantiationStrategy 为实例化策略接口，扮演抽象策略角色，有两种具体策略类，分别为 SimpleInstantiationStrategy 和 CglibSubclassingInstantiationStrategy<br><img src="../../images/spring-instantiation.png" alt="spring-instantiation"><br>在 SimpleInstantiationStrategy 中对这三个方法做了简单实现，如果工厂方法实例化直接用反射创建对象，如果是构造方法实例化的则判断是否有 MethodOverrides，如果有无 MethodOverrides 也是直接用反射，如果有 MethodOverrides 就需要用 cglib 实例化对象，SimpleInstantiationStrategy 把通过 cglib 实例化的任务交给了它的子类 CglibSubclassingInstantiationStrategy。</p>
<h1 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h1><p>患者绑定医生</p>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>行为型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>模板方法模式</title>
    <url>/design-pattern/template-method/</url>
    <content><![CDATA[<h1 id="模板方法模式UML类图"><a href="#模板方法模式UML类图" class="headerlink" title="模板方法模式UML类图"></a>模板方法模式UML类图</h1><p><img src="../../images/plantuml/template-method.urm.png" alt="模板方法模式UML类图"></p>
<a id="more"></a>
<h1 id="模板方法模式java实现"><a href="#模板方法模式java实现" class="headerlink" title="模板方法模式java实现"></a>模板方法模式java实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * StealingMethod defines skeleton for the algorithm.</span></span><br><span class="line"><span class="comment"> 偷窃Method定义了算法的框架。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">StealingMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(StealingMethod<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title">pickTarget</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">confuseTarget</span><span class="params">(String target)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">stealTheItem</span><span class="params">(String target)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Steal.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">steal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//挑选目标</span></span><br><span class="line">    <span class="keyword">var</span> target = pickTarget();</span><br><span class="line">    LOGGER.info(<span class="string">"The target has been chosen as &#123;&#125;."</span>, target);</span><br><span class="line">    <span class="comment">//迷惑目标</span></span><br><span class="line">    confuseTarget(target);</span><br><span class="line">    <span class="comment">//偷物品</span></span><br><span class="line">    stealTheItem(target);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SubtleMethod implementation of &#123;<span class="doctag">@link</span> StealingMethod&#125;.</span></span><br><span class="line"><span class="comment"> 微妙</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubtleMethod</span> <span class="keyword">extends</span> <span class="title">StealingMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(SubtleMethod<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> String <span class="title">pickTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//店主</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"shop keeper"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">confuseTarget</span><span class="params">(String target)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//泪流满面地接近店主，拥抱他！</span></span><br><span class="line">    LOGGER.info(<span class="string">"Approach the &#123;&#125; with tears running and hug him!"</span>, target);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">stealTheItem</span><span class="params">(String target)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//保持密切联系时，抓住店主的钱包。</span></span><br><span class="line">    LOGGER.info(<span class="string">"While in close contact grab the &#123;&#125;'s wallet."</span>, target);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HitAndRunMethod implementation of &#123;<span class="doctag">@link</span> StealingMethod&#125;.</span></span><br><span class="line"><span class="comment"> 奔跑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HitAndRunMethod</span> <span class="keyword">extends</span> <span class="title">StealingMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(HitAndRunMethod<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> String <span class="title">pickTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//小妖精的女人</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"old goblin woman"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">confuseTarget</span><span class="params">(String target)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//从后面接近老妖精的女人。</span></span><br><span class="line">    LOGGER.info(<span class="string">"Approach the &#123;&#125; from behind."</span>, target);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">stealTheItem</span><span class="params">(String target)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//抓住手提包，快点逃跑！</span></span><br><span class="line">    LOGGER.info(<span class="string">"Grab the handbag and run away fast!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Halfling thief uses &#123;<span class="doctag">@link</span> StealingMethod&#125; to steal.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HalflingThief</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> StealingMethod method;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HalflingThief</span><span class="params">(StealingMethod method)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.method = method;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">steal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    method.steal();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeMethod</span><span class="params">(StealingMethod method)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.method = method;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Template Method defines a skeleton for an algorithm. The algorithm subclasses provide</span></span><br><span class="line"><span class="comment"> * implementation for the blank parts.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;In this example &#123;<span class="doctag">@link</span> HalflingThief&#125; contains &#123;<span class="doctag">@link</span> StealingMethod&#125; that can be changed.</span></span><br><span class="line"><span class="comment"> * First the thief hits with &#123;<span class="doctag">@link</span> HitAndRunMethod&#125; and then with &#123;<span class="doctag">@link</span> SubtleMethod&#125;.</span></span><br><span class="line"><span class="comment"> 模板方法定义算法的框架。 算法子类为空白部分提供实现。</span></span><br><span class="line"><span class="comment">&lt;p&gt;在此示例中，&#123;@ link HalflingThief&#125;包含可以更改的&#123;<span class="doctag">@link</span> StealingMethod&#125;。 首先，小偷用&#123;<span class="doctag">@link</span> HitAndRunMethod&#125;打，然后用&#123;<span class="doctag">@link</span> SubtleMethod&#125;打。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Program entry point.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> args command line args</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> thief = <span class="keyword">new</span> HalflingThief(<span class="keyword">new</span> HitAndRunMethod());</span><br><span class="line">    thief.steal();</span><br><span class="line">    thief.changeMethod(<span class="keyword">new</span> SubtleMethod());</span><br><span class="line">    thief.steal();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="极客时间"><a href="#极客时间" class="headerlink" title="极客时间"></a>极客时间</h1><h2 id="实际应用案例"><a href="#实际应用案例" class="headerlink" title="实际应用案例"></a>实际应用案例</h2><p>复用</p>
<ul>
<li>Java IO 类库中InputStream read()</li>
<li>Java AbstractList addAll()<br>扩展</li>
<li>Java HttpServlet 的 service()</li>
<li>JUnit TestCase setUp() tearDown()<br>回调</li>
<li>JdbcTemplate</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>行为型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>访问者模式</title>
    <url>/design-pattern/visitor/</url>
    <content><![CDATA[<h1 id="访问者模式UML类图"><a href="#访问者模式UML类图" class="headerlink" title="访问者模式UML类图"></a>访问者模式UML类图</h1><p><img src="../../images/plantuml/visitor.urm.png" alt="访问者模式UML类图"></p>
<a id="more"></a>
<h1 id="访问者模式java实现"><a href="#访问者模式java实现" class="headerlink" title="访问者模式java实现"></a>访问者模式java实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Visitor interface.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UnitVisitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">visitSoldier</span><span class="params">(Soldier soldier)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">visitSergeant</span><span class="params">(Sergeant sergeant)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">visitCommander</span><span class="params">(Commander commander)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CommanderVisitor.</span></span><br><span class="line"><span class="comment"> 指挥官访客</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommanderVisitor</span> <span class="keyword">implements</span> <span class="title">UnitVisitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(CommanderVisitor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitSoldier</span><span class="params">(Soldier soldier)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Do nothing</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitSergeant</span><span class="params">(Sergeant sergeant)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Do nothing</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitCommander</span><span class="params">(Commander commander)</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"Good to see you &#123;&#125;"</span>, commander);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SergeantVisitor.</span></span><br><span class="line"><span class="comment"> 中士访客</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SergeantVisitor</span> <span class="keyword">implements</span> <span class="title">UnitVisitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(SergeantVisitor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitSoldier</span><span class="params">(Soldier soldier)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Do nothing</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitSergeant</span><span class="params">(Sergeant sergeant)</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"Hello &#123;&#125;"</span>, sergeant);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitCommander</span><span class="params">(Commander commander)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Do nothing</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SoldierVisitor.</span></span><br><span class="line"><span class="comment"> 士兵访客</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SoldierVisitor</span> <span class="keyword">implements</span> <span class="title">UnitVisitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(SoldierVisitor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitSoldier</span><span class="params">(Soldier soldier)</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"Greetings &#123;&#125;"</span>, soldier);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitSergeant</span><span class="params">(Sergeant sergeant)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Do nothing</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitCommander</span><span class="params">(Commander commander)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Do nothing</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface for the nodes in hierarchy.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Unit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Unit[] children;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Unit</span><span class="params">(Unit... children)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.children = children;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Accept visitor.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(UnitVisitor visitor)</span> </span>&#123;</span><br><span class="line">    Arrays.stream(children).forEach(child -&gt; child.accept(visitor));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Commander.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Commander</span> <span class="keyword">extends</span> <span class="title">Unit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Commander</span><span class="params">(Unit... children)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(children);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(UnitVisitor visitor)</span> </span>&#123;</span><br><span class="line">    visitor.visitCommander(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">super</span>.accept(visitor);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"commander"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sergeant.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sergeant</span> <span class="keyword">extends</span> <span class="title">Unit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Sergeant</span><span class="params">(Unit... children)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(children);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(UnitVisitor visitor)</span> </span>&#123;</span><br><span class="line">    visitor.visitSergeant(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">super</span>.accept(visitor);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"sergeant"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Soldier.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Soldier</span> <span class="keyword">extends</span> <span class="title">Unit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Soldier</span><span class="params">(Unit... children)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(children);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(UnitVisitor visitor)</span> </span>&#123;</span><br><span class="line">    visitor.visitSoldier(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">super</span>.accept(visitor);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"soldier"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Visitor pattern defines mechanism to apply operations on nodes in hierarchy. New operations</span></span><br><span class="line"><span class="comment"> * can be added without altering the node interface.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;In this example there is a unit hierarchy beginning from &#123;<span class="doctag">@link</span> Commander&#125;. This hierarchy is</span></span><br><span class="line"><span class="comment"> * traversed by visitors. &#123;<span class="doctag">@link</span> SoldierVisitor&#125; applies its operation on &#123;<span class="doctag">@link</span> Soldier&#125;s, &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * SergeantVisitor&#125; on &#123;<span class="doctag">@link</span> Sergeant&#125;s and so on.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> &lt;p&gt;访问者模式定义了将操作应用于层次结构中的节点的机制。 可以添加新操作，而无需更改节点接口。&lt;/ p&gt;</span></span><br><span class="line"><span class="comment">&lt;p&gt;在此示例中，从&#123;<span class="doctag">@link</span> Commander&#125;开始有一个单元层次结构。 访客遍历此层次结构。 &#123;<span class="doctag">@link</span> SoldierVisitor&#125;在&#123;<span class="doctag">@link</span> Soldier&#125;上应用其操作，在&#123;<span class="doctag">@link</span> Sergeant&#125; s上使用&#123;<span class="doctag">@link</span> SergeantVisitor&#125;，依此类推。&lt;/ p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Program entry point.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> args command line args</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> commander = <span class="keyword">new</span> Commander(</span><br><span class="line">        <span class="keyword">new</span> Sergeant(<span class="keyword">new</span> Soldier(), <span class="keyword">new</span> Soldier(), <span class="keyword">new</span> Soldier()),</span><br><span class="line">        <span class="keyword">new</span> Sergeant(<span class="keyword">new</span> Soldier(), <span class="keyword">new</span> Soldier(), <span class="keyword">new</span> Soldier())</span><br><span class="line">    );</span><br><span class="line">    commander.accept(<span class="keyword">new</span> SoldierVisitor());</span><br><span class="line">    commander.accept(<span class="keyword">new</span> SergeantVisitor());</span><br><span class="line">    commander.accept(<span class="keyword">new</span> CommanderVisitor());</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h1><p>asm</p>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>行为型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>spring源码</title>
    <url>/spring/spring-source/</url>
    <content><![CDATA[<p><img src="../../images/spring.svg" alt="AnnotationConfigApplicationContext源码架构图"><br><img src="../../images/AnnotationConfigApplicationContext.png" alt="AnnotationConfigApplicationContext类图"></p>]]></content>
      <categories>
        <category>框架源码</category>
      </categories>
      <tags>
        <tag>框架源码</tag>
      </tags>
  </entry>
  <entry>
    <title>混乱的JAVA日志体系</title>
    <url>/log/log/</url>
    <content><![CDATA[<h1 id="Log日志体系"><a href="#Log日志体系" class="headerlink" title="Log日志体系"></a>Log日志体系</h1><p>commons-logging.jar、log4j.jar、sl4j-api.jar、logback.jar</p>
<a id="more"></a>
<h1 id="背景-发展史"><a href="#背景-发展史" class="headerlink" title="背景/发展史"></a>背景/发展史</h1><ul>
<li>log4j（作者Ceki Gülcü）出来时就等到了广泛的应用（注意这里是直接使用），是Java日志事实上的标准，并成为了Apache的项目</li>
<li>Apache要求把log4j并入到JDK，SUN拒绝，并在jdk1.4版本后增加了JUL（java.util.logging）</li>
<li>毕竟是JDK自带的，JUL也有很多人用。同时还有其他日志组件，如SimpleLog等。这时如果有人想换成其他日志组件，如log4j换成JUL，因为api完全不同，就需- 要改动代码。</li>
<li>Apache见此，开发了JCL（Jakarta Commons Logging），即commons-logging-xx.jar。它只提供一套通用的日志接口api，并不提供日志的实现。很好的- 设计原则嘛，依赖抽象而非实现。这样应用程序可以在运行时选择自己想要的日志实现组件。</li>
<li>这样看上去也挺美好的，但是log4j的作者觉得JCL不好用，自己开发出slf4j，它跟JCL类似，本身不替供日志具体实现，只对外提供接口或门面。目的就是为了替- 代JCL。同时，还开发出logback，一个比log4j拥有更高性能的组件，目的是为了替代log4j。</li>
<li>Apache参考了logback,并做了一系列优化，推出了log4j2</li>
</ul>
<h1 id="JUL-jdk原生日志"><a href="#JUL-jdk原生日志" class="headerlink" title="JUL jdk原生日志"></a>JUL jdk原生日志</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JUL日志 jdk原生自带</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> Logger logger = Logger.getLogger(MyLog<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    logger.info(<span class="string">"jdk原生日志"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="../../images/jul.png" alt="jul样例"></p>
<h1 id="JCL-commons-logging"><a href="#JCL-commons-logging" class="headerlink" title="JCL commons-logging"></a>JCL commons-logging</h1><p>默认的LogFactory实现使用以下发现过程来确定应使用的Log实现类型（在找到第一个肯定匹配项时（按顺序），该过程终止）：</p>
<ol>
<li>查找该工厂的名为org.apache.commons.logging.Log的配置属性 （为了向后兼容该API的1.0之前的版本，还请参考org.apache.commons.logging.log属性 ）。<br>可以通过Java代码显式设置配置属性，但是更常见的是通过在类路径中放置一个名为commons-logging.properties的文件来进行设置。当存在这样的文件时，属性文件中的每个条目都将成为LogFactory的“属性”。如果类路径中有多个此类文件，则1.1之前的commons-logging版本仅使用找到的第一个文件。从版本1.1开始，每个文件都可以定义优先级密钥，并且使用优先级最高的文件（没有优先级定义表示优先级为零）。当多个文件具有相同的优先级时，将使用找到的第一个文件。</li>
</ol>
<p>建议在commons-logging.properties文件中定义此属性，以明确选择Log实现。</p>
<ol start="2">
<li>查找一个名为org.apache.commons.logging.Log的系统属性 （为了向后兼容此API的1.0之前的版本，还请参考系统属性 org.apache.commons.logging.log）。</li>
<li>如果Log4J日志记录系统在应用程序类路径中可用，请使用相应的包装器类（Log4JLogger）。</li>
<li>如果应用程序在JDK 1.4系统上执行，请使用相应的包装器类（Jdk14Logger）。</li>
<li>退回到默认的简单日志记录包装器（SimpleLog）。</li>
</ol>
<h2 id="jcl整合log4j"><a href="#jcl整合log4j" class="headerlink" title="jcl整合log4j"></a>jcl整合log4j</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile <span class="string">group:</span> <span class="string">'commons-logging'</span>, <span class="string">name:</span> <span class="string">'commons-logging'</span>, <span class="string">version:</span> <span class="string">'1.2'</span></span><br><span class="line">compile <span class="string">group:</span> <span class="string">'log4j'</span>, <span class="string">name:</span> <span class="string">'log4j'</span>, <span class="string">version:</span> <span class="string">'1.2.17'</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JclLog4j</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> Log logger = LogFactory.getLog(JclLog4j<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    logger.info(<span class="string">"jul整合log4j日志"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="../../images/jcl-log4j.png" alt="jcl整合log4j样例"></p>
<h1 id="Slf4j"><a href="#Slf4j" class="headerlink" title="Slf4j"></a>Slf4j</h1><h2 id="slf4j与其他日志框架动态绑定"><a href="#slf4j与其他日志框架动态绑定" class="headerlink" title="slf4j与其他日志框架动态绑定"></a>slf4j与其他日志框架动态绑定</h2><p><img src="../../images/slf4j-bind.png" alt="slf4j"></p>
<h2 id="slf4j整合log4j"><a href="#slf4j整合log4j" class="headerlink" title="slf4j整合log4j"></a>slf4j整合log4j</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile <span class="string">group:</span> <span class="string">'org.slf4j'</span>, <span class="string">name:</span> <span class="string">'slf4j-api'</span>, <span class="string">version:</span> <span class="string">'1.7.30'</span></span><br><span class="line">compile <span class="string">group:</span> <span class="string">'org.slf4j'</span>, <span class="string">name:</span> <span class="string">'slf4j-log4j12'</span>, <span class="string">version:</span> <span class="string">'1.7.30'</span></span><br><span class="line">compile <span class="string">group:</span> <span class="string">'log4j'</span>, <span class="string">name:</span> <span class="string">'log4j'</span>, <span class="string">version:</span> <span class="string">'1.2.17'</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Slf4jLog4j</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(Slf4jLog4j<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    logger.info(<span class="string">"slf4j整合log4j"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="../../images/slf4j-log4j.png" alt="slf4j-log4j"></p>
<h2 id="slf4j整合logback"><a href="#slf4j整合logback" class="headerlink" title="slf4j整合logback"></a>slf4j整合logback</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile <span class="string">group:</span> <span class="string">'org.slf4j'</span>, <span class="string">name:</span> <span class="string">'slf4j-api'</span>, <span class="string">version:</span> <span class="string">'1.7.30'</span></span><br><span class="line">compile <span class="string">group:</span> <span class="string">'ch.qos.logback'</span>, <span class="string">name:</span> <span class="string">'logback-classic'</span>, <span class="string">version:</span> <span class="string">'1.2.3'</span></span><br><span class="line">compile <span class="string">group:</span> <span class="string">'ch.qos.logback'</span>, <span class="string">name:</span> <span class="string">'logback-core'</span>, <span class="string">version:</span> <span class="string">'1.2.3'</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Slf4jLogback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(Slf4jLogback<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    logger.info(<span class="string">"slf4j整合logback"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="../../images/slf4j-logback.png" alt="slf4j-logback"></p>
<h2 id="slf4j整合jul"><a href="#slf4j整合jul" class="headerlink" title="slf4j整合jul"></a>slf4j整合jul</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile <span class="string">group:</span> <span class="string">'org.slf4j'</span>, <span class="string">name:</span> <span class="string">'slf4j-api'</span>, <span class="string">version:</span> <span class="string">'1.7.30'</span></span><br><span class="line">compile <span class="string">group:</span> <span class="string">'org.slf4j'</span>, <span class="string">name:</span> <span class="string">'slf4j-jdk14'</span>, <span class="string">version:</span> <span class="string">'1.7.30'</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Slf4jJul</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(Slf4jJul<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    logger.info(<span class="string">"slf4j整合jul"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="../../images/slf4j-jul.png" alt="slf4j-jul"></p>
<h2 id="slf4j整合log4j2"><a href="#slf4j整合log4j2" class="headerlink" title="slf4j整合log4j2"></a>slf4j整合log4j2</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile <span class="string">group:</span> <span class="string">'org.slf4j'</span>, <span class="string">name:</span> <span class="string">'slf4j-api'</span>, <span class="string">version:</span> <span class="string">'1.7.30'</span></span><br><span class="line">compile <span class="string">group:</span> <span class="string">'org.apache.logging.log4j'</span>, <span class="string">name:</span> <span class="string">'log4j-slf4j-impl'</span>, <span class="string">version:</span> <span class="string">'2.13.1'</span></span><br><span class="line">compile <span class="string">group:</span> <span class="string">'org.apache.logging.log4j'</span>, <span class="string">name:</span> <span class="string">'log4j-api'</span>, <span class="string">version:</span> <span class="string">'2.13.1'</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Slf4jLog4j2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(Slf4jLog4j2<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    logger.error(<span class="string">"slf4j整合log4j2"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="../../images/slf4j-log4j2.png" alt="slf4j-log4j2"></p>
<h2 id="slf4j整合jcl"><a href="#slf4j整合jcl" class="headerlink" title="slf4j整合jcl"></a>slf4j整合jcl</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile <span class="string">group:</span> <span class="string">'org.slf4j'</span>, <span class="string">name:</span> <span class="string">'slf4j-api'</span>, <span class="string">version:</span> <span class="string">'1.7.30'</span></span><br><span class="line">compile <span class="string">group:</span> <span class="string">'org.slf4j'</span>, <span class="string">name:</span> <span class="string">'slf4j-jcl'</span>, <span class="string">version:</span> <span class="string">'1.7.30'</span></span><br></pre></td></tr></table></figure>

<h2 id="slf4j桥接旧版API"><a href="#slf4j桥接旧版API" class="headerlink" title="slf4j桥接旧版API"></a>slf4j桥接旧版API</h2><p><img src="../../images/slf4j-over.png" alt="其他日志框架统一转换为slf4j"><br>其实总的来说，无论就是以下几种情况</p>
<ul>
<li>你在用JCL<br>使用jcl-over-slf4j.jar适配</li>
<li>你在用log4j<br>使用log4j-over-slf4j.jar适配</li>
<li>你在用JUL<br>使用jul-to-slf4j.jar适配</li>
</ul>
<h1 id="日志框架在spring中使用"><a href="#日志框架在spring中使用" class="headerlink" title="日志框架在spring中使用"></a>日志框架在spring中使用</h1><h2 id="让Spring统一输出"><a href="#让Spring统一输出" class="headerlink" title="让Spring统一输出"></a>让Spring统一输出</h2><p>这就是为了对slf4j的适配做一个例子说明。<br>Spring是用JCL作为日志门面的，那我们的应用是slf4j + logback，怎么让Spring也用到logback作为日志输出呢？这样的好处就是我们可以统一项目内的其他模块、框架的日志输出（日志格式，日志文件，存放路径等，以及其他slf4j支持的功能）<br>很简单，就是加入jcl-over-slf4j.jar就好了。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile <span class="string">group:</span> <span class="string">'org.slf4j'</span>, <span class="string">name:</span> <span class="string">'jcl-over-slf4j'</span>, <span class="string">version:</span> <span class="string">'1.7.30'</span></span><br></pre></td></tr></table></figure>

<h2 id="spring5与spring4日志区别"><a href="#spring5与spring4日志区别" class="headerlink" title="spring5与spring4日志区别"></a>spring5与spring4日志区别</h2><blockquote>
<p><strong>永远不要尝试将SLF4J适配器（log4j-to-slf4j-2.x.jar）与SLF4J桥接器（log4j-slf4j-impl-2.x.jar）一起使用，因为这会导致事件之间不断地路由SLF4J和Log4j 2。</strong></p>
</blockquote>
<p>spring4 使用jcl<br>spring5 使用spring-jcl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//存在于log4j-api:2.13.1</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOG4J_SPI = <span class="string">"org.apache.logging.log4j.spi.ExtendedLogger"</span>;</span><br><span class="line">    <span class="comment">//存在于log4j-to-slf4j:2.13.1 </span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOG4J_SLF4J_PROVIDER = <span class="string">"org.apache.logging.slf4j.SLF4JProvider"</span>;</span><br><span class="line">    <span class="comment">//存在于slf4j-api:1.7.30</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SLF4J_SPI = <span class="string">"org.slf4j.spi.LocationAwareLogger"</span>;</span><br><span class="line">    <span class="comment">//存在于slf4j-api:1.7.30</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SLF4J_API = <span class="string">"org.slf4j.Logger"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> LogApi logApi;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (isPresent(LOG4J_SPI)) &#123;</span><br><span class="line">			<span class="keyword">if</span> (isPresent(LOG4J_SLF4J_PROVIDER) &amp;&amp; isPresent(SLF4J_SPI)) &#123;</span><br><span class="line">				<span class="comment">// log4j-to-slf4j bridge -&gt; we'll rather go with the SLF4J SPI;</span></span><br><span class="line">				<span class="comment">// however, we still prefer Log4j over the plain SLF4J API since</span></span><br><span class="line">				<span class="comment">// the latter does not have location awareness support.</span></span><br><span class="line">				logApi = LogApi.SLF4J_LAL;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">// Use Log4j 2.x directly, including location awareness support</span></span><br><span class="line">				logApi = LogApi.LOG4J;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (isPresent(SLF4J_SPI)) &#123;</span><br><span class="line">			<span class="comment">// Full SLF4J SPI including location awareness support</span></span><br><span class="line">			logApi = LogApi.SLF4J_LAL;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (isPresent(SLF4J_API)) &#123;</span><br><span class="line">			<span class="comment">// Minimal SLF4J API without location awareness support</span></span><br><span class="line">			logApi = LogApi.SLF4J;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// java.util.logging as default</span></span><br><span class="line">			logApi = LogApi.JUL;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="spring-boot-日志"><a href="#spring-boot-日志" class="headerlink" title="spring boot 日志"></a>spring boot 日志</h2><p>springboot 默认使用slf4j+logback</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile <span class="string">group:</span> <span class="string">'org.springframework.boot'</span>, <span class="string">name:</span> <span class="string">'spring-boot-starter-logging'</span>, <span class="string">version:</span> <span class="string">'2.1.10.RELEASE'</span></span><br></pre></td></tr></table></figure>
<p><img src="../../images/spring-boot-logging%E4%BE%9D%E8%B5%96%E5%8C%85.png" alt="spring boot logging依赖包"><br>springboot 启用slf4j+log4j2</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile <span class="string">group:</span> <span class="string">'org.springframework.boot'</span>, <span class="string">name:</span> <span class="string">'spring-boot-starter-log4j2'</span>, <span class="string">version:</span> <span class="string">'2.1.10.RELEASE'</span></span><br></pre></td></tr></table></figure>
<p><img src="../../images/spring-boot-log4j%E4%BE%9D%E8%B5%96%E5%8C%85.png" alt="spring boot log4j依赖包"></p>
]]></content>
      <categories>
        <category>框架源码</category>
      </categories>
      <tags>
        <tag>框架源码</tag>
      </tags>
  </entry>
  <entry>
    <title>eureka</title>
    <url>/springcloud/eureka/</url>
    <content><![CDATA[<p><img src="../../images/eureka%E6%BA%90%E7%A0%81.png" alt="Eureka源码"></p>]]></content>
      <categories>
        <category>框架源码</category>
        <category>springcloud</category>
      </categories>
      <tags>
        <tag>框架源码</tag>
      </tags>
  </entry>
  <entry>
    <title>feign</title>
    <url>/springcloud/feign/</url>
    <content><![CDATA[<p><img src="http://assets.processon.com/chart_image/5e7d8b55e4b08b61573df913.png" alt="feign"></p>]]></content>
      <categories>
        <category>框架源码</category>
        <category>springcloud</category>
      </categories>
      <tags>
        <tag>框架源码</tag>
      </tags>
  </entry>
  <entry>
    <title>hystrix</title>
    <url>/springcloud/hystrix/</url>
    <content><![CDATA[<p><img src="../../images/hystrix-command-flow-chart.png" alt="Hystrix流程图"></p>
<a id="more"></a>
<p><img src="../../images/hystrix%E6%BA%90%E7%A0%81.png" alt="Hystrix源码"></p>
]]></content>
      <categories>
        <category>框架源码</category>
        <category>springcloud</category>
      </categories>
      <tags>
        <tag>框架源码</tag>
      </tags>
  </entry>
  <entry>
    <title>ribbon</title>
    <url>/springcloud/ribbon/</url>
    <content><![CDATA[<p><img src="http://assets.processon.com/chart_image/5e7d9fafe4b092510f7ac3de.png" alt="ribbon"></p>]]></content>
      <categories>
        <category>框架源码</category>
        <category>springcloud</category>
      </categories>
      <tags>
        <tag>框架源码</tag>
      </tags>
  </entry>
  <entry>
    <title>zuul</title>
    <url>/springcloud/zuul/</url>
    <content><![CDATA[<p><img src="http://assets.processon.com/chart_image/5e80796ce4b092510f7f5d33.png" alt="Zuul"></p>]]></content>
      <categories>
        <category>框架源码</category>
        <category>springcloud</category>
      </categories>
      <tags>
        <tag>框架源码</tag>
      </tags>
  </entry>
  <entry>
    <title>tomcat源码</title>
    <url>/tomcat/tomcat-source/</url>
    <content><![CDATA[<p><img src="../../images/tomcat.svg" alt="tomcat源码UML类图"></p>
<a id="more"></a>
<p><img src="../../images/plantuml/tomcat_sequence.png" alt="tomcat源码UML时序图"><br><img src="../../images/plantuml/tomcat_request_seq.png" alt="tomcat源码Request请求UML时序图"></p>
]]></content>
      <categories>
        <category>框架源码</category>
      </categories>
      <tags>
        <tag>框架源码</tag>
      </tags>
  </entry>
</search>
